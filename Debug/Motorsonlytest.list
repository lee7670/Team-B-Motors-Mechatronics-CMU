
Motorsonlytest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080055c8  080055c8  000155c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a8  200001d4  08005a34  000201d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000047c  08005a34  0002047c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000117a1  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020d6  00000000  00000000  0003199e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005d55  00000000  00000000  00033a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c48  00000000  00000000  00039ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047f3  00000000  00000000  0003ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003078  00000000  00000000  0003f32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000423a3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fd8  00000000  00000000  00042420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	080055ac 	.word	0x080055ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	080055ac 	.word	0x080055ac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr

08001158 <__aeabi_f2uiz>:
 8001158:	0042      	lsls	r2, r0, #1
 800115a:	d20e      	bcs.n	800117a <__aeabi_f2uiz+0x22>
 800115c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001160:	d30b      	bcc.n	800117a <__aeabi_f2uiz+0x22>
 8001162:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116a:	d409      	bmi.n	8001180 <__aeabi_f2uiz+0x28>
 800116c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2uiz+0x32>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d102      	bne.n	8001190 <__aeabi_f2uiz+0x38>
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_InitTick+0x24>)
{
 800119a:	b510      	push	{r4, lr}
 800119c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011a8:	f000 f876 	bl	8001298 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	4621      	mov	r1, r4
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f830 	bl	8001218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <HAL_Init>:
{
 80011c0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f816 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ffe5 	bl	8001198 <HAL_InitTick>
  HAL_MspInit();
 80011ce:	f002 f9e7 	bl	80035a0 <HAL_MspInit>
}
 80011d2:	2000      	movs	r0, #0
 80011d4:	bd08      	pop	{r3, pc}
	...

080011d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <HAL_IncTick+0xc>)
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000200 	.word	0x20000200

080011e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011e8:	4b01      	ldr	r3, [pc, #4]	; (80011f0 <HAL_GetTick+0x8>)
 80011ea:	6818      	ldr	r0, [r3, #0]
}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000200 	.word	0x20000200

080011f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800120e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001210:	60d3      	str	r3, [r2, #12]
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121a:	b530      	push	{r4, r5, lr}
 800121c:	68dc      	ldr	r4, [r3, #12]
 800121e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	2b04      	cmp	r3, #4
 800122a:	bf28      	it	cs
 800122c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001234:	bf98      	it	ls
 8001236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	fa05 f303 	lsl.w	r3, r5, r3
 800123c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001240:	bf88      	it	hi
 8001242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4019      	ands	r1, r3
 8001246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	fa05 f404 	lsl.w	r4, r5, r4
 800124c:	3c01      	subs	r4, #1
 800124e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001252:	ea42 0201 	orr.w	r2, r2, r1
 8001256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	bfaf      	iteee	ge
 800125c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	4b06      	ldrlt	r3, [pc, #24]	; (800127c <HAL_NVIC_SetPriority+0x64>)
 8001262:	f000 000f 	andlt.w	r0, r0, #15
 8001266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	bfa5      	ittet	ge
 800126a:	b2d2      	uxtbge	r2, r2
 800126c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001276:	bd30      	pop	{r4, r5, pc}
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000ed14 	.word	0xe000ed14

08001280 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001280:	2301      	movs	r3, #1
 8001282:	0942      	lsrs	r2, r0, #5
 8001284:	f000 001f 	and.w	r0, r0, #31
 8001288:	fa03 f000 	lsl.w	r0, r3, r0
 800128c:	4b01      	ldr	r3, [pc, #4]	; (8001294 <HAL_NVIC_EnableIRQ+0x14>)
 800128e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	3801      	subs	r0, #1
 800129a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800129e:	d20a      	bcs.n	80012b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	bf0c      	ite	eq
 80012cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012d0:	f022 0204 	bicne.w	r2, r2, #4
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	4770      	bx	lr
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012dc:	4770      	bx	lr

080012de <HAL_SYSTICK_IRQHandler>:
{
 80012de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80012e0:	f7ff fffc 	bl	80012dc <HAL_SYSTICK_Callback>
 80012e4:	bd08      	pop	{r3, pc}
	...

080012e8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80012e8:	2300      	movs	r3, #0
{ 
 80012ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4a62      	ldr	r2, [pc, #392]	; (8001478 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80012f0:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8001480 <HAL_GPIO_Init+0x198>
{ 
 80012f8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80012fa:	fa38 f403 	lsrs.w	r4, r8, r3
 80012fe:	d102      	bne.n	8001306 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 8001300:	b005      	add	sp, #20
 8001302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001306:	2401      	movs	r4, #1
 8001308:	409c      	lsls	r4, r3
    if(iocurrent)
 800130a:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800130e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8001310:	f000 80a7 	beq.w	8001462 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001314:	684c      	ldr	r4, [r1, #4]
 8001316:	f024 0a10 	bic.w	sl, r4, #16
 800131a:	f1ba 0f02 	cmp.w	sl, #2
 800131e:	d116      	bne.n	800134e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001320:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001324:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001328:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800132c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001330:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001334:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001338:	fa0e fe0b 	lsl.w	lr, lr, fp
 800133c:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8001340:	690d      	ldr	r5, [r1, #16]
 8001342:	fa05 f50b 	lsl.w	r5, r5, fp
 8001346:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800134a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800134e:	2503      	movs	r5, #3
 8001350:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001354:	fa05 f50c 	lsl.w	r5, r5, ip
 8001358:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800135a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800135e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001362:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001366:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800136e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001372:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001376:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137a:	d816      	bhi.n	80013aa <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 800137c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001380:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001382:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001386:	fa07 fa0c 	lsl.w	sl, r7, ip
 800138a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800138e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001392:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001396:	9f01      	ldr	r7, [sp, #4]
 8001398:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800139c:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80013a0:	fa0e fe03 	lsl.w	lr, lr, r3
 80013a4:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80013a8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013aa:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013ac:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013ae:	688f      	ldr	r7, [r1, #8]
 80013b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80013b4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013b6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013b8:	00e5      	lsls	r5, r4, #3
 80013ba:	d552      	bpl.n	8001462 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013c4:	f023 0703 	bic.w	r7, r3, #3
 80013c8:	f045 0501 	orr.w	r5, r5, #1
 80013cc:	f8c9 5020 	str.w	r5, [r9, #32]
 80013d0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80013d4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013d8:	f005 0501 	and.w	r5, r5, #1
 80013dc:	9503      	str	r5, [sp, #12]
 80013de:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013e2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013e8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80013ec:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80013ee:	fa0e fe0c 	lsl.w	lr, lr, ip
 80013f2:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013f6:	4d21      	ldr	r5, [pc, #132]	; (800147c <HAL_GPIO_Init+0x194>)
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	d034      	beq.n	8001466 <HAL_GPIO_Init+0x17e>
 80013fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001400:	42a8      	cmp	r0, r5
 8001402:	d032      	beq.n	800146a <HAL_GPIO_Init+0x182>
 8001404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001408:	42a8      	cmp	r0, r5
 800140a:	d030      	beq.n	800146e <HAL_GPIO_Init+0x186>
 800140c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001410:	42a8      	cmp	r0, r5
 8001412:	d02e      	beq.n	8001472 <HAL_GPIO_Init+0x18a>
 8001414:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001418:	42a8      	cmp	r0, r5
 800141a:	bf14      	ite	ne
 800141c:	2505      	movne	r5, #5
 800141e:	2504      	moveq	r5, #4
 8001420:	fa05 f50c 	lsl.w	r5, r5, ip
 8001424:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001428:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800142a:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 800142c:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001432:	bf0c      	ite	eq
 8001434:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001436:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001438:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800143a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001440:	bf0c      	ite	eq
 8001442:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001444:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001446:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001448:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800144e:	bf0c      	ite	eq
 8001450:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001452:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001454:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001456:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800145a:	bf54      	ite	pl
 800145c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800145e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001460:	60d5      	str	r5, [r2, #12]
    position++;
 8001462:	3301      	adds	r3, #1
 8001464:	e749      	b.n	80012fa <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001466:	2500      	movs	r5, #0
 8001468:	e7da      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800146a:	2501      	movs	r5, #1
 800146c:	e7d8      	b.n	8001420 <HAL_GPIO_Init+0x138>
 800146e:	2502      	movs	r5, #2
 8001470:	e7d6      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001472:	2503      	movs	r5, #3
 8001474:	e7d4      	b.n	8001420 <HAL_GPIO_Init+0x138>
 8001476:	bf00      	nop
 8001478:	40010400 	.word	0x40010400
 800147c:	40020000 	.word	0x40020000
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	b10a      	cbz	r2, 800148a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001486:	6181      	str	r1, [r0, #24]
 8001488:	4770      	bx	lr
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	e7fb      	b.n	8001486 <HAL_GPIO_WritePin+0x2>
	...

08001490 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001492:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800149a:	d00c      	beq.n	80014b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800149c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800149e:	491a      	ldr	r1, [pc, #104]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80014a0:	680b      	ldr	r3, [r1, #0]
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80014aa:	6808      	ldr	r0, [r1, #0]
 80014ac:	f000 0001 	and.w	r0, r0, #1
 80014b0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80014b2:	b002      	add	sp, #8
 80014b4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b8:	4914      	ldr	r1, [pc, #80]	; (800150c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80014ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80014be:	d00f      	beq.n	80014e0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014c0:	680a      	ldr	r2, [r1, #0]
 80014c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80014c6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80014ca:	d1e7      	bne.n	800149c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80014cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80014d0:	d1e4      	bne.n	800149c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80014dc:	2201      	movs	r2, #1
 80014de:	e7de      	b.n	800149e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
 80014e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014ee:	9201      	str	r2, [sp, #4]
 80014f0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014f2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014f6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80014fe:	6259      	str	r1, [r3, #36]	; 0x24
 8001500:	e7e1      	b.n	80014c6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40023c00 	.word	0x40023c00
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001510:	6803      	ldr	r3, [r0, #0]
{
 8001512:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	07d9      	lsls	r1, r3, #31
{
 8001518:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	d46a      	bmi.n	80015f2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	079a      	lsls	r2, r3, #30
 8001520:	f100 80e6 	bmi.w	80016f0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	06de      	lsls	r6, r3, #27
 8001528:	d555      	bpl.n	80015d6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800152a:	4dc1      	ldr	r5, [pc, #772]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 800152c:	68ab      	ldr	r3, [r5, #8]
 800152e:	f013 0f0c 	tst.w	r3, #12
 8001532:	f040 8183 	bne.w	800183c <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	6829      	ldr	r1, [r5, #0]
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	2201      	movs	r2, #1
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	420b      	tst	r3, r1
 8001554:	d002      	beq.n	800155c <HAL_RCC_OscConfig+0x4c>
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d06e      	beq.n	800163a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800155c:	4db4      	ldr	r5, [pc, #720]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 800155e:	6a20      	ldr	r0, [r4, #32]
 8001560:	686b      	ldr	r3, [r5, #4]
 8001562:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001566:	4298      	cmp	r0, r3
 8001568:	f240 814a 	bls.w	8001800 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156c:	f7ff ff90 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8001570:	2800      	cmp	r0, #0
 8001572:	d162      	bne.n	800163a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	686b      	ldr	r3, [r5, #4]
 8001576:	6a22      	ldr	r2, [r4, #32]
 8001578:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800157c:	4313      	orrs	r3, r2
 800157e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001580:	6869      	ldr	r1, [r5, #4]
 8001582:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	fab3 f283 	clz	r2, r3
 800158e:	69e3      	ldr	r3, [r4, #28]
 8001590:	4093      	lsls	r3, r2
 8001592:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001596:	4313      	orrs	r3, r2
 8001598:	606b      	str	r3, [r5, #4]
 800159a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800159e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015a2:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015a6:	4ba2      	ldr	r3, [pc, #648]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80015a8:	21f0      	movs	r1, #240	; 0xf0
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	fa91 f1a1 	rbit	r1, r1
 80015b0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015b4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015ba:	40c3      	lsrs	r3, r0
 80015bc:	1c58      	adds	r0, r3, #1
 80015be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015c2:	40ca      	lsrs	r2, r1
 80015c4:	499b      	ldr	r1, [pc, #620]	; (8001834 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015c6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015c8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80015cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_RCC_OscConfig+0x328>)
 80015d0:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80015d2:	f7ff fde1 	bl	8001198 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	071d      	lsls	r5, r3, #28
 80015da:	f100 8191 	bmi.w	8001900 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	0758      	lsls	r0, r3, #29
 80015e2:	f100 81d3 	bmi.w	800198c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	f040 8257 	bne.w	8001a9c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80015ee:	2000      	movs	r0, #0
 80015f0:	e024      	b.n	800163c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f2:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	f002 020c 	and.w	r2, r2, #12
 80015fa:	2a08      	cmp	r2, #8
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	f002 020c 	and.w	r2, r2, #12
 8001604:	2a0c      	cmp	r2, #12
 8001606:	d11c      	bne.n	8001642 <HAL_RCC_OscConfig+0x132>
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	03db      	lsls	r3, r3, #15
 800160c:	d519      	bpl.n	8001642 <HAL_RCC_OscConfig+0x132>
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	4a86      	ldr	r2, [pc, #536]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	2201      	movs	r2, #1
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	420b      	tst	r3, r1
 800162e:	f43f af75 	beq.w	800151c <HAL_RCC_OscConfig+0xc>
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f af71 	bne.w	800151c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800163a:	2001      	movs	r0, #1
}
 800163c:	b003      	add	sp, #12
 800163e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	6863      	ldr	r3, [r4, #4]
 8001644:	4d7a      	ldr	r5, [pc, #488]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001646:	2b01      	cmp	r3, #1
 8001648:	d120      	bne.n	800168c <HAL_RCC_OscConfig+0x17c>
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fdc9 	bl	80011e8 <HAL_GetTick>
 8001656:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800165a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	2601      	movs	r6, #1
 800165e:	4f74      	ldr	r7, [pc, #464]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001660:	fa95 f3a5 	rbit	r3, r5
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	fa95 f3a5 	rbit	r3, r5
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	fa06 f303 	lsl.w	r3, r6, r3
 8001676:	4213      	tst	r3, r2
 8001678:	f47f af50 	bne.w	800151c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fdb4 	bl	80011e8 <HAL_GetTick>
 8001680:	eba0 0008 	sub.w	r0, r0, r8
 8001684:	2864      	cmp	r0, #100	; 0x64
 8001686:	d9eb      	bls.n	8001660 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
 800168a:	e7d7      	b.n	800163c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	bb13      	cbnz	r3, 80016d4 <HAL_RCC_OscConfig+0x1c4>
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016a4:	f7ff fda0 	bl	80011e8 <HAL_GetTick>
 80016a8:	4680      	mov	r8, r0
 80016aa:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	682a      	ldr	r2, [r5, #0]
 80016b0:	fa96 f3a6 	rbit	r3, r6
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa07 f303 	lsl.w	r3, r7, r3
 80016c0:	4213      	tst	r3, r2
 80016c2:	f43f af2b 	beq.w	800151c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c6:	f7ff fd8f 	bl	80011e8 <HAL_GetTick>
 80016ca:	eba0 0008 	sub.w	r0, r0, r8
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9eb      	bls.n	80016aa <HAL_RCC_OscConfig+0x19a>
 80016d2:	e7d9      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	d103      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1d2>
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	602b      	str	r3, [r5, #0]
 80016e0:	e7b3      	b.n	800164a <HAL_RCC_OscConfig+0x13a>
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	e7af      	b.n	8001650 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016f0:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	f002 020c 	and.w	r2, r2, #12
 80016f8:	2a04      	cmp	r2, #4
 80016fa:	d007      	beq.n	800170c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	f002 020c 	and.w	r2, r2, #12
 8001702:	2a0c      	cmp	r2, #12
 8001704:	d124      	bne.n	8001750 <HAL_RCC_OscConfig+0x240>
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	03df      	lsls	r7, r3, #15
 800170a:	d421      	bmi.n	8001750 <HAL_RCC_OscConfig+0x240>
 800170c:	2302      	movs	r3, #2
 800170e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	4a47      	ldr	r2, [pc, #284]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001714:	6810      	ldr	r0, [r2, #0]
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	2101      	movs	r1, #1
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4203      	tst	r3, r0
 800172a:	4613      	mov	r3, r2
 800172c:	d002      	beq.n	8001734 <HAL_RCC_OscConfig+0x224>
 800172e:	68e2      	ldr	r2, [r4, #12]
 8001730:	428a      	cmp	r2, r1
 8001732:	d182      	bne.n	800163a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001734:	6858      	ldr	r0, [r3, #4]
 8001736:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	fab2 f182 	clz	r1, r2
 8001742:	6922      	ldr	r2, [r4, #16]
 8001744:	408a      	lsls	r2, r1
 8001746:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e6e9      	b.n	8001524 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	68e2      	ldr	r2, [r4, #12]
 8001752:	2501      	movs	r5, #1
 8001754:	b382      	cbz	r2, 80017b8 <HAL_RCC_OscConfig+0x2a8>
 8001756:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001762:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800176a:	f7ff fd3d 	bl	80011e8 <HAL_GetTick>
 800176e:	2702      	movs	r7, #2
 8001770:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4e2f      	ldr	r6, [pc, #188]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 8001774:	fa97 f3a7 	rbit	r3, r7
 8001778:	6832      	ldr	r2, [r6, #0]
 800177a:	fa97 f3a7 	rbit	r3, r7
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	fa05 f303 	lsl.w	r3, r5, r3
 800178a:	4213      	tst	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	6871      	ldr	r1, [r6, #4]
 8001790:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	fab3 f283 	clz	r2, r3
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	4093      	lsls	r3, r2
 80017a0:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80017a4:	4313      	orrs	r3, r2
 80017a6:	6073      	str	r3, [r6, #4]
 80017a8:	e6bc      	b.n	8001524 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fd1d 	bl	80011e8 <HAL_GetTick>
 80017ae:	eba0 0008 	sub.w	r0, r0, r8
 80017b2:	2802      	cmp	r0, #2
 80017b4:	d9de      	bls.n	8001774 <HAL_RCC_OscConfig+0x264>
 80017b6:	e767      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 80017b8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017cc:	f7ff fd0c 	bl	80011e8 <HAL_GetTick>
 80017d0:	2602      	movs	r6, #2
 80017d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	4f16      	ldr	r7, [pc, #88]	; (8001830 <HAL_RCC_OscConfig+0x320>)
 80017d6:	fa96 f3a6 	rbit	r3, r6
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	fa96 f3a6 	rbit	r3, r6
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa05 f303 	lsl.w	r3, r5, r3
 80017ec:	4213      	tst	r3, r2
 80017ee:	f43f ae99 	beq.w	8001524 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fcf9 	bl	80011e8 <HAL_GetTick>
 80017f6:	eba0 0008 	sub.w	r0, r0, r8
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9eb      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2c6>
 80017fe:	e743      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	686b      	ldr	r3, [r5, #4]
 8001802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001806:	4303      	orrs	r3, r0
 8001808:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180a:	6869      	ldr	r1, [r5, #4]
 800180c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	fab3 f283 	clz	r2, r3
 8001818:	69e3      	ldr	r3, [r4, #28]
 800181a:	4093      	lsls	r3, r2
 800181c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001820:	4313      	orrs	r3, r2
 8001822:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	f7ff fe34 	bl	8001490 <RCC_SetFlashLatencyFromMSIRange>
 8001828:	2800      	cmp	r0, #0
 800182a:	f43f aeb6 	beq.w	800159a <HAL_RCC_OscConfig+0x8a>
 800182e:	e704      	b.n	800163a <HAL_RCC_OscConfig+0x12a>
 8001830:	40023800 	.word	0x40023800
 8001834:	080055ca 	.word	0x080055ca
 8001838:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183c:	69a2      	ldr	r2, [r4, #24]
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	2a00      	cmp	r2, #0
 8001844:	d037      	beq.n	80018b6 <HAL_RCC_OscConfig+0x3a6>
 8001846:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	2601      	movs	r6, #1
 8001850:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001854:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800185c:	f7ff fcc4 	bl	80011e8 <HAL_GetTick>
 8001860:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001864:	4680      	mov	r8, r0
 8001866:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800186a:	682a      	ldr	r2, [r5, #0]
 800186c:	fa97 f3a7 	rbit	r3, r7
 8001870:	fab3 f383 	clz	r3, r3
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa06 f303 	lsl.w	r3, r6, r3
 800187c:	4213      	tst	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	686b      	ldr	r3, [r5, #4]
 8001882:	6a22      	ldr	r2, [r4, #32]
 8001884:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001888:	4313      	orrs	r3, r2
 800188a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	6869      	ldr	r1, [r5, #4]
 800188e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	fab3 f283 	clz	r2, r3
 800189a:	69e3      	ldr	r3, [r4, #28]
 800189c:	4093      	lsls	r3, r2
 800189e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80018a2:	4313      	orrs	r3, r2
 80018a4:	606b      	str	r3, [r5, #4]
 80018a6:	e696      	b.n	80015d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc9e 	bl	80011e8 <HAL_GetTick>
 80018ac:	eba0 0008 	sub.w	r0, r0, r8
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d9d8      	bls.n	8001866 <HAL_RCC_OscConfig+0x356>
 80018b4:	e6e8      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 80018b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ca:	f7ff fc8d 	bl	80011e8 <HAL_GetTick>
 80018ce:	f44f 7600 	mov.w	r6, #512	; 0x200
 80018d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80018d4:	2701      	movs	r7, #1
 80018d6:	fa96 f3a6 	rbit	r3, r6
 80018da:	682a      	ldr	r2, [r5, #0]
 80018dc:	fa96 f3a6 	rbit	r3, r6
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa07 f303 	lsl.w	r3, r7, r3
 80018ec:	4213      	tst	r3, r2
 80018ee:	f43f ae72 	beq.w	80015d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f2:	f7ff fc79 	bl	80011e8 <HAL_GetTick>
 80018f6:	eba0 0008 	sub.w	r0, r0, r8
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9eb      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3c6>
 80018fe:	e6c3      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	6962      	ldr	r2, [r4, #20]
 8001902:	2501      	movs	r5, #1
 8001904:	49a9      	ldr	r1, [pc, #676]	; (8001bac <HAL_RCC_OscConfig+0x69c>)
 8001906:	b302      	cbz	r2, 800194a <HAL_RCC_OscConfig+0x43a>
 8001908:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	440b      	add	r3, r1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001916:	f7ff fc67 	bl	80011e8 <HAL_GetTick>
 800191a:	2602      	movs	r6, #2
 800191c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4fa4      	ldr	r7, [pc, #656]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001920:	fa96 f3a6 	rbit	r3, r6
 8001924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001926:	fa96 f3a6 	rbit	r3, r6
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa05 f303 	lsl.w	r3, r5, r3
 8001936:	4213      	tst	r3, r2
 8001938:	f47f ae51 	bne.w	80015de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff fc54 	bl	80011e8 <HAL_GetTick>
 8001940:	eba0 0008 	sub.w	r0, r0, r8
 8001944:	2802      	cmp	r0, #2
 8001946:	d9eb      	bls.n	8001920 <HAL_RCC_OscConfig+0x410>
 8001948:	e69e      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 800194a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	440b      	add	r3, r1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001958:	f7ff fc46 	bl	80011e8 <HAL_GetTick>
 800195c:	2602      	movs	r6, #2
 800195e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4f93      	ldr	r7, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001962:	fa96 f3a6 	rbit	r3, r6
 8001966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001968:	fa96 f3a6 	rbit	r3, r6
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa05 f303 	lsl.w	r3, r5, r3
 8001978:	4213      	tst	r3, r2
 800197a:	f43f ae30 	beq.w	80015de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fc33 	bl	80011e8 <HAL_GetTick>
 8001982:	eba0 0008 	sub.w	r0, r0, r8
 8001986:	2802      	cmp	r0, #2
 8001988:	d9eb      	bls.n	8001962 <HAL_RCC_OscConfig+0x452>
 800198a:	e67d      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	00d1      	lsls	r1, r2, #3
 8001992:	d434      	bmi.n	80019fe <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001994:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4d82      	ldr	r5, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x6a4>)
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	05da      	lsls	r2, r3, #23
 80019ae:	d528      	bpl.n	8001a02 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	68a3      	ldr	r3, [r4, #8]
 80019b2:	4d7f      	ldr	r5, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d134      	bne.n	8001a22 <HAL_RCC_OscConfig+0x512>
 80019b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc12 	bl	80011e8 <HAL_GetTick>
 80019c4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80019c8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	2701      	movs	r7, #1
 80019cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001bb0 <HAL_RCC_OscConfig+0x6a0>
 80019d0:	fa95 f3a5 	rbit	r3, r5
 80019d4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80019d8:	fa95 f3a5 	rbit	r3, r5
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa07 f303 	lsl.w	r3, r7, r3
 80019e8:	4213      	tst	r3, r2
 80019ea:	d04e      	beq.n	8001a8a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80019ec:	2e00      	cmp	r6, #0
 80019ee:	f43f adfa 	beq.w	80015e6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 80019f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6253      	str	r3, [r2, #36]	; 0x24
 80019fc:	e5f3      	b.n	80015e6 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2600      	movs	r6, #0
 8001a00:	e7d2      	b.n	80019a8 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fbed 	bl	80011e8 <HAL_GetTick>
 8001a0e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	d4cc      	bmi.n	80019b0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7ff fbe7 	bl	80011e8 <HAL_GetTick>
 8001a1a:	1bc0      	subs	r0, r0, r7
 8001a1c:	2864      	cmp	r0, #100	; 0x64
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0x500>
 8001a20:	e632      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a22:	bb23      	cbnz	r3, 8001a6e <HAL_RCC_OscConfig+0x55e>
 8001a24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a26:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2e:	636b      	str	r3, [r5, #52]	; 0x34
 8001a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a32:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fbd4 	bl	80011e8 <HAL_GetTick>
 8001a40:	4681      	mov	r9, r0
 8001a42:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a48:	fa97 f3a7 	rbit	r3, r7
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	f003 031f 	and.w	r3, r3, #31
 8001a54:	fa08 f303 	lsl.w	r3, r8, r3
 8001a58:	4213      	tst	r3, r2
 8001a5a:	d0c7      	beq.n	80019ec <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fbc4 	bl	80011e8 <HAL_GetTick>
 8001a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a64:	eba0 0009 	sub.w	r0, r0, r9
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	d9ea      	bls.n	8001a42 <HAL_RCC_OscConfig+0x532>
 8001a6c:	e60c      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a72:	d103      	bne.n	8001a7c <HAL_RCC_OscConfig+0x56c>
 8001a74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a78:	636b      	str	r3, [r5, #52]	; 0x34
 8001a7a:	e79d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4a8>
 8001a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a80:	636b      	str	r3, [r5, #52]	; 0x34
 8001a82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a88:	e799      	b.n	80019be <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fbad 	bl	80011e8 <HAL_GetTick>
 8001a8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a92:	eba0 0009 	sub.w	r0, r0, r9
 8001a96:	4298      	cmp	r0, r3
 8001a98:	d99a      	bls.n	80019d0 <HAL_RCC_OscConfig+0x4c0>
 8001a9a:	e5f5      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4d44      	ldr	r5, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001a9e:	68ab      	ldr	r3, [r5, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	f43f adc8 	beq.w	800163a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	2a02      	cmp	r2, #2
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	d156      	bne.n	8001b60 <HAL_RCC_OscConfig+0x650>
 8001ab2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	2200      	movs	r2, #0
 8001abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb8e 	bl	80011e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8001ace:	4680      	mov	r8, r0
 8001ad0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	2501      	movs	r5, #1
 8001ad6:	fa97 f3a7 	rbit	r3, r7
 8001ada:	6832      	ldr	r2, [r6, #0]
 8001adc:	fa97 f3a7 	rbit	r3, r7
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	fa05 f303 	lsl.w	r3, r5, r3
 8001aec:	4213      	tst	r3, r2
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	68b2      	ldr	r2, [r6, #8]
 8001af2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001af4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001af6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001afa:	430b      	orrs	r3, r1
 8001afc:	4313      	orrs	r3, r2
 8001afe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60b3      	str	r3, [r6, #8]
 8001b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b08:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b14:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb64 	bl	80011e8 <HAL_GetTick>
 8001b20:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b24:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b26:	2501      	movs	r5, #1
 8001b28:	4e21      	ldr	r6, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x6a0>)
 8001b2a:	fa94 f3a4 	rbit	r3, r4
 8001b2e:	6832      	ldr	r2, [r6, #0]
 8001b30:	fa94 f3a4 	rbit	r3, r4
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa05 f303 	lsl.w	r3, r5, r3
 8001b40:	4213      	tst	r3, r2
 8001b42:	f47f ad54 	bne.w	80015ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fb4f 	bl	80011e8 <HAL_GetTick>
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	2802      	cmp	r0, #2
 8001b4e:	d9ec      	bls.n	8001b2a <HAL_RCC_OscConfig+0x61a>
 8001b50:	e59a      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff fb49 	bl	80011e8 <HAL_GetTick>
 8001b56:	eba0 0008 	sub.w	r0, r0, r8
 8001b5a:	2802      	cmp	r0, #2
 8001b5c:	d9bb      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x5c6>
 8001b5e:	e593      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 8001b60:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b6e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb37 	bl	80011e8 <HAL_GetTick>
 8001b7a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001b7e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	2601      	movs	r6, #1
 8001b82:	fa94 f3a4 	rbit	r3, r4
 8001b86:	682a      	ldr	r2, [r5, #0]
 8001b88:	fa94 f3a4 	rbit	r3, r4
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa06 f303 	lsl.w	r3, r6, r3
 8001b98:	4213      	tst	r3, r2
 8001b9a:	f43f ad28 	beq.w	80015ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb23 	bl	80011e8 <HAL_GetTick>
 8001ba2:	1bc0      	subs	r0, r0, r7
 8001ba4:	2802      	cmp	r0, #2
 8001ba6:	d9ec      	bls.n	8001b82 <HAL_RCC_OscConfig+0x672>
 8001ba8:	e56e      	b.n	8001688 <HAL_RCC_OscConfig+0x178>
 8001baa:	bf00      	nop
 8001bac:	1091c1a0 	.word	0x1091c1a0
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001bb8:	491e      	ldr	r1, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001bba:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001bbc:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	2a08      	cmp	r2, #8
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bc6:	2a0c      	cmp	r2, #12
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1e>
 8001bca:	2a04      	cmp	r2, #4
 8001bcc:	d122      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001bce:	481a      	ldr	r0, [pc, #104]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001bd0:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001bd2:	481a      	ldr	r0, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x84>)
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bda:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001be6:	fa20 f202 	lsr.w	r2, r0, r2
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x88>)
 8001bec:	5c84      	ldrb	r4, [r0, r2]
 8001bee:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001bf2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001bf6:	fab0 f280 	clz	r2, r0
 8001bfa:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bfe:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001c00:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c02:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001c04:	bf4c      	ite	mi
 8001c06:	4b0d      	ldrmi	r3, [pc, #52]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001c08:	4b0b      	ldrpl	r3, [pc, #44]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001c0a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8001c0c:	4363      	muls	r3, r4
 8001c0e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001c12:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001c14:	6848      	ldr	r0, [r1, #4]
 8001c16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001c26:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001c28:	1c43      	adds	r3, r0, #1
 8001c2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c2e:	4098      	lsls	r0, r3
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	080055e2 	.word	0x080055e2

08001c44 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c4a:	681a      	ldr	r2, [r3, #0]
{
 8001c4c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c4e:	f002 0201 	and.w	r2, r2, #1
 8001c52:	428a      	cmp	r2, r1
{
 8001c54:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c56:	d330      	bcc.n	8001cba <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	6832      	ldr	r2, [r6, #0]
 8001c5a:	0794      	lsls	r4, r2, #30
 8001c5c:	d440      	bmi.n	8001ce0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	07d0      	lsls	r0, r2, #31
 8001c60:	d446      	bmi.n	8001cf0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1ac>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f002 0201 	and.w	r2, r2, #1
 8001c6a:	4295      	cmp	r5, r2
 8001c6c:	f0c0 80ae 	bcc.w	8001dcc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	6832      	ldr	r2, [r6, #0]
 8001c72:	0751      	lsls	r1, r2, #29
 8001c74:	f100 80b3 	bmi.w	8001dde <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	0713      	lsls	r3, r2, #28
 8001c7a:	d507      	bpl.n	8001c8c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7c:	4a5d      	ldr	r2, [pc, #372]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c7e:	6931      	ldr	r1, [r6, #16]
 8001c80:	6893      	ldr	r3, [r2, #8]
 8001c82:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c8c:	f7ff ff94 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001c90:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	40d3      	lsrs	r3, r2
 8001ca4:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fa72 	bl	8001198 <HAL_InitTick>
  return HAL_OK;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	2901      	cmp	r1, #1
 8001cbc:	bf02      	ittt	eq
 8001cbe:	681a      	ldreq	r2, [r3, #0]
 8001cc0:	f042 0204 	orreq.w	r2, r2, #4
 8001cc4:	601a      	streq	r2, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d0be      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4944      	ldr	r1, [pc, #272]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce2:	68b0      	ldr	r0, [r6, #8]
 8001ce4:	688b      	ldr	r3, [r1, #8]
 8001ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cea:	4303      	orrs	r3, r0
 8001cec:	608b      	str	r3, [r1, #8]
 8001cee:	e7b6      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	6872      	ldr	r2, [r6, #4]
 8001cf2:	4940      	ldr	r1, [pc, #256]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	2a02      	cmp	r2, #2
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xd4>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001d00:	6808      	ldr	r0, [r1, #0]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4203      	tst	r3, r0
 8001d16:	e013      	b.n	8001d40 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d18:	2a03      	cmp	r2, #3
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xde>
 8001d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d20:	e7ec      	b.n	8001cfc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d22:	2a01      	cmp	r2, #1
 8001d24:	d129      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x136>
 8001d26:	2302      	movs	r3, #2
 8001d28:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	6809      	ldr	r1, [r1, #0]
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001d40:	d0cb      	beq.n	8001cda <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d42:	4c2c      	ldr	r4, [pc, #176]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d48:	68a3      	ldr	r3, [r4, #8]
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001d52:	f7ff fa49 	bl	80011e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d58:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d110      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5e:	68a3      	ldr	r3, [r4, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f43f af7c 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6a:	f7ff fa3d 	bl	80011e8 <HAL_GetTick>
 8001d6e:	1bc0      	subs	r0, r0, r7
 8001d70:	4540      	cmp	r0, r8
 8001d72:	d9f4      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001d74:	2003      	movs	r0, #3
 8001d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7e:	e7bd      	b.n	8001cfc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	68a3      	ldr	r3, [r4, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	f43f af69 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff fa2a 	bl	80011e8 <HAL_GetTick>
 8001d94:	1bc0      	subs	r0, r0, r7
 8001d96:	4540      	cmp	r0, r8
 8001d98:	d9f4      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x140>
 8001d9a:	e7eb      	b.n	8001d74 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d110      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da0:	68a3      	ldr	r3, [r4, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	f43f af5b 	beq.w	8001c62 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff fa1c 	bl	80011e8 <HAL_GetTick>
 8001db0:	1bc0      	subs	r0, r0, r7
 8001db2:	4540      	cmp	r0, r8
 8001db4:	d9f4      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x15c>
 8001db6:	e7dd      	b.n	8001d74 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7ff fa16 	bl	80011e8 <HAL_GetTick>
 8001dbc:	1bc0      	subs	r0, r0, r7
 8001dbe:	4540      	cmp	r0, r8
 8001dc0:	d8d8      	bhi.n	8001d74 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	f013 0f0c 	tst.w	r3, #12
 8001dc8:	d1f6      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x174>
 8001dca:	e74a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	07da      	lsls	r2, r3, #31
 8001dd8:	f53f af7f 	bmi.w	8001cda <HAL_RCC_ClockConfig+0x96>
 8001ddc:	e748      	b.n	8001c70 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4905      	ldr	r1, [pc, #20]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001de0:	68f0      	ldr	r0, [r6, #12]
 8001de2:	688b      	ldr	r3, [r1, #8]
 8001de4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001de8:	4303      	orrs	r3, r0
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e744      	b.n	8001c78 <HAL_RCC_ClockConfig+0x34>
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	080055ca 	.word	0x080055ca
 8001dfc:	20000000 	.word	0x20000000

08001e00 <HAL_RCC_GetHCLKFreq>:
}
 8001e00:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	fa92 f2a2 	rbit	r2, r2
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e20:	40d3      	lsrs	r3, r2
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e28:	6810      	ldr	r0, [r2, #0]
}    
 8001e2a:	40d8      	lsrs	r0, r3
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	080055da 	.word	0x080055da
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e50:	40d3      	lsrs	r3, r2
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001e58:	6810      	ldr	r0, [r2, #0]
} 
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	080055da 	.word	0x080055da
 8001e68:	20000000 	.word	0x20000000

08001e6c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8001e70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e72:	d00e      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <TIM_Base_SetConfig+0x7c>)
 8001e76:	4290      	cmp	r0, r2
 8001e78:	d00b      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e8a:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d116      	bne.n	8001ec0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea0:	d015      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ea2:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <TIM_Base_SetConfig+0x7c>)
 8001ea4:	4290      	cmp	r0, r2
 8001ea6:	d012      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eac:	4290      	cmp	r0, r2
 8001eae:	d00e      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb4:	4290      	cmp	r0, r2
 8001eb6:	d00a      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001eb8:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8001ebc:	4290      	cmp	r0, r2
 8001ebe:	d006      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <TIM_Base_SetConfig+0x80>)
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d003      	beq.n	8001ece <TIM_Base_SetConfig+0x62>
 8001ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eca:	4290      	cmp	r0, r2
 8001ecc:	d103      	bne.n	8001ed6 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001ed6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed8:	688b      	ldr	r3, [r1, #8]
 8001eda:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	6143      	str	r3, [r0, #20]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40010c00 	.word	0x40010c00

08001ef0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef0:	6a03      	ldr	r3, [r0, #32]
{
 8001ef2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efe:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f0a:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f10:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f12:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8001f14:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8001f16:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f18:	6203      	str	r3, [r0, #32]
 8001f1a:	bd30      	pop	{r4, r5, pc}

08001f1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1c:	6a03      	ldr	r3, [r0, #32]
{
 8001f1e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f20:	f023 0310 	bic.w	r3, r3, #16
 8001f24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f2a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001f38:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f3e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f40:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001f42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8001f46:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f48:	6203      	str	r3, [r0, #32]
 8001f4a:	bd30      	pop	{r4, r5, pc}

08001f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f4c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001f4e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f50:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001f52:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001f54:	ea23 0304 	bic.w	r3, r3, r4
 8001f58:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001f5a:	6a03      	ldr	r3, [r0, #32]
 8001f5c:	408a      	lsls	r2, r1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	6202      	str	r2, [r0, #32]
 8001f62:	bd10      	pop	{r4, pc}

08001f64 <HAL_TIM_Base_Init>:
{
 8001f64:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001f66:	4604      	mov	r4, r0
 8001f68:	b1a0      	cbz	r0, 8001f94 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f72:	b91b      	cbnz	r3, 8001f7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f74:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001f78:	f001 fb9e 	bl	80036b8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001f80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f84:	1d21      	adds	r1, r4, #4
 8001f86:	f7ff ff71 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001f8a:	2301      	movs	r3, #1
  return HAL_OK;
 8001f8c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001f8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001f92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f94:	2001      	movs	r0, #1
}
 8001f96:	bd10      	pop	{r4, pc}

08001f98 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001f98:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001f9a:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001f9c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_TIM_ENABLE(htim);
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
 8001fae:	2000      	movs	r0, #0
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fb2:	6803      	ldr	r3, [r0, #0]
}
 8001fb4:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_PWM_MspInit>:
 8001fc8:	4770      	bx	lr

08001fca <HAL_TIM_PWM_Init>:
{
 8001fca:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fcc:	4604      	mov	r4, r0
 8001fce:	b1a0      	cbz	r0, 8001ffa <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fd0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001fd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fd8:	b91b      	cbnz	r3, 8001fe2 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fda:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_PWM_MspInit(htim);
 8001fde:	f7ff fff3 	bl	8001fc8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fe2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001fe6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fea:	1d21      	adds	r1, r4, #4
 8001fec:	f7ff ff3e 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ff0:	2301      	movs	r3, #1
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001ff4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001ff8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
}
 8001ffc:	bd10      	pop	{r4, pc}

08001ffe <HAL_TIM_PWM_Stop>:
{
 8001ffe:	b510      	push	{r4, lr}
 8002000:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002002:	2200      	movs	r2, #0
 8002004:	6800      	ldr	r0, [r0, #0]
 8002006:	f7ff ffa1 	bl	8001f4c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800200a:	f241 1211 	movw	r2, #4369	; 0x1111
 800200e:	6823      	ldr	r3, [r4, #0]
}
 8002010:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE(htim);
 8002012:	6a19      	ldr	r1, [r3, #32]
 8002014:	4211      	tst	r1, r2
 8002016:	bf02      	ittt	eq
 8002018:	681a      	ldreq	r2, [r3, #0]
 800201a:	f022 0201 	biceq.w	r2, r2, #1
 800201e:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002020:	2301      	movs	r3, #1
 8002022:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002026:	bd10      	pop	{r4, pc}

08002028 <HAL_TIM_IC_Start>:
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800202c:	2201      	movs	r2, #1
 800202e:	6800      	ldr	r0, [r0, #0]
 8002030:	f7ff ff8c 	bl	8001f4c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002034:	6822      	ldr	r2, [r4, #0]
}
 8002036:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bd10      	pop	{r4, pc}

08002042 <HAL_TIM_PWM_Start>:
 8002042:	f7ff bff1 	b.w	8002028 <HAL_TIM_IC_Start>

08002046 <HAL_TIM_Encoder_Init>:
{
 8002046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002048:	460c      	mov	r4, r1
  if(htim == NULL)
 800204a:	4605      	mov	r5, r0
 800204c:	2800      	cmp	r0, #0
 800204e:	d041      	beq.n	80020d4 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002050:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002054:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002058:	b91b      	cbnz	r3, 8002062 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800205a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Encoder_MspInit(htim);
 800205e:	f001 faef 	bl	8003640 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002062:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 8002064:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002066:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 800206a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800206e:	6883      	ldr	r3, [r0, #8]
 8002070:	f023 0307 	bic.w	r3, r3, #7
 8002074:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002076:	f7ff fef9 	bl	8001e6c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800207a:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800207c:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800207e:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002080:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002082:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8002084:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002086:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002088:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800208c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 8002090:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002094:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002096:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800209a:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 800209c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020a4:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 80020a6:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020ac:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 80020b0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80020b4:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80020b6:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020b8:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80020bc:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80020be:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80020c0:	6183      	str	r3, [r0, #24]
  htim->State= HAL_TIM_STATE_READY;
 80020c2:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 80020c4:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 80020c8:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 80020ca:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80020cc:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  return HAL_OK;
 80020d0:	2000      	movs	r0, #0
 80020d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
}
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020d8 <HAL_TIM_Encoder_Start>:
{
 80020d8:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 80020da:	b189      	cbz	r1, 8002100 <HAL_TIM_Encoder_Start+0x28>
 80020dc:	2904      	cmp	r1, #4
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	f022 0210 	bic.w	r2, r2, #16
 80020f6:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	f042 0210 	orr.w	r2, r2, #16
 80020fe:	e006      	b.n	800210e <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002110:	681a      	ldr	r2, [r3, #0]
}
 8002112:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800211c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002120:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002122:	2b01      	cmp	r3, #1
{
 8002124:	4605      	mov	r5, r0
 8002126:	460c      	mov	r4, r1
 8002128:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800212c:	d025      	beq.n	800217a <HAL_TIM_PWM_ConfigChannel+0x5e>
 800212e:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
  __HAL_LOCK(htim);
 8002134:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  switch (Channel)
 8002138:	2a0c      	cmp	r2, #12
 800213a:	d818      	bhi.n	800216e <HAL_TIM_PWM_ConfigChannel+0x52>
 800213c:	e8df f002 	tbb	[pc, r2]
 8002140:	17171707 	.word	0x17171707
 8002144:	1717171e 	.word	0x1717171e
 8002148:	1717172f 	.word	0x1717172f
 800214c:	52          	.byte	0x52
 800214d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800214e:	6828      	ldr	r0, [r5, #0]
 8002150:	f7ff fece 	bl	8001ef0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002154:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002156:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	f022 0204 	bic.w	r2, r2, #4
 8002166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800216c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800216e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002170:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002172:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_UNLOCK(htim);
 8002176:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 800217a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800217c:	6828      	ldr	r0, [r5, #0]
 800217e:	f7ff fecd 	bl	8001f1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002182:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002184:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800218c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002194:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800219c:	e7e6      	b.n	800216c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800219e:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 80021a0:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80021aa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80021ac:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80021ae:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80021b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021b4:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021b8:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8);
 80021ba:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80021bc:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80021be:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80021c0:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8);
 80021c2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 80021c6:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80021c8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ca:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021cc:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021ce:	f042 0208 	orr.w	r2, r2, #8
 80021d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80021e0:	61da      	str	r2, [r3, #28]
    break;
 80021e2:	e7c4      	b.n	800216e <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021e4:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= (OC_Config->OCMode << 8);
 80021e6:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ee:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80021f0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80021f2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80021f4:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80021f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021fa:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 80021fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8002202:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002204:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002206:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002208:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12);
 800220a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800220e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002210:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002212:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002214:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002222:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800222a:	e7d9      	b.n	80021e0 <HAL_TIM_PWM_ConfigChannel+0xc4>

0800222c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800222c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8002230:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002232:	2b01      	cmp	r3, #1
 8002234:	f04f 0302 	mov.w	r3, #2
 8002238:	d01c      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0x48>
 800223a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  tmpsmcr = htim->Instance->SMCR;
 8002240:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002242:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  tmpsmcr = htim->Instance->SMCR;
 8002246:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002248:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800224c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002250:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002252:	680a      	ldr	r2, [r1, #0]
 8002254:	2a40      	cmp	r2, #64	; 0x40
 8002256:	d079      	beq.n	800234c <HAL_TIM_ConfigClockSource+0x120>
 8002258:	d819      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x62>
 800225a:	2a10      	cmp	r2, #16
 800225c:	f000 8093 	beq.w	8002386 <HAL_TIM_ConfigClockSource+0x15a>
 8002260:	d80a      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x4c>
 8002262:	2a00      	cmp	r2, #0
 8002264:	f000 8089 	beq.w	800237a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002268:	2301      	movs	r3, #1
 800226a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_UNLOCK(htim);
 800226e:	2300      	movs	r3, #0
 8002270:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8002274:	4618      	mov	r0, r3
}
 8002276:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002278:	2a20      	cmp	r2, #32
 800227a:	f000 808a 	beq.w	8002392 <HAL_TIM_ConfigClockSource+0x166>
 800227e:	2a30      	cmp	r2, #48	; 0x30
 8002280:	d1f2      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8002282:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002284:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002288:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800228c:	e036      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800228e:	2a70      	cmp	r2, #112	; 0x70
 8002290:	d036      	beq.n	8002300 <HAL_TIM_ConfigClockSource+0xd4>
 8002292:	d81b      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0xa0>
 8002294:	2a50      	cmp	r2, #80	; 0x50
 8002296:	d042      	beq.n	800231e <HAL_TIM_ConfigClockSource+0xf2>
 8002298:	2a60      	cmp	r2, #96	; 0x60
 800229a:	d1e5      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800229c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800229e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80022aa:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ac:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80022b4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 80022b8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80022bc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80022be:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80022c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022c6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80022ca:	e017      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80022cc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80022d0:	d011      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0xca>
 80022d2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80022d6:	d1c7      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80022d8:	688a      	ldr	r2, [r1, #8]
 80022da:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80022dc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80022de:	68c9      	ldr	r1, [r1, #12]
 80022e0:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80022e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80022e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022ea:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80022ec:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f4:	e002      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	e7b3      	b.n	8002268 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002300:	688a      	ldr	r2, [r1, #8]
 8002302:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002304:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002306:	68c9      	ldr	r1, [r1, #12]
 8002308:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800230a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800230e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002312:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002314:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002316:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002318:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800231c:	e7ee      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	684c      	ldr	r4, [r1, #4]
 8002320:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002322:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002324:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002326:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232a:	f025 0501 	bic.w	r5, r5, #1
 800232e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002330:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002332:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002334:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002338:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800233c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800233e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002340:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002342:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002346:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800234a:	e7d7      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800234c:	684c      	ldr	r4, [r1, #4]
 800234e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002350:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002352:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002354:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002358:	f025 0501 	bic.w	r5, r5, #1
 800235c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800235e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002360:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002362:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002366:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800236a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800236e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002370:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002374:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002378:	e7c0      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800237a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800237c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002380:	f042 0207 	orr.w	r2, r2, #7
 8002384:	e7ba      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002386:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002388:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800238c:	f042 0217 	orr.w	r2, r2, #23
 8002390:	e7b4      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002392:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002394:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002398:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800239c:	e7ae      	b.n	80022fc <HAL_TIM_ConfigClockSource+0xd0>

0800239e <HAL_TIM_OC_DelayElapsedCallback>:
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_IC_CaptureCallback>:
 80023a0:	4770      	bx	lr

080023a2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIM_TriggerCallback>:
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a6:	6803      	ldr	r3, [r0, #0]
{
 80023a8:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023aa:	691a      	ldr	r2, [r3, #16]
{
 80023ac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023ae:	0791      	lsls	r1, r2, #30
 80023b0:	d50e      	bpl.n	80023d0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	0792      	lsls	r2, r2, #30
 80023b6:	d50b      	bpl.n	80023d0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023b8:	f06f 0202 	mvn.w	r2, #2
 80023bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023be:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80023c0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c2:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80023c4:	0799      	lsls	r1, r3, #30
 80023c6:	d05c      	beq.n	8002482 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 80023c8:	f7ff ffea 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023cc:	2300      	movs	r3, #0
 80023ce:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	0752      	lsls	r2, r2, #29
 80023d6:	d510      	bpl.n	80023fa <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	0750      	lsls	r0, r2, #29
 80023dc:	d50d      	bpl.n	80023fa <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023de:	f06f 0204 	mvn.w	r2, #4
 80023e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80023e6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e8:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80023ea:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80023f0:	d04d      	beq.n	800248e <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	f7ff ffd5 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	2300      	movs	r3, #0
 80023f8:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	0711      	lsls	r1, r2, #28
 8002400:	d50f      	bpl.n	8002422 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	0712      	lsls	r2, r2, #28
 8002406:	d50c      	bpl.n	8002422 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002408:	f06f 0208 	mvn.w	r2, #8
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002410:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002412:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002414:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002418:	d03f      	beq.n	800249a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	f7ff ffc1 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	2300      	movs	r3, #0
 8002420:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	06d0      	lsls	r0, r2, #27
 8002428:	d510      	bpl.n	800244c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	06d1      	lsls	r1, r2, #27
 800242e:	d50d      	bpl.n	800244c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002430:	f06f 0210 	mvn.w	r2, #16
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002436:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002438:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243a:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800243c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002440:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002442:	d030      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8002444:	f7ff ffac 	bl	80023a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002448:	2300      	movs	r3, #0
 800244a:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	07d2      	lsls	r2, r2, #31
 8002452:	d508      	bpl.n	8002466 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	07d0      	lsls	r0, r2, #31
 8002458:	d505      	bpl.n	8002466 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800245a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800245e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002460:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002462:	f000 fe09 	bl	8003078 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	0651      	lsls	r1, r2, #25
 800246c:	d508      	bpl.n	8002480 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	0652      	lsls	r2, r2, #25
 8002472:	d505      	bpl.n	8002480 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002474:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002478:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800247a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800247c:	f7ff ff92 	bl	80023a4 <HAL_TIM_TriggerCallback>
 8002480:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	f7ff ff8c 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff ff8b 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
 800248c:	e79e      	b.n	80023cc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	f7ff ff86 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff ff85 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
 8002498:	e7ad      	b.n	80023f6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	f7ff ff80 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff ff7f 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
 80024a4:	e7bb      	b.n	800241e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	f7ff ff7a 	bl	800239e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff ff79 	bl	80023a2 <HAL_TIM_PWM_PulseFinishedCallback>
 80024b0:	e7ca      	b.n	8002448 <HAL_TIM_IRQHandler+0xa2>

080024b2 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80024b2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80024b6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f04f 0302 	mov.w	r3, #2
 80024be:	d018      	beq.n	80024f2 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024c4:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80024c6:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024c8:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024ca:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024d0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4322      	orrs	r2, r4
 80024d6:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024de:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 80024f2:	4618      	mov	r0, r3

  return HAL_OK;
}
 80024f4:	bd10      	pop	{r4, pc}
	...

080024f8 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024fc:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fe:	6805      	ldr	r5, [r0, #0]
 8002500:	68c2      	ldr	r2, [r0, #12]
 8002502:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002504:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800250a:	4313      	orrs	r3, r2
 800250c:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800250e:	6883      	ldr	r3, [r0, #8]
 8002510:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8002512:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002514:	4303      	orrs	r3, r0
 8002516:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800251a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800251e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8002520:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002524:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002526:	4313      	orrs	r3, r2
 8002528:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800252a:	696b      	ldr	r3, [r5, #20]
 800252c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002536:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800253a:	616b      	str	r3, [r5, #20]
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800253e:	d17f      	bne.n	8002640 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002540:	429d      	cmp	r5, r3
 8002542:	f04f 0419 	mov.w	r4, #25
 8002546:	d147      	bne.n	80025d8 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002548:	f7ff fc78 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800254c:	fb04 f300 	mul.w	r3, r4, r0
 8002550:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8002554:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002558:	007f      	lsls	r7, r7, #1
 800255a:	fbb3 f3f7 	udiv	r3, r3, r7
 800255e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002562:	011f      	lsls	r7, r3, #4
 8002564:	f7ff fc6a 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002568:	4360      	muls	r0, r4
 800256a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fbb0 f6f3 	udiv	r6, r0, r3
 8002574:	f7ff fc62 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002578:	4360      	muls	r0, r4
 800257a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fbb0 f3f3 	udiv	r3, r0, r3
 8002584:	fbb3 f3f8 	udiv	r3, r3, r8
 8002588:	fb08 6313 	mls	r3, r8, r3, r6
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	3332      	adds	r3, #50	; 0x32
 8002590:	fbb3 f3f8 	udiv	r3, r3, r8
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800259a:	f7ff fc4f 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800259e:	4360      	muls	r0, r4
 80025a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80025a4:	0052      	lsls	r2, r2, #1
 80025a6:	fbb0 faf2 	udiv	sl, r0, r2
 80025aa:	f7ff fc47 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025ae:	4360      	muls	r0, r4
 80025b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	fbb3 f3f8 	udiv	r3, r3, r8
 80025be:	fb08 a313 	mls	r3, r8, r3, sl
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3332      	adds	r3, #50	; 0x32
 80025c6:	fbb3 f3f8 	udiv	r3, r3, r8
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025d0:	4433      	add	r3, r6
 80025d2:	60ab      	str	r3, [r5, #8]
 80025d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025d8:	f7ff fc18 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80025dc:	fb04 f300 	mul.w	r3, r4, r0
 80025e0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80025e4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80025e8:	007f      	lsls	r7, r7, #1
 80025ea:	fbb3 f3f7 	udiv	r3, r3, r7
 80025ee:	fbb3 f3f8 	udiv	r3, r3, r8
 80025f2:	011f      	lsls	r7, r3, #4
 80025f4:	f7ff fc0a 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80025f8:	4360      	muls	r0, r4
 80025fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fbb0 f6f3 	udiv	r6, r0, r3
 8002604:	f7ff fc02 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002608:	4360      	muls	r0, r4
 800260a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fbb0 f3f3 	udiv	r3, r0, r3
 8002614:	fbb3 f3f8 	udiv	r3, r3, r8
 8002618:	fb08 6313 	mls	r3, r8, r3, r6
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	3332      	adds	r3, #50	; 0x32
 8002620:	fbb3 f3f8 	udiv	r3, r3, r8
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800262a:	f7ff fbef 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 800262e:	4360      	muls	r0, r4
 8002630:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002634:	0052      	lsls	r2, r2, #1
 8002636:	fbb0 faf2 	udiv	sl, r0, r2
 800263a:	f7ff fbe7 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 800263e:	e7b6      	b.n	80025ae <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8002640:	429d      	cmp	r5, r3
 8002642:	f04f 0419 	mov.w	r4, #25
 8002646:	d143      	bne.n	80026d0 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002648:	f7ff fbf8 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800264c:	fb04 f300 	mul.w	r3, r4, r0
 8002650:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002654:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002658:	00b6      	lsls	r6, r6, #2
 800265a:	fbb3 f3f6 	udiv	r3, r3, r6
 800265e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002662:	011e      	lsls	r6, r3, #4
 8002664:	f7ff fbea 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002668:	4360      	muls	r0, r4
 800266a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fbb0 f7f3 	udiv	r7, r0, r3
 8002674:	f7ff fbe2 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002678:	4360      	muls	r0, r4
 800267a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb0 f3f3 	udiv	r3, r0, r3
 8002684:	fbb3 f3f8 	udiv	r3, r3, r8
 8002688:	fb08 7313 	mls	r3, r8, r3, r7
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	3332      	adds	r3, #50	; 0x32
 8002690:	fbb3 f3f8 	udiv	r3, r3, r8
 8002694:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002698:	f7ff fbd0 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 800269c:	4360      	muls	r0, r4
 800269e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	fbb0 faf2 	udiv	sl, r0, r2
 80026a8:	f7ff fbc8 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026ac:	4360      	muls	r0, r4
 80026ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80026bc:	fb08 a313 	mls	r3, r8, r3, sl
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	3332      	adds	r3, #50	; 0x32
 80026c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	433b      	orrs	r3, r7
 80026ce:	e77f      	b.n	80025d0 <UART_SetConfig+0xd8>
 80026d0:	f7ff fb9c 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80026d4:	fb04 f300 	mul.w	r3, r4, r0
 80026d8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80026dc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80026e0:	00b6      	lsls	r6, r6, #2
 80026e2:	fbb3 f3f6 	udiv	r3, r3, r6
 80026e6:	fbb3 f3f8 	udiv	r3, r3, r8
 80026ea:	011e      	lsls	r6, r3, #4
 80026ec:	f7ff fb8e 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 80026f0:	4360      	muls	r0, r4
 80026f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fbb0 f7f3 	udiv	r7, r0, r3
 80026fc:	f7ff fb86 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002700:	4360      	muls	r0, r4
 8002702:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fbb0 f3f3 	udiv	r3, r0, r3
 800270c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002710:	fb08 7313 	mls	r3, r8, r3, r7
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	fbb3 f3f8 	udiv	r3, r3, r8
 800271c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002720:	f7ff fb74 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002724:	4360      	muls	r0, r4
 8002726:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	fbb0 faf2 	udiv	sl, r0, r2
 8002730:	f7ff fb6c 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8002734:	e7ba      	b.n	80026ac <UART_SetConfig+0x1b4>
 8002736:	bf00      	nop
 8002738:	40013800 	.word	0x40013800

0800273c <HAL_UART_Init>:
{
 800273c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800273e:	4604      	mov	r4, r0
 8002740:	b330      	cbz	r0, 8002790 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8002742:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002746:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800274a:	b91b      	cbnz	r3, 8002754 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800274c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002750:	f001 f812 	bl	8003778 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8002754:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8002756:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8002758:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800275c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800275e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002764:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002766:	f7ff fec7 	bl	80024f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800277c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002784:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8002786:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800278a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800278e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002790:	2001      	movs	r0, #1
}
 8002792:	bd10      	pop	{r4, pc}

08002794 <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8002794:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002798:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_UART_Receive_IT+0xe>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d128      	bne.n	80027f4 <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 80027a2:	b329      	cbz	r1, 80027f0 <HAL_UART_Receive_IT+0x5c>
 80027a4:	b322      	cbz	r2, 80027f0 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 80027a6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d022      	beq.n	80027f4 <HAL_UART_Receive_IT+0x60>
 80027ae:	2301      	movs	r3, #1
 80027b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 80027b8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027ba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80027bc:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80027c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80027c4:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80027c6:	bf0c      	ite	eq
 80027c8:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80027ca:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027cc:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 80027ce:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027d2:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 80027d4:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027da:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027dc:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 80027de:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	f042 0220 	orr.w	r2, r2, #32
 80027ec:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80027ee:	4770      	bx	lr
      return HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
 80027f2:	4770      	bx	lr
    return HAL_BUSY;
 80027f4:	2002      	movs	r0, #2
}
 80027f6:	4770      	bx	lr

080027f8 <HAL_UART_TxCpltCallback>:
 80027f8:	4770      	bx	lr

080027fa <HAL_UART_ErrorCallback>:
{
 80027fa:	4770      	bx	lr

080027fc <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80027fc:	6802      	ldr	r2, [r0, #0]
{
 80027fe:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002800:	6811      	ldr	r1, [r2, #0]
{
 8002802:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002804:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002806:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002808:	d505      	bpl.n	8002816 <HAL_UART_IRQHandler+0x1a>
 800280a:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800280c:	bf42      	ittt	mi
 800280e:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8002810:	f043 0301 	orrmi.w	r3, r3, #1
 8002814:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002816:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002818:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800281a:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800281c:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002820:	d504      	bpl.n	800282c <HAL_UART_IRQHandler+0x30>
 8002822:	b11b      	cbz	r3, 800282c <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002824:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002826:	f041 0104 	orr.w	r1, r1, #4
 800282a:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800282c:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800282e:	0749      	lsls	r1, r1, #29
 8002830:	d504      	bpl.n	800283c <HAL_UART_IRQHandler+0x40>
 8002832:	b11b      	cbz	r3, 800283c <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002834:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002836:	f041 0102 	orr.w	r1, r1, #2
 800283a:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800283c:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800283e:	0708      	lsls	r0, r1, #28
 8002840:	d504      	bpl.n	800284c <HAL_UART_IRQHandler+0x50>
 8002842:	b11b      	cbz	r3, 800284c <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 800284c:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800284e:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002850:	0689      	lsls	r1, r1, #26
 8002852:	d533      	bpl.n	80028bc <HAL_UART_IRQHandler+0xc0>
 8002854:	0698      	lsls	r0, r3, #26
 8002856:	d531      	bpl.n	80028bc <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 8002858:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800285c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002860:	2b22      	cmp	r3, #34	; 0x22
 8002862:	d12b      	bne.n	80028bc <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002864:	68a3      	ldr	r3, [r4, #8]
 8002866:	6921      	ldr	r1, [r4, #16]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800286e:	d176      	bne.n	800295e <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002870:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002872:	2900      	cmp	r1, #0
 8002874:	d16f      	bne.n	8002956 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 800287e:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8002880:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002882:	3b01      	subs	r3, #1
 8002884:	b29b      	uxth	r3, r3
 8002886:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002888:	b9c3      	cbnz	r3, 80028bc <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800288a:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 800288c:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	f022 0220 	bic.w	r2, r2, #32
 8002894:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002896:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800289a:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800289c:	bf17      	itett	ne
 800289e:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 80028a0:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028a2:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 80028a6:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028a8:	bf1f      	itttt	ne
 80028aa:	695a      	ldrne	r2, [r3, #20]
 80028ac:	f022 0201 	bicne.w	r2, r2, #1
 80028b0:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 80028b2:	2301      	movne	r3, #1
 80028b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 80028b8:	f000 f8a4 	bl	8002a04 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80028c0:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80028c2:	0609      	lsls	r1, r1, #24
 80028c4:	d522      	bpl.n	800290c <HAL_UART_IRQHandler+0x110>
 80028c6:	0610      	lsls	r0, r2, #24
 80028c8:	d520      	bpl.n	800290c <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 80028ca:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80028ce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80028d2:	2a12      	cmp	r2, #18
 80028d4:	d11a      	bne.n	800290c <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028d6:	68a2      	ldr	r2, [r4, #8]
 80028d8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80028dc:	6a22      	ldr	r2, [r4, #32]
 80028de:	d14c      	bne.n	800297a <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028e0:	8811      	ldrh	r1, [r2, #0]
 80028e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80028e6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80028e8:	6921      	ldr	r1, [r4, #16]
 80028ea:	2900      	cmp	r1, #0
 80028ec:	d143      	bne.n	8002976 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 80028ee:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 80028f0:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 80028f2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80028f4:	3a01      	subs	r2, #1
 80028f6:	b292      	uxth	r2, r2
 80028f8:	84e2      	strh	r2, [r4, #38]	; 0x26
 80028fa:	b93a      	cbnz	r2, 800290c <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002902:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800290c:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 800290e:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002910:	0649      	lsls	r1, r1, #25
 8002912:	d510      	bpl.n	8002936 <HAL_UART_IRQHandler+0x13a>
 8002914:	0652      	lsls	r2, r2, #25
 8002916:	d50e      	bpl.n	8002936 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002918:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800291a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800291c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002920:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002922:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002926:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002928:	bf0c      	ite	eq
 800292a:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 800292c:	2301      	movne	r3, #1
 800292e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002932:	f7ff ff61 	bl	80027f8 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002936:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002938:	b15b      	cbz	r3, 8002952 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 800293a:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 800293c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	9201      	str	r2, [sp, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8002948:	2301      	movs	r3, #1
 800294a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 800294e:	f7ff ff54 	bl	80027fa <HAL_UART_ErrorCallback>
}
 8002952:	b002      	add	sp, #8
 8002954:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f823 2b01 	strh.w	r2, [r3], #1
 800295c:	e78f      	b.n	800287e <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800295e:	b921      	cbnz	r1, 800296a <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e78a      	b.n	8002880 <HAL_UART_IRQHandler+0x84>
 800296a:	6852      	ldr	r2, [r2, #4]
 800296c:	1c59      	adds	r1, r3, #1
 800296e:	62a1      	str	r1, [r4, #40]	; 0x28
 8002970:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002974:	e7f7      	b.n	8002966 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 8002976:	3201      	adds	r2, #1
 8002978:	e7ba      	b.n	80028f0 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800297a:	1c51      	adds	r1, r2, #1
 800297c:	6221      	str	r1, [r4, #32]
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	e7b6      	b.n	80028f2 <HAL_UART_IRQHandler+0xf6>

08002984 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <SystemClock_Config+0x7c>)
{
 8002986:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002988:	6813      	ldr	r3, [r2, #0]
{
 800298a:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800298c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002994:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002996:	2302      	movs	r3, #2
 8002998:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800299a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800299c:	2300      	movs	r3, #0
 800299e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029a4:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80029a6:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80029a8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80029aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ae:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80029b2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80029b4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b6:	f7fe fdab 	bl	8001510 <HAL_RCC_OscConfig>
 80029ba:	b100      	cbz	r0, 80029be <SystemClock_Config+0x3a>
 80029bc:	e7fe      	b.n	80029bc <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029be:	220f      	movs	r2, #15
 80029c0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029c4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029c6:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029c8:	4621      	mov	r1, r4
 80029ca:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029cc:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029d0:	f7ff f938 	bl	8001c44 <HAL_RCC_ClockConfig>
 80029d4:	4604      	mov	r4, r0
 80029d6:	b100      	cbz	r0, 80029da <SystemClock_Config+0x56>
 80029d8:	e7fe      	b.n	80029d8 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80029da:	f7ff fa11 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 80029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80029e6:	f7fe fc57 	bl	8001298 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029ea:	2004      	movs	r0, #4
 80029ec:	f7fe fc6a 	bl	80012c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029f0:	4622      	mov	r2, r4
 80029f2:	4621      	mov	r1, r4
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7fe fc0e 	bl	8001218 <HAL_NVIC_SetPriority>
}
 80029fc:	b012      	add	sp, #72	; 0x48
 80029fe:	bd10      	pop	{r4, pc}
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_UART_RxCpltCallback>:
}
//Interrupt callback routine
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    uint8_t i;
    if (huart->Instance == USART1)  //current UART
 8002a04:	6802      	ldr	r2, [r0, #0]
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_UART_RxCpltCallback+0x4c>)
{
 8002a08:	b410      	push	{r4}
    if (huart->Instance == USART1)  //current UART
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11d      	bne.n	8002a4a <HAL_UART_RxCpltCallback+0x46>
        {
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_UART_RxCpltCallback+0x50>)
 8002a10:	7813      	ldrb	r3, [r2, #0]
 8002a12:	b143      	cbz	r3, 8002a26 <HAL_UART_RxCpltCallback+0x22>

        if (Rx_data[0]!=10) //if received data different from ascii 10 (newline)
 8002a14:	4910      	ldr	r1, [pc, #64]	; (8002a58 <HAL_UART_RxCpltCallback+0x54>)
 8002a16:	7809      	ldrb	r1, [r1, #0]
 8002a18:	290a      	cmp	r1, #10
 8002a1a:	d10c      	bne.n	8002a36 <HAL_UART_RxCpltCallback+0x32>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
            }
        else            //if received data = 13
            {
        	Transfer_cplt=Rx_indx;//transfer complete, data is ready to read
 8002a1c:	490f      	ldr	r1, [pc, #60]	; (8002a5c <HAL_UART_RxCpltCallback+0x58>)
 8002a1e:	600b      	str	r3, [r1, #0]
            Rx_indx=0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	7013      	strb	r3, [r2, #0]
 8002a24:	e00b      	b.n	8002a3e <HAL_UART_RxCpltCallback+0x3a>
 8002a26:	4619      	mov	r1, r3
        if (Rx_indx==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_Buffer before receiving new data
 8002a28:	461c      	mov	r4, r3
 8002a2a:	480d      	ldr	r0, [pc, #52]	; (8002a60 <HAL_UART_RxCpltCallback+0x5c>)
 8002a2c:	540c      	strb	r4, [r1, r0]
 8002a2e:	3101      	adds	r1, #1
 8002a30:	2964      	cmp	r1, #100	; 0x64
 8002a32:	d1fb      	bne.n	8002a2c <HAL_UART_RxCpltCallback+0x28>
 8002a34:	e7ee      	b.n	8002a14 <HAL_UART_RxCpltCallback+0x10>
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //add data to Rx_Buffer
 8002a36:	1c58      	adds	r0, r3, #1
 8002a38:	7010      	strb	r0, [r2, #0]
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_UART_RxCpltCallback+0x5c>)
 8002a3c:	54d1      	strb	r1, [r2, r3]
            }

        HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //activate UART receive interrupt every time
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4905      	ldr	r1, [pc, #20]	; (8002a58 <HAL_UART_RxCpltCallback+0x54>)
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <HAL_UART_RxCpltCallback+0x60>)
        }

}
 8002a44:	bc10      	pop	{r4}
        HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //activate UART receive interrupt every time
 8002a46:	f7ff bea5 	b.w	8002794 <HAL_UART_Receive_IT>
}
 8002a4a:	bc10      	pop	{r4}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40013800 	.word	0x40013800
 8002a54:	20000208 	.word	0x20000208
 8002a58:	2000025c 	.word	0x2000025c
 8002a5c:	20000204 	.word	0x20000204
 8002a60:	200003a0 	.word	0x200003a0
 8002a64:	200002ec 	.word	0x200002ec

08002a68 <setArc>:
  right.distance_traveled = 0.0;
  left.distance_traveled = 0.0;

  return;
}
void setArc(float R/*mm*/, float w/*degrees/s*/, float phi/*degrees*/){
 8002a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6c:	460c      	mov	r4, r1
  float scalingfactor = 60.0/360.0;
  right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 8002a6e:	494a      	ldr	r1, [pc, #296]	; (8002b98 <setArc+0x130>)
void setArc(float R/*mm*/, float w/*degrees/s*/, float phi/*degrees*/){
 8002a70:	4690      	mov	r8, r2
 8002a72:	4606      	mov	r6, r0
  right.setRPM = (w*(R+CENTERDIS))*scalingfactor*(1/WHEELRAD);
 8002a74:	f7fe f87c 	bl	8000b70 <__addsf3>
 8002a78:	4621      	mov	r1, r4
 8002a7a:	4682      	mov	sl, r0
 8002a7c:	f7fe f980 	bl	8000d80 <__aeabi_fmul>
 8002a80:	4946      	ldr	r1, [pc, #280]	; (8002b9c <setArc+0x134>)
 8002a82:	f7fe f97d 	bl	8000d80 <__aeabi_fmul>
 8002a86:	f7fd fce7 	bl	8000458 <__aeabi_f2d>
 8002a8a:	a33f      	add	r3, pc, #252	; (adr r3, 8002b88 <setArc+0x120>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fd36 	bl	8000500 <__aeabi_dmul>
 8002a94:	f7fe f816 	bl	8000ac4 <__aeabi_d2f>
 8002a98:	4d41      	ldr	r5, [pc, #260]	; (8002ba0 <setArc+0x138>)
 8002a9a:	4607      	mov	r7, r0
 8002a9c:	6028      	str	r0, [r5, #0]
  left.setRPM = (w*(R-CENTERDIS))*scalingfactor*(1/WHEELRAD);
 8002a9e:	493e      	ldr	r1, [pc, #248]	; (8002b98 <setArc+0x130>)
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f7fe f863 	bl	8000b6c <__aeabi_fsub>
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4681      	mov	r9, r0
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f968 	bl	8000d80 <__aeabi_fmul>
 8002ab0:	493a      	ldr	r1, [pc, #232]	; (8002b9c <setArc+0x134>)
 8002ab2:	f7fe f965 	bl	8000d80 <__aeabi_fmul>
 8002ab6:	f7fd fccf 	bl	8000458 <__aeabi_f2d>
 8002aba:	a333      	add	r3, pc, #204	; (adr r3, 8002b88 <setArc+0x120>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fd1e 	bl	8000500 <__aeabi_dmul>
 8002ac4:	f7fd fffe 	bl	8000ac4 <__aeabi_d2f>
 8002ac8:	4c36      	ldr	r4, [pc, #216]	; (8002ba4 <setArc+0x13c>)
 8002aca:	4606      	mov	r6, r0
 8002acc:	6020      	str	r0, [r4, #0]

  if (right.setRPM < 0){
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	f7fe faf3 	bl	80010bc <__aeabi_fcmplt>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d052      	beq.n	8002b80 <setArc+0x118>
    right.setRPM = -1*right.setRPM;
    right.dir = true;
 8002ada:	2301      	movs	r3, #1
    right.setRPM = -1*right.setRPM;
 8002adc:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8002ae0:	602f      	str	r7, [r5, #0]
    right.dir = true;
 8002ae2:	712b      	strb	r3, [r5, #4]
  else
  {
    right.dir = false;
  }

  if (left.setRPM < 0){
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	f7fe fae8 	bl	80010bc <__aeabi_fcmplt>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d049      	beq.n	8002b84 <setArc+0x11c>
    left.setRPM = -1*left.setRPM;
    left.dir = true;
 8002af0:	2301      	movs	r3, #1
    left.setRPM = -1*left.setRPM;
 8002af2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8002af6:	6026      	str	r6, [r4, #0]
    left.dir = true;
 8002af8:	7123      	strb	r3, [r4, #4]
  }
  else
  {
    left.dir = false;
  }
  right.setDis = abs((R+CENTERDIS)*phi*M_PI/180);
 8002afa:	4641      	mov	r1, r8
 8002afc:	4650      	mov	r0, sl
 8002afe:	f7fe f93f 	bl	8000d80 <__aeabi_fmul>
 8002b02:	f7fd fca9 	bl	8000458 <__aeabi_f2d>
 8002b06:	a322      	add	r3, pc, #136	; (adr r3, 8002b90 <setArc+0x128>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fcf8 	bl	8000500 <__aeabi_dmul>
 8002b10:	2200      	movs	r2, #0
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <setArc+0x140>)
 8002b14:	f7fd fe1e 	bl	8000754 <__aeabi_ddiv>
 8002b18:	f7fd ff8c 	bl	8000a34 <__aeabi_d2iz>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	bfb8      	it	lt
 8002b20:	4240      	neglt	r0, r0
 8002b22:	f7fe f8d9 	bl	8000cd8 <__aeabi_i2f>
  left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 8002b26:	4641      	mov	r1, r8
  right.setDis = abs((R+CENTERDIS)*phi*M_PI/180);
 8002b28:	6128      	str	r0, [r5, #16]
  left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 8002b2a:	4648      	mov	r0, r9
 8002b2c:	f7fe f928 	bl	8000d80 <__aeabi_fmul>
 8002b30:	f7fd fc92 	bl	8000458 <__aeabi_f2d>
 8002b34:	a316      	add	r3, pc, #88	; (adr r3, 8002b90 <setArc+0x128>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	f7fd fce1 	bl	8000500 <__aeabi_dmul>
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <setArc+0x140>)
 8002b42:	f7fd fe07 	bl	8000754 <__aeabi_ddiv>
 8002b46:	f7fd ff75 	bl	8000a34 <__aeabi_d2iz>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	bfb8      	it	lt
 8002b4e:	4240      	neglt	r0, r0
 8002b50:	f7fe f8c2 	bl	8000cd8 <__aeabi_i2f>
  if (phi < 0){
 8002b54:	2100      	movs	r1, #0
  left.setDis = abs((R-CENTERDIS)*phi*M_PI/180);
 8002b56:	6120      	str	r0, [r4, #16]
  if (phi < 0){
 8002b58:	4640      	mov	r0, r8
 8002b5a:	f7fe faaf 	bl	80010bc <__aeabi_fcmplt>
 8002b5e:	b150      	cbz	r0, 8002b76 <setArc+0x10e>
	  left.setRPM = -1*left.setRPM;
	  left.dir = true;
 8002b60:	2201      	movs	r2, #1
	  left.setRPM = -1*left.setRPM;
 8002b62:	6823      	ldr	r3, [r4, #0]
	  left.dir = true;
 8002b64:	7122      	strb	r2, [r4, #4]
	  left.setRPM = -1*left.setRPM;
 8002b66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	6023      	str	r3, [r4, #0]
	  right.setRPM = -1*right.setRPM;
 8002b6c:	682b      	ldr	r3, [r5, #0]
	  right.dir = true;
 8002b6e:	712a      	strb	r2, [r5, #4]
	  right.setRPM = -1*right.setRPM;
 8002b70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	602b      	str	r3, [r5, #0]
  }
  //Re-initialize targeting to a rotation/distance
  right.distance_traveled = 0.0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60ab      	str	r3, [r5, #8]
  left.distance_traveled = 0.0;
 8002b7a:	60a3      	str	r3, [r4, #8]
 8002b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    right.dir = false;
 8002b80:	7128      	strb	r0, [r5, #4]
 8002b82:	e7af      	b.n	8002ae4 <setArc+0x7c>
    left.dir = false;
 8002b84:	7120      	strb	r0, [r4, #4]
 8002b86:	e7b8      	b.n	8002afa <setArc+0x92>
 8002b88:	16c16c17 	.word	0x16c16c17
 8002b8c:	3f86c16c 	.word	0x3f86c16c
 8002b90:	54442d18 	.word	0x54442d18
 8002b94:	400921fb 	.word	0x400921fb
 8002b98:	43af0000 	.word	0x43af0000
 8002b9c:	3e2aaaab 	.word	0x3e2aaaab
 8002ba0:	20000244 	.word	0x20000244
 8002ba4:	200002d4 	.word	0x200002d4
 8002ba8:	40668000 	.word	0x40668000

08002bac <main>:
{
 8002bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb0:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 8002bb2:	f7fe fb05 	bl	80011c0 <HAL_Init>
  SystemClock_Config();
 8002bb6:	f7ff fee5 	bl	8002984 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <main+0x268>)
  HAL_GPIO_WritePin(GPIOC, IDD_CNT_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002bbc:	f242 010f 	movw	r1, #8207	; 0x200f
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc0:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, IDD_CNT_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002bc2:	4895      	ldr	r0, [pc, #596]	; (8002e18 <main+0x26c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc4:	f042 0204 	orr.w	r2, r2, #4
 8002bc8:	61da      	str	r2, [r3, #28]
 8002bca:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	f002 0204 	and.w	r2, r2, #4
 8002bd2:	9208      	str	r2, [sp, #32]
 8002bd4:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	61da      	str	r2, [r3, #28]
 8002be2:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	f002 0201 	and.w	r2, r2, #1
 8002bea:	9209      	str	r2, [sp, #36]	; 0x24
 8002bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002bf0:	250b      	movs	r5, #11
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	f042 0202 	orr.w	r2, r2, #2
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, IDD_CNT_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002bfa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	930a      	str	r3, [sp, #40]	; 0x28
 8002c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, IDD_CNT_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002c04:	f7fe fc3e 	bl	8001484 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002c08:	f242 030f 	movw	r3, #8207	; 0x200f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0c:	a90f      	add	r1, sp, #60	; 0x3c
 8002c0e:	4882      	ldr	r0, [pc, #520]	; (8002e18 <main+0x26c>)
  GPIO_InitStruct.Pin = IDD_CNT_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002c10:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1a:	f7fe fb65 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <main+0x270>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c20:	a90f      	add	r1, sp, #60	; 0x3c
 8002c22:	487f      	ldr	r0, [pc, #508]	; (8002e20 <main+0x274>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c24:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = B1_Pin;
 8002c26:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c2c:	f7fe fb5c 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|COM0_Pin|COM1_Pin 
 8002c30:	f248 730c 	movw	r3, #34572	; 0x870c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c34:	a90f      	add	r1, sp, #60	; 0x3c
 8002c36:	487a      	ldr	r0, [pc, #488]	; (8002e20 <main+0x274>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c38:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|COM0_Pin|COM1_Pin 
 8002c3a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002c3e:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	f7fe fb50 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8002c48:	2310      	movs	r3, #16
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8002c4a:	a90f      	add	r1, sp, #60	; 0x3c
 8002c4c:	4874      	ldr	r0, [pc, #464]	; (8002e20 <main+0x274>)
  GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 8002c4e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c50:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 8002c54:	f7fe fb48 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 8002c58:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5a:	a90f      	add	r1, sp, #60	; 0x3c
 8002c5c:	486e      	ldr	r0, [pc, #440]	; (8002e18 <main+0x26c>)
  GPIO_InitStruct.Pin = GRP9_Sampling_Pin|GRP9_Ground_Pin;
 8002c5e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c60:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	f7fe fb40 	bl	80012e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	a90f      	add	r1, sp, #60	; 0x3c
 8002c6a:	486e      	ldr	r0, [pc, #440]	; (8002e24 <main+0x278>)
  GPIO_InitStruct.Pin = GRP3_Sampling_Pin|GRP3_Ground_Pin;
 8002c6c:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c6e:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f7fe fb39 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8002c76:	f64f 4338 	movw	r3, #64568	; 0xfc38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	a90f      	add	r1, sp, #60	; 0x3c
 8002c7c:	4869      	ldr	r0, [pc, #420]	; (8002e24 <main+0x278>)
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin 
 8002c7e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002c82:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f7fe fb2e 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
 8002c8c:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c90:	a90f      	add	r1, sp, #60	; 0x3c
 8002c92:	4861      	ldr	r0, [pc, #388]	; (8002e18 <main+0x26c>)
  GPIO_InitStruct.Pin = SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin 
 8002c94:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002c98:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	9412      	str	r4, [sp, #72]	; 0x48
  htim2.Init.Period = 65535;
 8002c9e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca2:	f7fe fb21 	bl	80012e8 <HAL_GPIO_Init>
  htim2.Instance = TIM2;
 8002ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002caa:	4d5f      	ldr	r5, [pc, #380]	; (8002e28 <main+0x27c>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cac:	a90f      	add	r1, sp, #60	; 0x3c
 8002cae:	4628      	mov	r0, r5
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cb0:	970f      	str	r7, [sp, #60]	; 0x3c
  htim2.Init.Prescaler = 0;
 8002cb2:	e885 0018 	stmia.w	r5, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb6:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 65535;
 8002cb8:	60ee      	str	r6, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cba:	612c      	str	r4, [r5, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cbc:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cbe:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cc2:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.IC1Filter = 0;
 8002cc4:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cc6:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cc8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ccc:	9416      	str	r4, [sp, #88]	; 0x58
  sConfig.IC2Filter = 0;
 8002cce:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002cd0:	f7ff f9b9 	bl	8002046 <HAL_TIM_Encoder_Init>
 8002cd4:	462f      	mov	r7, r5
 8002cd6:	b100      	cbz	r0, 8002cda <main+0x12e>
 8002cd8:	e7fe      	b.n	8002cd8 <main+0x12c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cda:	900b      	str	r0, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cdc:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cde:	a90b      	add	r1, sp, #44	; 0x2c
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f7ff fbe6 	bl	80024b2 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce6:	b100      	cbz	r0, 8002cea <main+0x13e>
 8002ce8:	e7fe      	b.n	8002ce8 <main+0x13c>
  htim3.Instance = TIM3;
 8002cea:	4c50      	ldr	r4, [pc, #320]	; (8002e2c <main+0x280>)
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <main+0x284>)
  htim3.Init.Prescaler = 0;
 8002cee:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf2:	6120      	str	r0, [r4, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf4:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cf6:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC1Filter = 0;
 8002cf8:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cfa:	9014      	str	r0, [sp, #80]	; 0x50
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cfc:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.IC2Filter = 0;
 8002cfe:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d00:	a90f      	add	r1, sp, #60	; 0x3c
 8002d02:	4620      	mov	r0, r4
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d04:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d08:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d0c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  htim3.Instance = TIM3;
 8002d10:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 65535;
 8002d12:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002d14:	f7ff f997 	bl	8002046 <HAL_TIM_Encoder_Init>
 8002d18:	46a0      	mov	r8, r4
 8002d1a:	b100      	cbz	r0, 8002d1e <main+0x172>
 8002d1c:	e7fe      	b.n	8002d1c <main+0x170>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1e:	900b      	str	r0, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d20:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d22:	a90b      	add	r1, sp, #44	; 0x2c
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff fbc4 	bl	80024b2 <HAL_TIMEx_MasterConfigSynchronization>
 8002d2a:	b100      	cbz	r0, 8002d2e <main+0x182>
 8002d2c:	e7fe      	b.n	8002d2c <main+0x180>
  htim10.Instance = TIM10;
 8002d2e:	4c41      	ldr	r4, [pc, #260]	; (8002e34 <main+0x288>)
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <main+0x28c>)
  htim10.Init.Prescaler = 0;
 8002d32:	6060      	str	r0, [r4, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	60a0      	str	r0, [r4, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d36:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d38:	4620      	mov	r0, r4
  htim10.Instance = TIM10;
 8002d3a:	6023      	str	r3, [r4, #0]
  htim10.Init.Period = 65535;
 8002d3c:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d3e:	f7ff f911 	bl	8001f64 <HAL_TIM_Base_Init>
 8002d42:	b100      	cbz	r0, 8002d46 <main+0x19a>
 8002d44:	e7fe      	b.n	8002d44 <main+0x198>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d46:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002d4a:	a90b      	add	r1, sp, #44	; 0x2c
 8002d4c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002d52:	f7ff fa6b 	bl	800222c <HAL_TIM_ConfigClockSource>
 8002d56:	b100      	cbz	r0, 8002d5a <main+0x1ae>
 8002d58:	e7fe      	b.n	8002d58 <main+0x1ac>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff f935 	bl	8001fca <HAL_TIM_PWM_Init>
 8002d60:	4602      	mov	r2, r0
 8002d62:	b100      	cbz	r0, 8002d66 <main+0x1ba>
 8002d64:	e7fe      	b.n	8002d64 <main+0x1b8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d66:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002d68:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6a:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d6e:	a90f      	add	r1, sp, #60	; 0x3c
 8002d70:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d72:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d74:	f7ff f9d2 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8002d78:	4605      	mov	r5, r0
 8002d7a:	b100      	cbz	r0, 8002d7e <main+0x1d2>
 8002d7c:	e7fe      	b.n	8002d7c <main+0x1d0>
  HAL_TIM_MspPostInit(&htim10);
 8002d7e:	4620      	mov	r0, r4
  htim11.Instance = TIM11;
 8002d80:	4c2e      	ldr	r4, [pc, #184]	; (8002e3c <main+0x290>)
  HAL_TIM_MspPostInit(&htim10);
 8002d82:	f000 fcd7 	bl	8003734 <HAL_TIM_MspPostInit>
  htim11.Instance = TIM11;
 8002d86:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <main+0x294>)
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d88:	4620      	mov	r0, r4
  htim11.Init.Prescaler = 0;
 8002d8a:	e884 0028 	stmia.w	r4, {r3, r5}
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8e:	60a5      	str	r5, [r4, #8]
  htim11.Init.Period = 65535;
 8002d90:	60e6      	str	r6, [r4, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d92:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d94:	f7ff f8e6 	bl	8001f64 <HAL_TIM_Base_Init>
 8002d98:	b100      	cbz	r0, 8002d9c <main+0x1f0>
 8002d9a:	e7fe      	b.n	8002d9a <main+0x1ee>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002d9c:	a90b      	add	r1, sp, #44	; 0x2c
 8002d9e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002da4:	f7ff fa42 	bl	800222c <HAL_TIM_ConfigClockSource>
 8002da8:	b100      	cbz	r0, 8002dac <main+0x200>
 8002daa:	e7fe      	b.n	8002daa <main+0x1fe>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002dac:	4823      	ldr	r0, [pc, #140]	; (8002e3c <main+0x290>)
 8002dae:	f7ff f90c 	bl	8001fca <HAL_TIM_PWM_Init>
 8002db2:	4602      	mov	r2, r0
 8002db4:	b100      	cbz	r0, 8002db8 <main+0x20c>
 8002db6:	e7fe      	b.n	8002db6 <main+0x20a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002dba:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dbc:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbe:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc0:	a90f      	add	r1, sp, #60	; 0x3c
 8002dc2:	481e      	ldr	r0, [pc, #120]	; (8002e3c <main+0x290>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc6:	f7ff f9a9 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8002dca:	4605      	mov	r5, r0
 8002dcc:	b100      	cbz	r0, 8002dd0 <main+0x224>
 8002dce:	e7fe      	b.n	8002dce <main+0x222>
  HAL_TIM_MspPostInit(&htim11);
 8002dd0:	481a      	ldr	r0, [pc, #104]	; (8002e3c <main+0x290>)
 8002dd2:	f000 fcaf 	bl	8003734 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 8002dd6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8002dda:	4c1a      	ldr	r4, [pc, #104]	; (8002e44 <main+0x298>)
  huart1.Init.BaudRate = 9600;
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <main+0x29c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dde:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 9600;
 8002de0:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002de4:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de8:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dea:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dec:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dee:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df0:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002df2:	f7ff fca3 	bl	800273c <HAL_UART_Init>
 8002df6:	b100      	cbz	r0, 8002dfa <main+0x24e>
 8002df8:	e7fe      	b.n	8002df8 <main+0x24c>
  htim5.Instance = TIM5;
 8002dfa:	4e14      	ldr	r6, [pc, #80]	; (8002e4c <main+0x2a0>)
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <main+0x2a4>)
  htim5.Init.Prescaler = 0;
 8002dfe:	6070      	str	r0, [r6, #4]
  htim5.Instance = TIM5;
 8002e00:	6033      	str	r3, [r6, #0]
  htim5.Init.Period = 3200000;
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <main+0x2a8>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e04:	60b0      	str	r0, [r6, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e06:	6130      	str	r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e08:	4630      	mov	r0, r6
  htim5.Init.Period = 3200000;
 8002e0a:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e0c:	f7ff f8aa 	bl	8001f64 <HAL_TIM_Base_Init>
 8002e10:	b310      	cbz	r0, 8002e58 <main+0x2ac>
 8002e12:	e7fe      	b.n	8002e12 <main+0x266>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	10120000 	.word	0x10120000
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	20000440 	.word	0x20000440
 8002e2c:	20000298 	.word	0x20000298
 8002e30:	40000400 	.word	0x40000400
 8002e34:	2000020c 	.word	0x2000020c
 8002e38:	40010c00 	.word	0x40010c00
 8002e3c:	2000032c 	.word	0x2000032c
 8002e40:	40011000 	.word	0x40011000
 8002e44:	200002ec 	.word	0x200002ec
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	20000260 	.word	0x20000260
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	0030d400 	.word	0x0030d400
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e5c:	a90f      	add	r1, sp, #60	; 0x3c
 8002e5e:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e60:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e62:	f7ff f9e3 	bl	800222c <HAL_TIM_ConfigClockSource>
 8002e66:	b100      	cbz	r0, 8002e6a <main+0x2be>
 8002e68:	e7fe      	b.n	8002e68 <main+0x2bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6a:	900b      	str	r0, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e6c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e6e:	a90b      	add	r1, sp, #44	; 0x2c
 8002e70:	4630      	mov	r0, r6
 8002e72:	f7ff fb1e 	bl	80024b2 <HAL_TIMEx_MasterConfigSynchronization>
 8002e76:	4605      	mov	r5, r0
 8002e78:	b100      	cbz	r0, 8002e7c <main+0x2d0>
 8002e7a:	e7fe      	b.n	8002e7a <main+0x2ce>
  HAL_TIM_Base_Start(&htim10);
 8002e7c:	485b      	ldr	r0, [pc, #364]	; (8002fec <main+0x440>)
 8002e7e:	f7ff f88b 	bl	8001f98 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 8002e82:	485b      	ldr	r0, [pc, #364]	; (8002ff0 <main+0x444>)
 8002e84:	f7ff f888 	bl	8001f98 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 8002e88:	4629      	mov	r1, r5
 8002e8a:	4858      	ldr	r0, [pc, #352]	; (8002fec <main+0x440>)
 8002e8c:	f7ff f8d9 	bl	8002042 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 8002e90:	4629      	mov	r1, r5
 8002e92:	4857      	ldr	r0, [pc, #348]	; (8002ff0 <main+0x444>)
 8002e94:	f7ff f8d5 	bl	8002042 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002e98:	2118      	movs	r1, #24
 8002e9a:	4856      	ldr	r0, [pc, #344]	; (8002ff4 <main+0x448>)
 8002e9c:	f7ff f91c 	bl	80020d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002ea0:	2118      	movs	r1, #24
 8002ea2:	4855      	ldr	r0, [pc, #340]	; (8002ff8 <main+0x44c>)
 8002ea4:	f7ff f918 	bl	80020d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f7ff f882 	bl	8001fb2 <HAL_TIM_Base_Start_IT>
  PIDInit(&PIDR, KP, KI, KD, .1, 0, 255, AUTOMATIC, DIRECT);
 8002eae:	f04f 0901 	mov.w	r9, #1
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //activate UART receive interrupt
 8002eb2:	4620      	mov	r0, r4
static void initMot(){
	right.prevcount = __HAL_TIM_GET_COUNTER(&htim3);
	left.prevcount = __HAL_TIM_GET_COUNTER(&htim2);
	right.dir = false;
	left.dir = false;
	right.setRPM = 0.0;
 8002eb4:	2400      	movs	r4, #0
  Transfer_cplt = 0;
 8002eb6:	4e51      	ldr	r6, [pc, #324]	; (8002ffc <main+0x450>)
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //activate UART receive interrupt
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4951      	ldr	r1, [pc, #324]	; (8003000 <main+0x454>)
  Transfer_cplt = 0;
 8002ebc:	6035      	str	r5, [r6, #0]
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //activate UART receive interrupt
 8002ebe:	f7ff fc69 	bl	8002794 <HAL_UART_Receive_IT>
	right.prevcount = __HAL_TIM_GET_COUNTER(&htim3);
 8002ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec6:	4a4f      	ldr	r2, [pc, #316]	; (8003004 <main+0x458>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  PIDInit(&PIDR, KP, KI, KD, .1, 0, 255, AUTOMATIC, DIRECT);
 8002eca:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003020 <main+0x474>
	right.prevcount = __HAL_TIM_GET_COUNTER(&htim3);
 8002ece:	8293      	strh	r3, [r2, #20]
	left.prevcount = __HAL_TIM_GET_COUNTER(&htim2);
 8002ed0:	683b      	ldr	r3, [r7, #0]
  PIDInit(&PIDR, KP, KI, KD, .1, 0, 255, AUTOMATIC, DIRECT);
 8002ed2:	4f4d      	ldr	r7, [pc, #308]	; (8003008 <main+0x45c>)
	left.prevcount = __HAL_TIM_GET_COUNTER(&htim2);
 8002ed4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <main+0x460>)
	right.dir = false;
 8002ed8:	7115      	strb	r5, [r2, #4]
	left.prevcount = __HAL_TIM_GET_COUNTER(&htim2);
 8002eda:	8299      	strh	r1, [r3, #20]
	left.dir = false;
 8002edc:	711d      	strb	r5, [r3, #4]
	right.setRPM = 0.0;
 8002ede:	6014      	str	r4, [r2, #0]
	right.setDis = 0.0;
 8002ee0:	6114      	str	r4, [r2, #16]
	right.distance_traveled=0.0;
 8002ee2:	6094      	str	r4, [r2, #8]
	right.prevpos = 0.0;
 8002ee4:	60d4      	str	r4, [r2, #12]
	left.setRPM = 0.0;
 8002ee6:	601c      	str	r4, [r3, #0]
	left.setDis = 0.0;
 8002ee8:	611c      	str	r4, [r3, #16]
	left.distance_traveled=0.0;
 8002eea:	609c      	str	r4, [r3, #8]
	left.prevpos = 0.0;
 8002eec:	60dc      	str	r4, [r3, #12]
  PIDInit(&PIDR, KP, KI, KD, .1, 0, 255, AUTOMATIC, DIRECT);
 8002eee:	4622      	mov	r2, r4
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4846      	ldr	r0, [pc, #280]	; (8003010 <main+0x464>)
 8002ef6:	9504      	str	r5, [sp, #16]
 8002ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002efc:	f8cd 8008 	str.w	r8, [sp, #8]
 8002f00:	9401      	str	r4, [sp, #4]
 8002f02:	9700      	str	r7, [sp, #0]
 8002f04:	f000 fb1d 	bl	8003542 <PIDInit>
  PIDInit(&PIDL, KP, KI, KD, .1, 0, 255, AUTOMATIC, DIRECT);
 8002f08:	9504      	str	r5, [sp, #16]
 8002f0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f0e:	f8cd 8008 	str.w	r8, [sp, #8]
 8002f12:	9401      	str	r4, [sp, #4]
 8002f14:	9700      	str	r7, [sp, #0]
 8002f16:	4623      	mov	r3, r4
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	483d      	ldr	r0, [pc, #244]	; (8003014 <main+0x468>)
 8002f1e:	f000 fb10 	bl	8003542 <PIDInit>
 8002f22:	46b3      	mov	fp, r6
	  if(Transfer_cplt >= 1)
 8002f24:	f8db 6000 	ldr.w	r6, [fp]
 8002f28:	2e00      	cmp	r6, #0
 8002f2a:	ddfd      	ble.n	8002f28 <main+0x37c>
		  memset(cmd,0,sizeof cmd);
 8002f2c:	2264      	movs	r2, #100	; 0x64
 8002f2e:	2100      	movs	r1, #0
 8002f30:	a80f      	add	r0, sp, #60	; 0x3c
 8002f32:	f000 fcd3 	bl	80038dc <memset>
		  strcpy(cmd, Rx_Buffer);
 8002f36:	4938      	ldr	r1, [pc, #224]	; (8003018 <main+0x46c>)
 8002f38:	a80f      	add	r0, sp, #60	; 0x3c
 8002f3a:	f000 fcd7 	bl	80038ec <strcpy>
		  cmd[Transfer_cplt]='\0';
 8002f3e:	ab28      	add	r3, sp, #160	; 0xa0
 8002f40:	441e      	add	r6, r3
		  tkpnt = strtok(cmd, " ");
 8002f42:	4936      	ldr	r1, [pc, #216]	; (800301c <main+0x470>)
 8002f44:	a80f      	add	r0, sp, #60	; 0x3c
		  cmd[Transfer_cplt]='\0';
 8002f46:	f806 5c64 	strb.w	r5, [r6, #-100]
		  tkpnt = strtok(cmd, " ");
 8002f4a:	f001 fb03 	bl	8004554 <strtok>
		  if(strncmp(tkpnt, "l",1)==0){
 8002f4e:	7803      	ldrb	r3, [r0, #0]
 8002f50:	2b6c      	cmp	r3, #108	; 0x6c
 8002f52:	d0e7      	beq.n	8002f24 <main+0x378>
		  else if (strncmp(tkpnt, "r",1)==0)
 8002f54:	2b72      	cmp	r3, #114	; 0x72
 8002f56:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8003024 <main+0x478>
 8002f5a:	d11d      	bne.n	8002f98 <main+0x3ec>
			tkpnt = strtok(NULL, " ");
 8002f5c:	492f      	ldr	r1, [pc, #188]	; (800301c <main+0x470>)
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f001 faf8 	bl	8004554 <strtok>
			float rotomega = atof(tkpnt);
 8002f64:	f000 fc93 	bl	800388e <atof>
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
			tkpnt = strtok(NULL, " ");
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	492b      	ldr	r1, [pc, #172]	; (800301c <main+0x470>)
 8002f70:	f001 faf0 	bl	8004554 <strtok>
			float rotphi = atof(tkpnt);
 8002f74:	f000 fc8b 	bl	800388e <atof>
 8002f78:	f7fd fda4 	bl	8000ac4 <__aeabi_d2f>
			float rotomega = atof(tkpnt);
 8002f7c:	4639      	mov	r1, r7
			float rotphi = atof(tkpnt);
 8002f7e:	4680      	mov	r8, r0
			float rotomega = atof(tkpnt);
 8002f80:	4630      	mov	r0, r6
 8002f82:	f7fd fd9f 	bl	8000ac4 <__aeabi_d2f>
			setArc(rotR, rotomega, rotphi);
 8002f86:	4642      	mov	r2, r8
 8002f88:	4601      	mov	r1, r0
 8002f8a:	4620      	mov	r0, r4
			setArc(rotR, rotomega, rotphi);
 8002f8c:	f7ff fd6c 	bl	8002a68 <setArc>
			state = MOV;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f88a 3000 	strb.w	r3, [sl]
 8002f96:	e7c5      	b.n	8002f24 <main+0x378>
		  else if (strncmp(tkpnt, "a",1)==0)
 8002f98:	2b61      	cmp	r3, #97	; 0x61
 8002f9a:	d124      	bne.n	8002fe6 <main+0x43a>
			tkpnt = strtok(NULL, " ");
 8002f9c:	491f      	ldr	r1, [pc, #124]	; (800301c <main+0x470>)
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f001 fad8 	bl	8004554 <strtok>
			float rotR = atof(tkpnt);
 8002fa4:	f000 fc73 	bl	800388e <atof>
 8002fa8:	4606      	mov	r6, r0
 8002faa:	460f      	mov	r7, r1
			tkpnt = strtok(NULL, " ");
 8002fac:	2000      	movs	r0, #0
 8002fae:	491b      	ldr	r1, [pc, #108]	; (800301c <main+0x470>)
 8002fb0:	f001 fad0 	bl	8004554 <strtok>
			float rotomega = atof(tkpnt);
 8002fb4:	f000 fc6b 	bl	800388e <atof>
 8002fb8:	4680      	mov	r8, r0
 8002fba:	4689      	mov	r9, r1
			tkpnt = strtok(NULL, " ");
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	4917      	ldr	r1, [pc, #92]	; (800301c <main+0x470>)
 8002fc0:	f001 fac8 	bl	8004554 <strtok>
			float rotphi = atof(tkpnt);
 8002fc4:	f000 fc63 	bl	800388e <atof>
 8002fc8:	f7fd fd7c 	bl	8000ac4 <__aeabi_d2f>
			float rotomega = atof(tkpnt);
 8002fcc:	4649      	mov	r1, r9
			float rotphi = atof(tkpnt);
 8002fce:	9007      	str	r0, [sp, #28]
			float rotomega = atof(tkpnt);
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	f7fd fd77 	bl	8000ac4 <__aeabi_d2f>
 8002fd6:	4680      	mov	r8, r0
			float rotR = atof(tkpnt);
 8002fd8:	4639      	mov	r1, r7
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f7fd fd72 	bl	8000ac4 <__aeabi_d2f>
			setArc(rotR, rotomega, rotphi);
 8002fe0:	9a07      	ldr	r2, [sp, #28]
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	e7d2      	b.n	8002f8c <main+0x3e0>
			state = STP;
 8002fe6:	f88a 5000 	strb.w	r5, [sl]
 8002fea:	e79b      	b.n	8002f24 <main+0x378>
 8002fec:	2000020c 	.word	0x2000020c
 8002ff0:	2000032c 	.word	0x2000032c
 8002ff4:	20000440 	.word	0x20000440
 8002ff8:	20000298 	.word	0x20000298
 8002ffc:	20000204 	.word	0x20000204
 8003000:	2000025c 	.word	0x2000025c
 8003004:	20000244 	.word	0x20000244
 8003008:	3dcccccd 	.word	0x3dcccccd
 800300c:	200002d4 	.word	0x200002d4
 8003010:	20000364 	.word	0x20000364
 8003014:	20000404 	.word	0x20000404
 8003018:	200003a0 	.word	0x200003a0
 800301c:	080055c8 	.word	0x080055c8
 8003020:	437f0000 	.word	0x437f0000
 8003024:	200002d0 	.word	0x200002d0

08003028 <setPWM>:
{
 8003028:	b084      	sub	sp, #16
 800302a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800302c:	f10d 0e20 	add.w	lr, sp, #32
 8003030:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8003034:	4670      	mov	r0, lr
 8003036:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003038:	f7fe ffe1 	bl	8001ffe <HAL_TIM_PWM_Stop>
 timer.Init.Period = period; // set the period duration
 800303c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 HAL_TIM_PWM_Init(&timer); // Reinitialize with new period value
 8003040:	a808      	add	r0, sp, #32
 timer.Init.Period = period; // set the period duration
 8003042:	930b      	str	r3, [sp, #44]	; 0x2c
 HAL_TIM_PWM_Init(&timer); // Reinitialize with new period value
 8003044:	f7fe ffc1 	bl	8001fca <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003048:	2360      	movs	r3, #96	; 0x60
 800304a:	9301      	str	r3, [sp, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 800304c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8003050:	9a16      	ldr	r2, [sp, #88]	; 0x58
 sConfigOC.Pulse = pulse; // set the pulse duration
 8003052:	9302      	str	r3, [sp, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003054:	2300      	movs	r3, #0
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8003056:	a901      	add	r1, sp, #4
 8003058:	a808      	add	r0, sp, #32
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800305a:	9303      	str	r3, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305c:	9304      	str	r3, [sp, #16]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800305e:	f7ff f85d 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8003062:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003064:	a808      	add	r0, sp, #32
 8003066:	f7fe ffec 	bl	8002042 <HAL_TIM_PWM_Start>
}
 800306a:	b007      	add	sp, #28
 800306c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003070:	b004      	add	sp, #16
 8003072:	4770      	bx	lr
 8003074:	0000      	movs	r0, r0
	...

08003078 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(state == STP){
 800307c:	4bbc      	ldr	r3, [pc, #752]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800307e:	b091      	sub	sp, #68	; 0x44
	if(state == STP){
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8144 	beq.w	8003310 <HAL_TIM_PeriodElapsedCallback+0x298>
	if(right.dir == true) {
 8003088:	4dba      	ldr	r5, [pc, #744]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800308a:	792c      	ldrb	r4, [r5, #4]
 800308c:	2c00      	cmp	r4, #0
 800308e:	f000 8142 	beq.w	8003316 <HAL_TIM_PeriodElapsedCallback+0x29e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003092:	2201      	movs	r2, #1
 8003094:	4611      	mov	r1, r2
 8003096:	48b8      	ldr	r0, [pc, #736]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003098:	f7fe f9f4 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800309c:	2200      	movs	r2, #0
	if(left.dir == true) {
 800309e:	4cb7      	ldr	r4, [pc, #732]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x304>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80030a0:	2102      	movs	r1, #2
 80030a2:	48b5      	ldr	r0, [pc, #724]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80030a4:	f7fe f9ee 	bl	8001484 <HAL_GPIO_WritePin>
	if(left.dir == true) {
 80030a8:	7926      	ldrb	r6, [r4, #4]
 80030aa:	2e00      	cmp	r6, #0
 80030ac:	f000 8142 	beq.w	8003334 <HAL_TIM_PeriodElapsedCallback+0x2bc>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2104      	movs	r1, #4
 80030b4:	48b0      	ldr	r0, [pc, #704]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80030b6:	f7fe f9e5 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80030bc:	48ae      	ldr	r0, [pc, #696]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80030be:	2108      	movs	r1, #8
 80030c0:	f7fe f9e0 	bl	8001484 <HAL_GPIO_WritePin>
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 80030c4:	4bae      	ldr	r3, [pc, #696]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x308>)
		if(right.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 80030c6:	8aa8      	ldrh	r0, [r5, #20]
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f012 0f10 	tst.w	r2, #16
		if(right.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 80030d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 80030d2:	f000 813d 	beq.w	8003350 <HAL_TIM_PeriodElapsedCallback+0x2d8>
		if(right.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 80030d6:	4290      	cmp	r0, r2
			newposition1 = 65535-__HAL_TIM_GET_COUNTER(&htim3) +right.prevcount;
 80030d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		if(right.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 80030da:	f080 816f 	bcs.w	80033bc <HAL_TIM_PeriodElapsedCallback+0x344>
			newposition1 = 65535-__HAL_TIM_GET_COUNTER(&htim3) +right.prevcount;
 80030de:	3801      	subs	r0, #1
 80030e0:	1a80      	subs	r0, r0, r2
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80030e2:	4aa8      	ldr	r2, [pc, #672]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x30c>)
			newposition1 =abs(__HAL_TIM_GET_COUNTER(&htim3)-right.prevcount);
 80030e4:	b280      	uxth	r0, r0
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80030e6:	6811      	ldr	r1, [r2, #0]
 80030e8:	680a      	ldr	r2, [r1, #0]
 80030ea:	06d2      	lsls	r2, r2, #27
 80030ec:	f140 8171 	bpl.w	80033d2 <HAL_TIM_PeriodElapsedCallback+0x35a>
			if(left.prevcount < __HAL_TIM_GET_COUNTER(&htim2)){
 80030f0:	8aa3      	ldrh	r3, [r4, #20]
 80030f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f080 8166 	bcs.w	80033c6 <HAL_TIM_PeriodElapsedCallback+0x34e>
				newposition2 = 65535-__HAL_TIM_GET_COUNTER(&htim2) +left.prevcount;
 80030fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80030fc:	1e5e      	subs	r6, r3, #1
 80030fe:	1ab6      	subs	r6, r6, r2
	float vel1 = ((float)newposition1) * 1000.0 / (100.0); //encoder pulses per second
 8003100:	f7fd fde6 	bl	8000cd0 <__aeabi_ui2f>
 8003104:	900e      	str	r0, [sp, #56]	; 0x38
 8003106:	f7fd f9a7 	bl	8000458 <__aeabi_f2d>
 800310a:	2200      	movs	r2, #0
 800310c:	4b9e      	ldr	r3, [pc, #632]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800310e:	f7fd f9f7 	bl	8000500 <__aeabi_dmul>
 8003112:	2200      	movs	r2, #0
 8003114:	4b9d      	ldr	r3, [pc, #628]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003116:	f7fd fb1d 	bl	8000754 <__aeabi_ddiv>
 800311a:	f7fd fcd3 	bl	8000ac4 <__aeabi_d2f>
	float rpm1 = ((vel1 * 60)/1500); //Measured motor RPM
 800311e:	499c      	ldr	r1, [pc, #624]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003120:	f7fd fe2e 	bl	8000d80 <__aeabi_fmul>
 8003124:	499b      	ldr	r1, [pc, #620]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003126:	f7fd fedf 	bl	8000ee8 <__aeabi_fdiv>
				newposition2 =abs(__HAL_TIM_GET_COUNTER(&htim2)-left.prevcount);
 800312a:	b2b6      	uxth	r6, r6
	float rpm1 = ((vel1 * 60)/1500); //Measured motor RPM
 800312c:	4607      	mov	r7, r0
	float vel2 = ((float)newposition2) * 1000.0 / (100.0); //encoder pulses per second
 800312e:	4630      	mov	r0, r6
 8003130:	f7fd fdce 	bl	8000cd0 <__aeabi_ui2f>
 8003134:	4683      	mov	fp, r0
 8003136:	f7fd f98f 	bl	8000458 <__aeabi_f2d>
 800313a:	2200      	movs	r2, #0
 800313c:	4b92      	ldr	r3, [pc, #584]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800313e:	f7fd f9df 	bl	8000500 <__aeabi_dmul>
 8003142:	2200      	movs	r2, #0
 8003144:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003146:	f7fd fb05 	bl	8000754 <__aeabi_ddiv>
 800314a:	f7fd fcbb 	bl	8000ac4 <__aeabi_d2f>
	float rpm2 = ((vel2 * 60)/1500);
 800314e:	4990      	ldr	r1, [pc, #576]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003150:	f7fd fe16 	bl	8000d80 <__aeabi_fmul>
 8003154:	498f      	ldr	r1, [pc, #572]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003156:	f7fd fec7 	bl	8000ee8 <__aeabi_fdiv>
	float realspeed1 = (rpm1 * 2 * M_PI *WHEELRAD)/60; //Linear speed in mm/s
 800315a:	4639      	mov	r1, r7
	float rpm2 = ((vel2 * 60)/1500);
 800315c:	4606      	mov	r6, r0
	float realspeed1 = (rpm1 * 2 * M_PI *WHEELRAD)/60; //Linear speed in mm/s
 800315e:	4638      	mov	r0, r7
 8003160:	f7fd fd06 	bl	8000b70 <__addsf3>
 8003164:	f7fd f978 	bl	8000458 <__aeabi_f2d>
 8003168:	a37d      	add	r3, pc, #500	; (adr r3, 8003360 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f7fd f9c7 	bl	8000500 <__aeabi_dmul>
 8003172:	2200      	movs	r2, #0
 8003174:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003176:	f7fd f9c3 	bl	8000500 <__aeabi_dmul>
 800317a:	2200      	movs	r2, #0
 800317c:	4b87      	ldr	r3, [pc, #540]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800317e:	f7fd fae9 	bl	8000754 <__aeabi_ddiv>
 8003182:	f7fd fc9f 	bl	8000ac4 <__aeabi_d2f>
	float realspeed2 = (rpm2 * 2 * M_PI *WHEELRAD)/60; //Linear speed in mm/s
 8003186:	4631      	mov	r1, r6
	float realspeed1 = (rpm1 * 2 * M_PI *WHEELRAD)/60; //Linear speed in mm/s
 8003188:	4682      	mov	sl, r0
	float realspeed2 = (rpm2 * 2 * M_PI *WHEELRAD)/60; //Linear speed in mm/s
 800318a:	4630      	mov	r0, r6
 800318c:	f7fd fcf0 	bl	8000b70 <__addsf3>
 8003190:	f7fd f962 	bl	8000458 <__aeabi_f2d>
 8003194:	a372      	add	r3, pc, #456	; (adr r3, 8003360 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f7fd f9b1 	bl	8000500 <__aeabi_dmul>
 800319e:	2200      	movs	r2, #0
 80031a0:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80031a2:	f7fd f9ad 	bl	8000500 <__aeabi_dmul>
 80031a6:	4b7d      	ldr	r3, [pc, #500]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	f7fd fad3 	bl	8000754 <__aeabi_ddiv>
 80031ae:	f7fd fc89 	bl	8000ac4 <__aeabi_d2f>
	if (right.dir)
 80031b2:	792b      	ldrb	r3, [r5, #4]
	float realspeed2 = (rpm2 * 2 * M_PI *WHEELRAD)/60; //Linear speed in mm/s
 80031b4:	4681      	mov	r9, r0
	if (right.dir)
 80031b6:	b10b      	cbz	r3, 80031bc <HAL_TIM_PeriodElapsedCallback+0x144>
	rpm1 = -1*rpm1;
 80031b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
	if (left.dir)
 80031bc:	7923      	ldrb	r3, [r4, #4]
 80031be:	b10b      	cbz	r3, 80031c4 <HAL_TIM_PeriodElapsedCallback+0x14c>
	rpm2 = -1*rpm2;
 80031c0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
//      setpoint - The desired setpoint the PID controller will try to obtain.
// Returns:
//      Nothing.
// 
inline void 
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 80031c4:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80033b4 <HAL_TIM_PeriodElapsedCallback+0x33c>
 80031c8:	682b      	ldr	r3, [r5, #0]
//      input - The value the controller will work with.
// Returns:
//      Nothing.
// 
inline void 
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 80031ca:	f8c8 7000 	str.w	r7, [r8]
PIDSetpointSet(PIDControl *pid, float setpoint) { pid->setpoint = setpoint; }
 80031ce:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 80031d2:	4f73      	ldr	r7, [pc, #460]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80031d4:	6823      	ldr	r3, [r4, #0]
	PIDCompute(&PIDR);
 80031d6:	4640      	mov	r0, r8
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
PIDInputSet(PIDControl *pid, float input) { pid->input = input; }
 80031da:	603e      	str	r6, [r7, #0]
 80031dc:	f000 f904 	bl	80033e8 <PIDCompute>
	PIDCompute(&PIDL);
 80031e0:	4638      	mov	r0, r7
 80031e2:	f000 f901 	bl	80033e8 <PIDCompute>
	uint8_t speed2 = (uint8_t)PIDOutputGet(&PIDL);
 80031e6:	68b8      	ldr	r0, [r7, #8]
 80031e8:	f7fd ffb6 	bl	8001158 <__aeabi_f2uiz>
 80031ec:	b2c3      	uxtb	r3, r0
	uint8_t speed1 = (uint8_t)PIDOutputGet(&PIDR);
 80031ee:	f8d8 0008 	ldr.w	r0, [r8, #8]
	uint8_t speed2 = (uint8_t)PIDOutputGet(&PIDL);
 80031f2:	930f      	str	r3, [sp, #60]	; 0x3c
	uint8_t speed1 = (uint8_t)PIDOutputGet(&PIDR);
 80031f4:	f7fd ffb0 	bl	8001158 <__aeabi_f2uiz>
	setPWM(htim11,TIM_CHANNEL_1, 255, (uint8_t)speed1);
 80031f8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80031fc:	2700      	movs	r7, #0
 80031fe:	46ee      	mov	lr, sp
 8003200:	4e68      	ldr	r6, [pc, #416]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003202:	b2c0      	uxtb	r0, r0
 8003204:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8003208:	970a      	str	r7, [sp, #40]	; 0x28
 800320a:	900c      	str	r0, [sp, #48]	; 0x30
 800320c:	f106 0c10 	add.w	ip, r6, #16
 8003210:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003214:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003218:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800321c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003220:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003224:	e88e 0003 	stmia.w	lr, {r0, r1}
 8003228:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
	setPWM(htim10,TIM_CHANNEL_1, 255, (uint8_t)speed2);
 800322c:	466e      	mov	r6, sp
	setPWM(htim11,TIM_CHANNEL_1, 255, (uint8_t)speed1);
 800322e:	f7ff fefb 	bl	8003028 <setPWM>
	setPWM(htim10,TIM_CHANNEL_1, 255, (uint8_t)speed2);
 8003232:	f8df e184 	ldr.w	lr, [pc, #388]	; 80033b8 <HAL_TIM_PeriodElapsedCallback+0x340>
 8003236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003238:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800323c:	970a      	str	r7, [sp, #40]	; 0x28
 800323e:	930c      	str	r3, [sp, #48]	; 0x30
 8003240:	f10e 0710 	add.w	r7, lr, #16
 8003244:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003248:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800324a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800324c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003250:	e886 0003 	stmia.w	r6, {r0, r1}
 8003254:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003258:	f7ff fee6 	bl	8003028 <setPWM>
    right.distance_traveled = right.distance_traveled + (realspeed1*100*1e-3); //integrate linear velocity to obtain distance
 800325c:	4952      	ldr	r1, [pc, #328]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800325e:	4650      	mov	r0, sl
 8003260:	f7fd fd8e 	bl	8000d80 <__aeabi_fmul>
 8003264:	f7fd f8f8 	bl	8000458 <__aeabi_f2d>
 8003268:	a33f      	add	r3, pc, #252	; (adr r3, 8003368 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f7fd f947 	bl	8000500 <__aeabi_dmul>
 8003272:	4606      	mov	r6, r0
 8003274:	68a8      	ldr	r0, [r5, #8]
 8003276:	460f      	mov	r7, r1
 8003278:	f7fd f8ee 	bl	8000458 <__aeabi_f2d>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4630      	mov	r0, r6
 8003282:	4639      	mov	r1, r7
 8003284:	f7fc ff8a 	bl	800019c <__adddf3>
 8003288:	f7fd fc1c 	bl	8000ac4 <__aeabi_d2f>
	left.distance_traveled = left.distance_traveled + (realspeed2*100*1e-3); //integrate linear velocity to obtain distance
 800328c:	4946      	ldr	r1, [pc, #280]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x330>)
    right.distance_traveled = right.distance_traveled + (realspeed1*100*1e-3); //integrate linear velocity to obtain distance
 800328e:	60a8      	str	r0, [r5, #8]
 8003290:	4680      	mov	r8, r0
	left.distance_traveled = left.distance_traveled + (realspeed2*100*1e-3); //integrate linear velocity to obtain distance
 8003292:	4648      	mov	r0, r9
 8003294:	f7fd fd74 	bl	8000d80 <__aeabi_fmul>
 8003298:	f7fd f8de 	bl	8000458 <__aeabi_f2d>
 800329c:	a332      	add	r3, pc, #200	; (adr r3, 8003368 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fd f92d 	bl	8000500 <__aeabi_dmul>
 80032a6:	4606      	mov	r6, r0
 80032a8:	68a0      	ldr	r0, [r4, #8]
 80032aa:	460f      	mov	r7, r1
 80032ac:	f7fd f8d4 	bl	8000458 <__aeabi_f2d>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4630      	mov	r0, r6
 80032b6:	4639      	mov	r1, r7
 80032b8:	f7fc ff70 	bl	800019c <__adddf3>
 80032bc:	f7fd fc02 	bl	8000ac4 <__aeabi_d2f>
	if ((abs(right.distance_traveled-right.setDis) <= 5)||(abs(left.distance_traveled-left.setDis) <= 5) ){
 80032c0:	6929      	ldr	r1, [r5, #16]
	left.distance_traveled = left.distance_traveled + (realspeed2*100*1e-3); //integrate linear velocity to obtain distance
 80032c2:	60a0      	str	r0, [r4, #8]
 80032c4:	4607      	mov	r7, r0
	if ((abs(right.distance_traveled-right.setDis) <= 5)||(abs(left.distance_traveled-left.setDis) <= 5) ){
 80032c6:	4640      	mov	r0, r8
 80032c8:	f7fd fc50 	bl	8000b6c <__aeabi_fsub>
 80032cc:	f7fd ff1e 	bl	800110c <__aeabi_f2iz>
 80032d0:	3005      	adds	r0, #5
 80032d2:	280a      	cmp	r0, #10
 80032d4:	4e27      	ldr	r6, [pc, #156]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80032d6:	4d29      	ldr	r5, [pc, #164]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80032d8:	d908      	bls.n	80032ec <HAL_TIM_PeriodElapsedCallback+0x274>
 80032da:	6921      	ldr	r1, [r4, #16]
 80032dc:	4638      	mov	r0, r7
 80032de:	f7fd fc45 	bl	8000b6c <__aeabi_fsub>
 80032e2:	f7fd ff13 	bl	800110c <__aeabi_f2iz>
 80032e6:	3005      	adds	r0, #5
 80032e8:	280a      	cmp	r0, #10
 80032ea:	d80d      	bhi.n	8003308 <HAL_TIM_PeriodElapsedCallback+0x290>
		right.setRPM = 0.0; //Brake
 80032ec:	2200      	movs	r2, #0
		right.dir = false;
 80032ee:	2300      	movs	r3, #0
		right.setRPM = 0.0; //Brake
 80032f0:	6032      	str	r2, [r6, #0]
		left.setRPM = 0.0; //Brake
 80032f2:	602a      	str	r2, [r5, #0]
		right.setDis = 0.0;
 80032f4:	6132      	str	r2, [r6, #16]
		left.setDis = 0.0;
 80032f6:	612a      	str	r2, [r5, #16]
		angle_set = false; //Re-initialize the targeting to an angle rotation
 80032f8:	4a2c      	ldr	r2, [pc, #176]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x334>)
		right.dir = false;
 80032fa:	7133      	strb	r3, [r6, #4]
		angle_set = false; //Re-initialize the targeting to an angle rotation
 80032fc:	7013      	strb	r3, [r2, #0]
		distance_set = false;
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x338>)
		left.dir = false;
 8003300:	712b      	strb	r3, [r5, #4]
		distance_set = false;
 8003302:	7013      	strb	r3, [r2, #0]
		state = STP;
 8003304:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003306:	7013      	strb	r3, [r2, #0]
	right.prevpos = newposition1;
 8003308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	left.prevpos = newposition2;
 800330a:	f8c5 b00c 	str.w	fp, [r5, #12]
	right.prevpos = newposition1;
 800330e:	60f3      	str	r3, [r6, #12]
}
 8003310:	b011      	add	sp, #68	; 0x44
 8003312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (right.setRPM == 0.0) {
 8003316:	2100      	movs	r1, #0
 8003318:	6828      	ldr	r0, [r5, #0]
 800331a:	f7fd fec5 	bl	80010a8 <__aeabi_fcmpeq>
 800331e:	4602      	mov	r2, r0
 8003320:	b110      	cbz	r0, 8003328 <HAL_TIM_PeriodElapsedCallback+0x2b0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003322:	4622      	mov	r2, r4
 8003324:	2101      	movs	r1, #1
 8003326:	e6b6      	b.n	8003096 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003328:	2101      	movs	r1, #1
 800332a:	4813      	ldr	r0, [pc, #76]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800332c:	f7fe f8aa 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003330:	2201      	movs	r2, #1
 8003332:	e6b4      	b.n	800309e <HAL_TIM_PeriodElapsedCallback+0x26>
	} else if (left.setRPM == 0.0) {
 8003334:	2100      	movs	r1, #0
 8003336:	6820      	ldr	r0, [r4, #0]
 8003338:	f7fd feb6 	bl	80010a8 <__aeabi_fcmpeq>
 800333c:	4602      	mov	r2, r0
 800333e:	b108      	cbz	r0, 8003344 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003340:	4632      	mov	r2, r6
 8003342:	e6b6      	b.n	80030b2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003344:	2104      	movs	r1, #4
 8003346:	480c      	ldr	r0, [pc, #48]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003348:	f7fe f89c 	bl	8001484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800334c:	2201      	movs	r2, #1
 800334e:	e6b5      	b.n	80030bc <HAL_TIM_PeriodElapsedCallback+0x44>
		if(right.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 8003350:	4290      	cmp	r0, r2
			newposition1 = __HAL_TIM_GET_COUNTER(&htim3) + 65535 - right.prevcount;
 8003352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		if(right.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 8003354:	d232      	bcs.n	80033bc <HAL_TIM_PeriodElapsedCallback+0x344>
			newposition1 = __HAL_TIM_GET_COUNTER(&htim3) + 65535 - right.prevcount;
 8003356:	43c0      	mvns	r0, r0
 8003358:	4410      	add	r0, r2
 800335a:	e6c2      	b.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 800335c:	f3af 8000 	nop.w
 8003360:	54442d18 	.word	0x54442d18
 8003364:	400921fb 	.word	0x400921fb
 8003368:	d2f1a9fc 	.word	0xd2f1a9fc
 800336c:	3f50624d 	.word	0x3f50624d
 8003370:	200002d0 	.word	0x200002d0
 8003374:	20000244 	.word	0x20000244
 8003378:	40020800 	.word	0x40020800
 800337c:	200002d4 	.word	0x200002d4
 8003380:	20000298 	.word	0x20000298
 8003384:	20000440 	.word	0x20000440
 8003388:	408f4000 	.word	0x408f4000
 800338c:	40590000 	.word	0x40590000
 8003390:	42700000 	.word	0x42700000
 8003394:	44bb8000 	.word	0x44bb8000
 8003398:	40568000 	.word	0x40568000
 800339c:	404e0000 	.word	0x404e0000
 80033a0:	20000404 	.word	0x20000404
 80033a4:	2000032c 	.word	0x2000032c
 80033a8:	42c80000 	.word	0x42c80000
 80033ac:	200001f0 	.word	0x200001f0
 80033b0:	200001f1 	.word	0x200001f1
 80033b4:	20000364 	.word	0x20000364
 80033b8:	2000020c 	.word	0x2000020c
			newposition1 =abs(__HAL_TIM_GET_COUNTER(&htim3)-right.prevcount);
 80033bc:	1a10      	subs	r0, r2, r0
 80033be:	2800      	cmp	r0, #0
 80033c0:	bfb8      	it	lt
 80033c2:	4240      	neglt	r0, r0
 80033c4:	e68d      	b.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x6a>
				newposition2 =abs(__HAL_TIM_GET_COUNTER(&htim2)-left.prevcount);
 80033c6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80033c8:	1af6      	subs	r6, r6, r3
				newposition2 =abs(__HAL_TIM_GET_COUNTER(&htim2)-left.prevcount);
 80033ca:	2e00      	cmp	r6, #0
 80033cc:	bfb8      	it	lt
 80033ce:	4276      	neglt	r6, r6
 80033d0:	e696      	b.n	8003100 <HAL_TIM_PeriodElapsedCallback+0x88>
			if(left.prevcount < __HAL_TIM_GET_COUNTER(&htim3)){
 80033d2:	8aa2      	ldrh	r2, [r4, #20]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d203      	bcs.n	80033e2 <HAL_TIM_PeriodElapsedCallback+0x36a>
				newposition2 = __HAL_TIM_GET_COUNTER(&htim2) + 65535 - left.prevcount;
 80033da:	43d6      	mvns	r6, r2
 80033dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80033de:	441e      	add	r6, r3
 80033e0:	e68e      	b.n	8003100 <HAL_TIM_PeriodElapsedCallback+0x88>
				newposition2 =abs(__HAL_TIM_GET_COUNTER(&htim2)-left.prevcount);
 80033e2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80033e4:	1ab6      	subs	r6, r6, r2
 80033e6:	e7f0      	b.n	80033ca <HAL_TIM_PeriodElapsedCallback+0x352>

080033e8 <PIDCompute>:
    PIDTuningsSet(pid, kp, ki, kd);
}
        
bool
PIDCompute(PIDControl *pid) 
{
 80033e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ec:	4604      	mov	r4, r0
    float error, dInput;

    if(pid->mode == MANUAL)
 80033ee:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d03d      	beq.n	8003472 <PIDCompute+0x8a>
    {
        return false;
    }
    
    // The classic PID error term
    error = (pid->setpoint) - (pid->input);
 80033f6:	6827      	ldr	r7, [r4, #0]
 80033f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033fa:	4639      	mov	r1, r7
 80033fc:	f7fd fbb6 	bl	8000b6c <__aeabi_fsub>
    
    // Compute the integral term separately ahead of time
    pid->iTerm += (pid->alteredKi) * error;
 8003400:	69e1      	ldr	r1, [r4, #28]
    error = (pid->setpoint) - (pid->input);
 8003402:	4681      	mov	r9, r0
    pid->iTerm += (pid->alteredKi) * error;
 8003404:	f7fd fcbc 	bl	8000d80 <__aeabi_fmul>
 8003408:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800340a:	f7fd fbb1 	bl	8000b70 <__addsf3>
    
    // Constrain the integrator to make sure it does not exceed output bounds
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 800340e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    pid->iTerm += (pid->alteredKi) * error;
 8003410:	4680      	mov	r8, r0
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003412:	4629      	mov	r1, r5
 8003414:	f7fd fe52 	bl	80010bc <__aeabi_fcmplt>
 8003418:	2800      	cmp	r0, #0
 800341a:	d12c      	bne.n	8003476 <PIDCompute+0x8e>
 800341c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800341e:	4640      	mov	r0, r8
 8003420:	4631      	mov	r1, r6
 8003422:	f7fd fe69 	bl	80010f8 <__aeabi_fcmpgt>
 8003426:	b900      	cbnz	r0, 800342a <PIDCompute+0x42>
 8003428:	4646      	mov	r6, r8
 800342a:	6266      	str	r6, [r4, #36]	; 0x24
    
    // Take the "derivative on measurement" instead of "derivative on error"
    dInput = (pid->input) - (pid->lastInput);
    
    // Run all the terms together to get the overall output
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 800342c:	69a1      	ldr	r1, [r4, #24]
 800342e:	4648      	mov	r0, r9
 8003430:	f7fd fca6 	bl	8000d80 <__aeabi_fmul>
 8003434:	4631      	mov	r1, r6
 8003436:	f7fd fb9b 	bl	8000b70 <__addsf3>
    dInput = (pid->input) - (pid->lastInput);
 800343a:	6861      	ldr	r1, [r4, #4]
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 800343c:	4606      	mov	r6, r0
    dInput = (pid->input) - (pid->lastInput);
 800343e:	4638      	mov	r0, r7
 8003440:	f7fd fb94 	bl	8000b6c <__aeabi_fsub>
    pid->output = (pid->alteredKp) * error + (pid->iTerm) - (pid->alteredKd) * dInput;
 8003444:	6a21      	ldr	r1, [r4, #32]
 8003446:	f7fd fc9b 	bl	8000d80 <__aeabi_fmul>
 800344a:	4601      	mov	r1, r0
 800344c:	4630      	mov	r0, r6
 800344e:	f7fd fb8d 	bl	8000b6c <__aeabi_fsub>
 8003452:	4606      	mov	r6, r0
    
    // Bound the output
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 8003454:	4601      	mov	r1, r0
 8003456:	4628      	mov	r0, r5
 8003458:	f7fd fe4e 	bl	80010f8 <__aeabi_fcmpgt>
 800345c:	b930      	cbnz	r0, 800346c <PIDCompute+0x84>
 800345e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003460:	4630      	mov	r0, r6
 8003462:	4629      	mov	r1, r5
 8003464:	f7fd fe48 	bl	80010f8 <__aeabi_fcmpgt>
 8003468:	b900      	cbnz	r0, 800346c <PIDCompute+0x84>
 800346a:	4635      	mov	r5, r6
    
    // Make the current input the former input
    pid->lastInput = pid->input;
    
    return true;
 800346c:	2001      	movs	r0, #1
    pid->output = CONSTRAIN( (pid->output), (pid->outMin), (pid->outMax) );
 800346e:	60a5      	str	r5, [r4, #8]
    pid->lastInput = pid->input;
 8003470:	6067      	str	r7, [r4, #4]
}
 8003472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pid->iTerm = CONSTRAIN( (pid->iTerm), (pid->outMin), (pid->outMax) );
 8003476:	462e      	mov	r6, r5
 8003478:	e7d7      	b.n	800342a <PIDCompute+0x42>

0800347a <PIDOutputLimitsSet>:
    pid->mode = mode;
}

void 
PIDOutputLimitsSet(PIDControl *pid, float min, float max) 							  							  
{
 800347a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347c:	460c      	mov	r4, r1
 800347e:	4605      	mov	r5, r0
    // Check if the parameters are valid
    if(min >= max)
 8003480:	4611      	mov	r1, r2
 8003482:	4620      	mov	r0, r4
{
 8003484:	4616      	mov	r6, r2
    if(min >= max)
 8003486:	f7fd fe2d 	bl	80010e4 <__aeabi_fcmpge>
 800348a:	b9f0      	cbnz	r0, 80034ca <PIDOutputLimitsSet+0x50>
    // Save the parameters
    pid->outMin = min;
    pid->outMax = max;
    
    // If in automatic, apply the new constraints
    if(pid->mode == AUTOMATIC)
 800348c:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    pid->outMin = min;
 8003490:	62ec      	str	r4, [r5, #44]	; 0x2c
    if(pid->mode == AUTOMATIC)
 8003492:	2b01      	cmp	r3, #1
    pid->outMax = max;
 8003494:	632e      	str	r6, [r5, #48]	; 0x30
    if(pid->mode == AUTOMATIC)
 8003496:	d118      	bne.n	80034ca <PIDOutputLimitsSet+0x50>
    {
        pid->output = CONSTRAIN(pid->output, min, max);
 8003498:	68af      	ldr	r7, [r5, #8]
 800349a:	4620      	mov	r0, r4
 800349c:	4639      	mov	r1, r7
 800349e:	f7fd fe2b 	bl	80010f8 <__aeabi_fcmpgt>
 80034a2:	b998      	cbnz	r0, 80034cc <PIDOutputLimitsSet+0x52>
 80034a4:	4639      	mov	r1, r7
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7fd fe08 	bl	80010bc <__aeabi_fcmplt>
 80034ac:	b980      	cbnz	r0, 80034d0 <PIDOutputLimitsSet+0x56>
 80034ae:	60af      	str	r7, [r5, #8]
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 80034b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80034b2:	4620      	mov	r0, r4
 80034b4:	4639      	mov	r1, r7
 80034b6:	f7fd fe1f 	bl	80010f8 <__aeabi_fcmpgt>
 80034ba:	b928      	cbnz	r0, 80034c8 <PIDOutputLimitsSet+0x4e>
 80034bc:	4639      	mov	r1, r7
 80034be:	4630      	mov	r0, r6
 80034c0:	f7fd fdfc 	bl	80010bc <__aeabi_fcmplt>
 80034c4:	b930      	cbnz	r0, 80034d4 <PIDOutputLimitsSet+0x5a>
 80034c6:	463c      	mov	r4, r7
 80034c8:	626c      	str	r4, [r5, #36]	; 0x24
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pid->output = CONSTRAIN(pid->output, min, max);
 80034cc:	4627      	mov	r7, r4
 80034ce:	e7ee      	b.n	80034ae <PIDOutputLimitsSet+0x34>
 80034d0:	4637      	mov	r7, r6
 80034d2:	e7ec      	b.n	80034ae <PIDOutputLimitsSet+0x34>
        pid->iTerm  = CONSTRAIN(pid->iTerm,  min, max);
 80034d4:	4634      	mov	r4, r6
 80034d6:	e7f7      	b.n	80034c8 <PIDOutputLimitsSet+0x4e>

080034d8 <PIDTuningsSet>:
    }
}

void 
PIDTuningsSet(PIDControl *pid, float kp, float ki, float kd)         	                                         
{
 80034d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034dc:	460d      	mov	r5, r1
 80034de:	4604      	mov	r4, r0
    // Check if the parameters are valid
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 80034e0:	2100      	movs	r1, #0
 80034e2:	4628      	mov	r0, r5
{
 80034e4:	4616      	mov	r6, r2
 80034e6:	461f      	mov	r7, r3
    if(kp < 0.0f || ki < 0.0f || kd < 0.0f)
 80034e8:	f7fd fde8 	bl	80010bc <__aeabi_fcmplt>
 80034ec:	bb38      	cbnz	r0, 800353e <PIDTuningsSet+0x66>
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd fde3 	bl	80010bc <__aeabi_fcmplt>
 80034f6:	bb10      	cbnz	r0, 800353e <PIDTuningsSet+0x66>
 80034f8:	2100      	movs	r1, #0
 80034fa:	4638      	mov	r0, r7
 80034fc:	f7fd fdde 	bl	80010bc <__aeabi_fcmplt>
 8003500:	b9e8      	cbnz	r0, 800353e <PIDTuningsSet+0x66>
    pid->dispKi = ki;
    pid->dispKd = kd;
    
    // Alter the parameters for PID
    pid->alteredKp = kp;
    pid->alteredKi = ki * pid->sampleTime;
 8003502:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
    pid->dispKi = ki;
 8003506:	6126      	str	r6, [r4, #16]
    pid->alteredKi = ki * pid->sampleTime;
 8003508:	4641      	mov	r1, r8
 800350a:	4630      	mov	r0, r6
    pid->dispKp = kp;
 800350c:	60e5      	str	r5, [r4, #12]
    pid->dispKd = kd;
 800350e:	6167      	str	r7, [r4, #20]
    pid->alteredKp = kp;
 8003510:	61a5      	str	r5, [r4, #24]
    pid->alteredKi = ki * pid->sampleTime;
 8003512:	f7fd fc35 	bl	8000d80 <__aeabi_fmul>
    pid->alteredKd = kd / pid->sampleTime;
 8003516:	4641      	mov	r1, r8
    pid->alteredKi = ki * pid->sampleTime;
 8003518:	61e0      	str	r0, [r4, #28]
 800351a:	4606      	mov	r6, r0
    pid->alteredKd = kd / pid->sampleTime;
 800351c:	4638      	mov	r0, r7
 800351e:	f7fd fce3 	bl	8000ee8 <__aeabi_fdiv>
    
    // Apply reverse direction to the altered values if necessary
    if(pid->controllerDirection == REVERSE)
 8003522:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    pid->alteredKd = kd / pid->sampleTime;
 8003526:	6220      	str	r0, [r4, #32]
    if(pid->controllerDirection == REVERSE)
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <PIDTuningsSet+0x66>
    {
        pid->alteredKp = -(pid->alteredKp);
 800352c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        pid->alteredKi = -(pid->alteredKi);
 8003530:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
        pid->alteredKd = -(pid->alteredKd);
 8003534:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
        pid->alteredKp = -(pid->alteredKp);
 8003538:	61a5      	str	r5, [r4, #24]
        pid->alteredKi = -(pid->alteredKi);
 800353a:	61e6      	str	r6, [r4, #28]
        pid->alteredKd = -(pid->alteredKd);
 800353c:	6220      	str	r0, [r4, #32]
 800353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003542 <PIDInit>:
{
 8003542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003546:	460e      	mov	r6, r1
    pid->iTerm = 0.0f;
 8003548:	2100      	movs	r1, #0
{
 800354a:	4617      	mov	r7, r2
 800354c:	4698      	mov	r8, r3
 800354e:	9d08      	ldr	r5, [sp, #32]
 8003550:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003554:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8003558:	4604      	mov	r4, r0
    pid->controllerDirection = controllerDirection;
 800355a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    pid->mode = mode;
 800355e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    pid->iTerm = 0.0f;
 8003562:	6241      	str	r1, [r0, #36]	; 0x24
    pid->input = 0.0f;
 8003564:	6001      	str	r1, [r0, #0]
    pid->lastInput = 0.0f;
 8003566:	6041      	str	r1, [r0, #4]
    pid->output = 0.0f;
 8003568:	6081      	str	r1, [r0, #8]
    pid->setpoint = 0.0f;
 800356a:	6341      	str	r1, [r0, #52]	; 0x34
    if(sampleTimeSeconds > 0.0f)
 800356c:	4628      	mov	r0, r5
{
 800356e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003572:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    if(sampleTimeSeconds > 0.0f)
 8003576:	f7fd fdbf 	bl	80010f8 <__aeabi_fcmpgt>
 800357a:	b168      	cbz	r0, 8003598 <PIDInit+0x56>
        pid->sampleTime = sampleTimeSeconds;
 800357c:	62a5      	str	r5, [r4, #40]	; 0x28
    PIDOutputLimitsSet(pid, minOutput, maxOutput);
 800357e:	4652      	mov	r2, sl
 8003580:	4649      	mov	r1, r9
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff ff79 	bl	800347a <PIDOutputLimitsSet>
    PIDTuningsSet(pid, kp, ki, kd);
 8003588:	4643      	mov	r3, r8
 800358a:	463a      	mov	r2, r7
 800358c:	4631      	mov	r1, r6
 800358e:	4620      	mov	r0, r4
}
 8003590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    PIDTuningsSet(pid, kp, ki, kd);
 8003594:	f7ff bfa0 	b.w	80034d8 <PIDTuningsSet>
        pid->sampleTime = 1.0f;
 8003598:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800359c:	62a3      	str	r3, [r4, #40]	; 0x28
 800359e:	e7ee      	b.n	800357e <PIDInit+0x3c>

080035a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035a4:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80035a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
 80035ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035b4:	9201      	str	r2, [sp, #4]
 80035b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b8:	6a1a      	ldr	r2, [r3, #32]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	621a      	str	r2, [r3, #32]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	f002 0201 	and.w	r2, r2, #1
 80035c6:	9202      	str	r2, [sp, #8]
 80035c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	9303      	str	r3, [sp, #12]
 80035da:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035dc:	f7fd fe0a 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80035e0:	2200      	movs	r2, #0
 80035e2:	f06f 000b 	mvn.w	r0, #11
 80035e6:	4611      	mov	r1, r2
 80035e8:	f7fd fe16 	bl	8001218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	f06f 000a 	mvn.w	r0, #10
 80035f2:	4611      	mov	r1, r2
 80035f4:	f7fd fe10 	bl	8001218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	f06f 0009 	mvn.w	r0, #9
 80035fe:	4611      	mov	r1, r2
 8003600:	f7fd fe0a 	bl	8001218 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	f06f 0004 	mvn.w	r0, #4
 800360a:	4611      	mov	r1, r2
 800360c:	f7fd fe04 	bl	8001218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003610:	2200      	movs	r2, #0
 8003612:	f06f 0003 	mvn.w	r0, #3
 8003616:	4611      	mov	r1, r2
 8003618:	f7fd fdfe 	bl	8001218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	f06f 0001 	mvn.w	r0, #1
 8003622:	4611      	mov	r1, r2
 8003624:	f7fd fdf8 	bl	8001218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	f04f 30ff 	mov.w	r0, #4294967295
 800362e:	4611      	mov	r1, r2
 8003630:	f7fd fdf2 	bl	8001218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003634:	b005      	add	sp, #20
 8003636:	f85d fb04 	ldr.w	pc, [sp], #4
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800

08003640 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003640:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 8003642:	6803      	ldr	r3, [r0, #0]
{
 8003644:	b089      	sub	sp, #36	; 0x24
  if(htim_encoder->Instance==TIM2)
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d11a      	bne.n	8003682 <HAL_TIM_Encoder_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800364c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	9b01      	ldr	r3, [sp, #4]
  
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003662:	2322      	movs	r3, #34	; 0x22
 8003664:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800366a:	2301      	movs	r3, #1
 800366c:	9305      	str	r3, [sp, #20]
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003670:	a903      	add	r1, sp, #12
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <HAL_TIM_Encoder_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003676:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003678:	f7fd fe36 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800367c:	b009      	add	sp, #36	; 0x24
 800367e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_encoder->Instance==TIM3)
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <HAL_TIM_Encoder_MspInit+0x70>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d1f9      	bne.n	800367c <HAL_TIM_Encoder_MspInit+0x3c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_TIM_Encoder_MspInit+0x74>)
 800368a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800368c:	f042 0202 	orr.w	r2, r2, #2
 8003690:	625a      	str	r2, [r3, #36]	; 0x24
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003694:	2201      	movs	r2, #1
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800369e:	23c0      	movs	r3, #192	; 0xc0
 80036a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	9304      	str	r3, [sp, #16]
 80036a8:	e7e1      	b.n	800366e <HAL_TIM_Encoder_MspInit+0x2e>
 80036aa:	bf00      	nop
 80036ac:	40020000 	.word	0x40020000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM5)
 80036ba:	6803      	ldr	r3, [r0, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_TIM_Base_MspInit+0x6c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d114      	bne.n	80036ec <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_TIM_Base_MspInit+0x70>)
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036c4:	202e      	movs	r0, #46	; 0x2e
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c8:	f042 0208 	orr.w	r2, r2, #8
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036ce:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036d2:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80036dc:	f7fd fd9c 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80036e0:	202e      	movs	r0, #46	; 0x2e
 80036e2:	f7fd fdcd 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80036e6:	b005      	add	sp, #20
 80036e8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM10)
 80036ec:	4a0f      	ldr	r2, [pc, #60]	; (800372c <HAL_TIM_Base_MspInit+0x74>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10a      	bne.n	8003708 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_TIM_Base_MspInit+0x70>)
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	621a      	str	r2, [r3, #32]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	9302      	str	r3, [sp, #8]
 8003704:	9b02      	ldr	r3, [sp, #8]
 8003706:	e7ee      	b.n	80036e6 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM11)
 8003708:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_TIM_Base_MspInit+0x78>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d1eb      	bne.n	80036e6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_TIM_Base_MspInit+0x70>)
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	f042 0210 	orr.w	r2, r2, #16
 8003716:	621a      	str	r2, [r3, #32]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	9303      	str	r3, [sp, #12]
 8003720:	9b03      	ldr	r3, [sp, #12]
}
 8003722:	e7e0      	b.n	80036e6 <HAL_TIM_Base_MspInit+0x2e>
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40023800 	.word	0x40023800
 800372c:	40010c00 	.word	0x40010c00
 8003730:	40011000 	.word	0x40011000

08003734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM10)
 8003736:	6803      	ldr	r3, [r0, #0]
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_TIM_MspPostInit+0x38>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d110      	bne.n	8003760 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM10_MspPostInit 0 */
    /**TIM10 GPIO Configuration    
    PB8     ------> TIM10_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800373e:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM11_MspPostInit 0 */
  
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003742:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800374e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003750:	a901      	add	r1, sp, #4
 8003752:	4807      	ldr	r0, [pc, #28]	; (8003770 <HAL_TIM_MspPostInit+0x3c>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003754:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003756:	f7fd fdc7 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800375a:	b007      	add	sp, #28
 800375c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM11)
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_TIM_MspPostInit+0x40>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d1f9      	bne.n	800375a <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800376a:	e7ea      	b.n	8003742 <HAL_TIM_MspPostInit+0xe>
 800376c:	40010c00 	.word	0x40010c00
 8003770:	40020400 	.word	0x40020400
 8003774:	40011000 	.word	0x40011000

08003778 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800377a:	6802      	ldr	r2, [r0, #0]
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_UART_MspInit+0x54>)
 800377e:	429a      	cmp	r2, r3
 8003780:	d120      	bne.n	80037c4 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003782:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003786:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003788:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800378a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003792:	480f      	ldr	r0, [pc, #60]	; (80037d0 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800379c:	23c0      	movs	r3, #192	; 0xc0
 800379e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a4:	2301      	movs	r3, #1
 80037a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037ac:	2307      	movs	r3, #7
 80037ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b0:	f7fd fd9a 	bl	80012e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2025      	movs	r0, #37	; 0x25
 80037b8:	4611      	mov	r1, r2
 80037ba:	f7fd fd2d 	bl	8001218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037be:	2025      	movs	r0, #37	; 0x25
 80037c0:	f7fd fd5e 	bl	8001280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037c4:	b007      	add	sp, #28
 80037c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ca:	bf00      	nop
 80037cc:	40013800 	.word	0x40013800
 80037d0:	40020400 	.word	0x40020400

080037d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80037d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037d6:	f7fd fcff 	bl	80011d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80037de:	f7fd bd7e 	b.w	80012de <HAL_SYSTICK_IRQHandler>
	...

080037e4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037e4:	4801      	ldr	r0, [pc, #4]	; (80037ec <USART1_IRQHandler+0x8>)
 80037e6:	f7ff b809 	b.w	80027fc <HAL_UART_IRQHandler>
 80037ea:	bf00      	nop
 80037ec:	200002ec 	.word	0x200002ec

080037f0 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <TIM5_IRQHandler+0x8>)
 80037f2:	f7fe bdd8 	b.w	80023a6 <HAL_TIM_IRQHandler>
 80037f6:	bf00      	nop
 80037f8:	20000260 	.word	0x20000260

080037fc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <SystemInit+0x3c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003804:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8003806:	6899      	ldr	r1, [r3, #8]
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <SystemInit+0x40>)
 800380a:	400a      	ands	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003814:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8003818:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003820:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003828:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800382e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003832:	4b03      	ldr	r3, [pc, #12]	; (8003840 <SystemInit+0x44>)
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	4770      	bx	lr
 8003838:	40023800 	.word	0x40023800
 800383c:	88ffc00c 	.word	0x88ffc00c
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003844:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003846:	e003      	b.n	8003850 <LoopCopyDataInit>

08003848 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800384a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800384c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800384e:	3104      	adds	r1, #4

08003850 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003850:	480a      	ldr	r0, [pc, #40]	; (800387c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003854:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003856:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003858:	d3f6      	bcc.n	8003848 <CopyDataInit>
  ldr r2, =_sbss
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800385c:	e002      	b.n	8003864 <LoopFillZerobss>

0800385e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003860:	f842 3b04 	str.w	r3, [r2], #4

08003864 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003868:	d3f9      	bcc.n	800385e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800386a:	f7ff ffc7 	bl	80037fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386e:	f000 f811 	bl	8003894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003872:	f7ff f99b 	bl	8002bac <main>
  bx lr
 8003876:	4770      	bx	lr
  ldr r3, =_sidata
 8003878:	08005860 	.word	0x08005860
  ldr r0, =_sdata
 800387c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003880:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8003884:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 8003888:	2000047c 	.word	0x2000047c

0800388c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC1_IRQHandler>

0800388e <atof>:
 800388e:	2100      	movs	r1, #0
 8003890:	f000 be4e 	b.w	8004530 <strtod>

08003894 <__libc_init_array>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	2500      	movs	r5, #0
 8003898:	4e0c      	ldr	r6, [pc, #48]	; (80038cc <__libc_init_array+0x38>)
 800389a:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <__libc_init_array+0x3c>)
 800389c:	1ba4      	subs	r4, r4, r6
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	42a5      	cmp	r5, r4
 80038a2:	d109      	bne.n	80038b8 <__libc_init_array+0x24>
 80038a4:	f001 fe82 	bl	80055ac <_init>
 80038a8:	2500      	movs	r5, #0
 80038aa:	4e0a      	ldr	r6, [pc, #40]	; (80038d4 <__libc_init_array+0x40>)
 80038ac:	4c0a      	ldr	r4, [pc, #40]	; (80038d8 <__libc_init_array+0x44>)
 80038ae:	1ba4      	subs	r4, r4, r6
 80038b0:	10a4      	asrs	r4, r4, #2
 80038b2:	42a5      	cmp	r5, r4
 80038b4:	d105      	bne.n	80038c2 <__libc_init_array+0x2e>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038bc:	4798      	blx	r3
 80038be:	3501      	adds	r5, #1
 80038c0:	e7ee      	b.n	80038a0 <__libc_init_array+0xc>
 80038c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c6:	4798      	blx	r3
 80038c8:	3501      	adds	r5, #1
 80038ca:	e7f2      	b.n	80038b2 <__libc_init_array+0x1e>
 80038cc:	08005858 	.word	0x08005858
 80038d0:	08005858 	.word	0x08005858
 80038d4:	08005858 	.word	0x08005858
 80038d8:	0800585c 	.word	0x0800585c

080038dc <memset>:
 80038dc:	4603      	mov	r3, r0
 80038de:	4402      	add	r2, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <strcpy>:
 80038ec:	4603      	mov	r3, r0
 80038ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038f2:	f803 2b01 	strb.w	r2, [r3], #1
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	d1f9      	bne.n	80038ee <strcpy+0x2>
 80038fa:	4770      	bx	lr

080038fc <sulp>:
 80038fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003900:	460f      	mov	r7, r1
 8003902:	4690      	mov	r8, r2
 8003904:	f001 fc7e 	bl	8005204 <__ulp>
 8003908:	4604      	mov	r4, r0
 800390a:	460d      	mov	r5, r1
 800390c:	f1b8 0f00 	cmp.w	r8, #0
 8003910:	d011      	beq.n	8003936 <sulp+0x3a>
 8003912:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003916:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800391a:	2b00      	cmp	r3, #0
 800391c:	dd0b      	ble.n	8003936 <sulp+0x3a>
 800391e:	2400      	movs	r4, #0
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003926:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800392a:	4622      	mov	r2, r4
 800392c:	462b      	mov	r3, r5
 800392e:	f7fc fde7 	bl	8000500 <__aeabi_dmul>
 8003932:	4604      	mov	r4, r0
 8003934:	460d      	mov	r5, r1
 8003936:	4620      	mov	r0, r4
 8003938:	4629      	mov	r1, r5
 800393a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003940 <_strtod_l>:
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	4699      	mov	r9, r3
 8003946:	2300      	movs	r3, #0
 8003948:	b09f      	sub	sp, #124	; 0x7c
 800394a:	4680      	mov	r8, r0
 800394c:	4648      	mov	r0, r9
 800394e:	460c      	mov	r4, r1
 8003950:	9215      	str	r2, [sp, #84]	; 0x54
 8003952:	931a      	str	r3, [sp, #104]	; 0x68
 8003954:	f001 f96f 	bl	8004c36 <__localeconv_l>
 8003958:	4607      	mov	r7, r0
 800395a:	6800      	ldr	r0, [r0, #0]
 800395c:	f7fc fc10 	bl	8000180 <strlen>
 8003960:	f04f 0a00 	mov.w	sl, #0
 8003964:	4605      	mov	r5, r0
 8003966:	f04f 0b00 	mov.w	fp, #0
 800396a:	9419      	str	r4, [sp, #100]	; 0x64
 800396c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	2a0d      	cmp	r2, #13
 8003972:	d833      	bhi.n	80039dc <_strtod_l+0x9c>
 8003974:	2a09      	cmp	r2, #9
 8003976:	d237      	bcs.n	80039e8 <_strtod_l+0xa8>
 8003978:	2a00      	cmp	r2, #0
 800397a:	d03f      	beq.n	80039fc <_strtod_l+0xbc>
 800397c:	2300      	movs	r3, #0
 800397e:	9309      	str	r3, [sp, #36]	; 0x24
 8003980:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003982:	7833      	ldrb	r3, [r6, #0]
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	f040 8101 	bne.w	8003b8c <_strtod_l+0x24c>
 800398a:	7873      	ldrb	r3, [r6, #1]
 800398c:	2b58      	cmp	r3, #88	; 0x58
 800398e:	d001      	beq.n	8003994 <_strtod_l+0x54>
 8003990:	2b78      	cmp	r3, #120	; 0x78
 8003992:	d16b      	bne.n	8003a6c <_strtod_l+0x12c>
 8003994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003996:	f8cd 9008 	str.w	r9, [sp, #8]
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	ab1a      	add	r3, sp, #104	; 0x68
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4aaa      	ldr	r2, [pc, #680]	; (8003c4c <_strtod_l+0x30c>)
 80039a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80039a4:	a919      	add	r1, sp, #100	; 0x64
 80039a6:	4640      	mov	r0, r8
 80039a8:	f000 fe71 	bl	800468e <__gethex>
 80039ac:	f010 0407 	ands.w	r4, r0, #7
 80039b0:	4605      	mov	r5, r0
 80039b2:	d005      	beq.n	80039c0 <_strtod_l+0x80>
 80039b4:	2c06      	cmp	r4, #6
 80039b6:	d12b      	bne.n	8003a10 <_strtod_l+0xd0>
 80039b8:	2300      	movs	r3, #0
 80039ba:	3601      	adds	r6, #1
 80039bc:	9619      	str	r6, [sp, #100]	; 0x64
 80039be:	9309      	str	r3, [sp, #36]	; 0x24
 80039c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 859d 	bne.w	8004502 <_strtod_l+0xbc2>
 80039c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ca:	b1e3      	cbz	r3, 8003a06 <_strtod_l+0xc6>
 80039cc:	4652      	mov	r2, sl
 80039ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	b01f      	add	sp, #124	; 0x7c
 80039d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039dc:	2a2b      	cmp	r2, #43	; 0x2b
 80039de:	d006      	beq.n	80039ee <_strtod_l+0xae>
 80039e0:	2a2d      	cmp	r2, #45	; 0x2d
 80039e2:	d013      	beq.n	8003a0c <_strtod_l+0xcc>
 80039e4:	2a20      	cmp	r2, #32
 80039e6:	d1c9      	bne.n	800397c <_strtod_l+0x3c>
 80039e8:	3301      	adds	r3, #1
 80039ea:	9319      	str	r3, [sp, #100]	; 0x64
 80039ec:	e7be      	b.n	800396c <_strtod_l+0x2c>
 80039ee:	2200      	movs	r2, #0
 80039f0:	9209      	str	r2, [sp, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	9219      	str	r2, [sp, #100]	; 0x64
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1c1      	bne.n	8003980 <_strtod_l+0x40>
 80039fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039fe:	9419      	str	r4, [sp, #100]	; 0x64
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 857c 	bne.w	80044fe <_strtod_l+0xbbe>
 8003a06:	4652      	mov	r2, sl
 8003a08:	465b      	mov	r3, fp
 8003a0a:	e7e2      	b.n	80039d2 <_strtod_l+0x92>
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	e7ef      	b.n	80039f0 <_strtod_l+0xb0>
 8003a10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003a12:	b13a      	cbz	r2, 8003a24 <_strtod_l+0xe4>
 8003a14:	2135      	movs	r1, #53	; 0x35
 8003a16:	a81c      	add	r0, sp, #112	; 0x70
 8003a18:	f001 fce1 	bl	80053de <__copybits>
 8003a1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003a1e:	4640      	mov	r0, r8
 8003a20:	f001 f965 	bl	8004cee <_Bfree>
 8003a24:	3c01      	subs	r4, #1
 8003a26:	2c04      	cmp	r4, #4
 8003a28:	d808      	bhi.n	8003a3c <_strtod_l+0xfc>
 8003a2a:	e8df f004 	tbb	[pc, r4]
 8003a2e:	030c      	.short	0x030c
 8003a30:	1a17      	.short	0x1a17
 8003a32:	0c          	.byte	0x0c
 8003a33:	00          	.byte	0x00
 8003a34:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8003a38:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8003a3c:	0729      	lsls	r1, r5, #28
 8003a3e:	d5bf      	bpl.n	80039c0 <_strtod_l+0x80>
 8003a40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003a44:	e7bc      	b.n	80039c0 <_strtod_l+0x80>
 8003a46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003a4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003a52:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8003a56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003a5a:	e7ef      	b.n	8003a3c <_strtod_l+0xfc>
 8003a5c:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8003c58 <_strtod_l+0x318>
 8003a60:	e7ec      	b.n	8003a3c <_strtod_l+0xfc>
 8003a62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003a66:	f04f 3aff 	mov.w	sl, #4294967295
 8003a6a:	e7e7      	b.n	8003a3c <_strtod_l+0xfc>
 8003a6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	9219      	str	r2, [sp, #100]	; 0x64
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d0f9      	beq.n	8003a6c <_strtod_l+0x12c>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0a1      	beq.n	80039c0 <_strtod_l+0x80>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	9308      	str	r3, [sp, #32]
 8003a80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a82:	220a      	movs	r2, #10
 8003a84:	930a      	str	r3, [sp, #40]	; 0x28
 8003a86:	2300      	movs	r3, #0
 8003a88:	9305      	str	r3, [sp, #20]
 8003a8a:	9306      	str	r3, [sp, #24]
 8003a8c:	9304      	str	r3, [sp, #16]
 8003a8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003a90:	7806      	ldrb	r6, [r0, #0]
 8003a92:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003a96:	b2d9      	uxtb	r1, r3
 8003a98:	2909      	cmp	r1, #9
 8003a9a:	d979      	bls.n	8003b90 <_strtod_l+0x250>
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	f001 fd54 	bl	800554c <strncmp>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	f000 8085 	beq.w	8003bb4 <_strtod_l+0x274>
 8003aaa:	2000      	movs	r0, #0
 8003aac:	4633      	mov	r3, r6
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	9d04      	ldr	r5, [sp, #16]
 8003ab4:	2b65      	cmp	r3, #101	; 0x65
 8003ab6:	d002      	beq.n	8003abe <_strtod_l+0x17e>
 8003ab8:	2b45      	cmp	r3, #69	; 0x45
 8003aba:	f040 80ef 	bne.w	8003c9c <_strtod_l+0x35c>
 8003abe:	b925      	cbnz	r5, 8003aca <_strtod_l+0x18a>
 8003ac0:	b910      	cbnz	r0, 8003ac8 <_strtod_l+0x188>
 8003ac2:	9b08      	ldr	r3, [sp, #32]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d099      	beq.n	80039fc <_strtod_l+0xbc>
 8003ac8:	2500      	movs	r5, #0
 8003aca:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8003acc:	1c63      	adds	r3, r4, #1
 8003ace:	9319      	str	r3, [sp, #100]	; 0x64
 8003ad0:	7863      	ldrb	r3, [r4, #1]
 8003ad2:	2b2b      	cmp	r3, #43	; 0x2b
 8003ad4:	f000 80cf 	beq.w	8003c76 <_strtod_l+0x336>
 8003ad8:	2b2d      	cmp	r3, #45	; 0x2d
 8003ada:	f000 80d2 	beq.w	8003c82 <_strtod_l+0x342>
 8003ade:	2600      	movs	r6, #0
 8003ae0:	9607      	str	r6, [sp, #28]
 8003ae2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003ae6:	2e09      	cmp	r6, #9
 8003ae8:	f200 80d7 	bhi.w	8003c9a <_strtod_l+0x35a>
 8003aec:	2b30      	cmp	r3, #48	; 0x30
 8003aee:	f000 80ca 	beq.w	8003c86 <_strtod_l+0x346>
 8003af2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8003af6:	2e08      	cmp	r6, #8
 8003af8:	f200 80d0 	bhi.w	8003c9c <_strtod_l+0x35c>
 8003afc:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	461f      	mov	r7, r3
 8003b08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b0a:	1c5e      	adds	r6, r3, #1
 8003b0c:	9619      	str	r6, [sp, #100]	; 0x64
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8003b14:	f1b9 0f09 	cmp.w	r9, #9
 8003b18:	f240 80ba 	bls.w	8003c90 <_strtod_l+0x350>
 8003b1c:	1bf6      	subs	r6, r6, r7
 8003b1e:	2e08      	cmp	r6, #8
 8003b20:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8003b24:	dc02      	bgt.n	8003b2c <_strtod_l+0x1ec>
 8003b26:	45f1      	cmp	r9, lr
 8003b28:	bfa8      	it	ge
 8003b2a:	46f1      	movge	r9, lr
 8003b2c:	9e07      	ldr	r6, [sp, #28]
 8003b2e:	b10e      	cbz	r6, 8003b34 <_strtod_l+0x1f4>
 8003b30:	f1c9 0900 	rsb	r9, r9, #0
 8003b34:	2d00      	cmp	r5, #0
 8003b36:	f040 80d7 	bne.w	8003ce8 <_strtod_l+0x3a8>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	f47f af40 	bne.w	80039c0 <_strtod_l+0x80>
 8003b40:	9a08      	ldr	r2, [sp, #32]
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	f47f af3c 	bne.w	80039c0 <_strtod_l+0x80>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	f47f af57 	bne.w	80039fc <_strtod_l+0xbc>
 8003b4e:	2b4e      	cmp	r3, #78	; 0x4e
 8003b50:	f000 80ad 	beq.w	8003cae <_strtod_l+0x36e>
 8003b54:	f300 80a5 	bgt.w	8003ca2 <_strtod_l+0x362>
 8003b58:	2b49      	cmp	r3, #73	; 0x49
 8003b5a:	f47f af4f 	bne.w	80039fc <_strtod_l+0xbc>
 8003b5e:	493c      	ldr	r1, [pc, #240]	; (8003c50 <_strtod_l+0x310>)
 8003b60:	a819      	add	r0, sp, #100	; 0x64
 8003b62:	f000 ffc5 	bl	8004af0 <__match>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	f43f af48 	beq.w	80039fc <_strtod_l+0xbc>
 8003b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b6e:	4939      	ldr	r1, [pc, #228]	; (8003c54 <_strtod_l+0x314>)
 8003b70:	3b01      	subs	r3, #1
 8003b72:	a819      	add	r0, sp, #100	; 0x64
 8003b74:	9319      	str	r3, [sp, #100]	; 0x64
 8003b76:	f000 ffbb 	bl	8004af0 <__match>
 8003b7a:	b910      	cbnz	r0, 8003b82 <_strtod_l+0x242>
 8003b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b7e:	3301      	adds	r3, #1
 8003b80:	9319      	str	r3, [sp, #100]	; 0x64
 8003b82:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8003c58 <_strtod_l+0x318>
 8003b86:	f04f 0a00 	mov.w	sl, #0
 8003b8a:	e719      	b.n	80039c0 <_strtod_l+0x80>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e776      	b.n	8003a7e <_strtod_l+0x13e>
 8003b90:	9904      	ldr	r1, [sp, #16]
 8003b92:	3001      	adds	r0, #1
 8003b94:	2908      	cmp	r1, #8
 8003b96:	bfd5      	itete	le
 8003b98:	9906      	ldrle	r1, [sp, #24]
 8003b9a:	9905      	ldrgt	r1, [sp, #20]
 8003b9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003ba0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003ba4:	bfd4      	ite	le
 8003ba6:	9306      	strle	r3, [sp, #24]
 8003ba8:	9305      	strgt	r3, [sp, #20]
 8003baa:	9b04      	ldr	r3, [sp, #16]
 8003bac:	9019      	str	r0, [sp, #100]	; 0x64
 8003bae:	3301      	adds	r3, #1
 8003bb0:	9304      	str	r3, [sp, #16]
 8003bb2:	e76c      	b.n	8003a8e <_strtod_l+0x14e>
 8003bb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bb6:	195a      	adds	r2, r3, r5
 8003bb8:	9219      	str	r2, [sp, #100]	; 0x64
 8003bba:	9a04      	ldr	r2, [sp, #16]
 8003bbc:	5d5b      	ldrb	r3, [r3, r5]
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d154      	bne.n	8003c6c <_strtod_l+0x32c>
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	2b30      	cmp	r3, #48	; 0x30
 8003bc6:	d02a      	beq.n	8003c1e <_strtod_l+0x2de>
 8003bc8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003bcc:	2a08      	cmp	r2, #8
 8003bce:	f200 849d 	bhi.w	800450c <_strtod_l+0xbcc>
 8003bd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4605      	mov	r5, r0
 8003bdc:	3b30      	subs	r3, #48	; 0x30
 8003bde:	f100 0101 	add.w	r1, r0, #1
 8003be2:	d011      	beq.n	8003c08 <_strtod_l+0x2c8>
 8003be4:	440a      	add	r2, r1
 8003be6:	260a      	movs	r6, #10
 8003be8:	4629      	mov	r1, r5
 8003bea:	eb00 0c05 	add.w	ip, r0, r5
 8003bee:	4561      	cmp	r1, ip
 8003bf0:	d11b      	bne.n	8003c2a <_strtod_l+0x2ea>
 8003bf2:	4428      	add	r0, r5
 8003bf4:	2808      	cmp	r0, #8
 8003bf6:	f100 0501 	add.w	r5, r0, #1
 8003bfa:	dc2f      	bgt.n	8003c5c <_strtod_l+0x31c>
 8003bfc:	210a      	movs	r1, #10
 8003bfe:	9806      	ldr	r0, [sp, #24]
 8003c00:	fb01 3300 	mla	r3, r1, r0, r3
 8003c04:	9306      	str	r3, [sp, #24]
 8003c06:	2100      	movs	r1, #0
 8003c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c0a:	1c58      	adds	r0, r3, #1
 8003c0c:	9019      	str	r0, [sp, #100]	; 0x64
 8003c0e:	4608      	mov	r0, r1
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003c16:	2909      	cmp	r1, #9
 8003c18:	d9e0      	bls.n	8003bdc <_strtod_l+0x29c>
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	e74a      	b.n	8003ab4 <_strtod_l+0x174>
 8003c1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c20:	3001      	adds	r0, #1
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	9219      	str	r2, [sp, #100]	; 0x64
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	e7cc      	b.n	8003bc4 <_strtod_l+0x284>
 8003c2a:	3101      	adds	r1, #1
 8003c2c:	f101 3eff 	add.w	lr, r1, #4294967295
 8003c30:	f1be 0f08 	cmp.w	lr, #8
 8003c34:	dc03      	bgt.n	8003c3e <_strtod_l+0x2fe>
 8003c36:	9f06      	ldr	r7, [sp, #24]
 8003c38:	4377      	muls	r7, r6
 8003c3a:	9706      	str	r7, [sp, #24]
 8003c3c:	e7d7      	b.n	8003bee <_strtod_l+0x2ae>
 8003c3e:	2910      	cmp	r1, #16
 8003c40:	bfde      	ittt	le
 8003c42:	9f05      	ldrle	r7, [sp, #20]
 8003c44:	4377      	mulle	r7, r6
 8003c46:	9705      	strle	r7, [sp, #20]
 8003c48:	e7d1      	b.n	8003bee <_strtod_l+0x2ae>
 8003c4a:	bf00      	nop
 8003c4c:	080055f8 	.word	0x080055f8
 8003c50:	080055eb 	.word	0x080055eb
 8003c54:	080055ee 	.word	0x080055ee
 8003c58:	7ff00000 	.word	0x7ff00000
 8003c5c:	2d10      	cmp	r5, #16
 8003c5e:	bfdf      	itttt	le
 8003c60:	210a      	movle	r1, #10
 8003c62:	9805      	ldrle	r0, [sp, #20]
 8003c64:	fb01 3300 	mlale	r3, r1, r0, r3
 8003c68:	9305      	strle	r3, [sp, #20]
 8003c6a:	e7cc      	b.n	8003c06 <_strtod_l+0x2c6>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	9d04      	ldr	r5, [sp, #16]
 8003c70:	e7cf      	b.n	8003c12 <_strtod_l+0x2d2>
 8003c72:	2101      	movs	r1, #1
 8003c74:	e724      	b.n	8003ac0 <_strtod_l+0x180>
 8003c76:	2300      	movs	r3, #0
 8003c78:	9307      	str	r3, [sp, #28]
 8003c7a:	1ca3      	adds	r3, r4, #2
 8003c7c:	9319      	str	r3, [sp, #100]	; 0x64
 8003c7e:	78a3      	ldrb	r3, [r4, #2]
 8003c80:	e72f      	b.n	8003ae2 <_strtod_l+0x1a2>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e7f8      	b.n	8003c78 <_strtod_l+0x338>
 8003c86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c88:	1c5e      	adds	r6, r3, #1
 8003c8a:	9619      	str	r6, [sp, #100]	; 0x64
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	e72d      	b.n	8003aec <_strtod_l+0x1ac>
 8003c90:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8003c94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003c98:	e736      	b.n	8003b08 <_strtod_l+0x1c8>
 8003c9a:	9419      	str	r4, [sp, #100]	; 0x64
 8003c9c:	f04f 0900 	mov.w	r9, #0
 8003ca0:	e748      	b.n	8003b34 <_strtod_l+0x1f4>
 8003ca2:	2b69      	cmp	r3, #105	; 0x69
 8003ca4:	f43f af5b 	beq.w	8003b5e <_strtod_l+0x21e>
 8003ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8003caa:	f47f aea7 	bne.w	80039fc <_strtod_l+0xbc>
 8003cae:	498c      	ldr	r1, [pc, #560]	; (8003ee0 <_strtod_l+0x5a0>)
 8003cb0:	a819      	add	r0, sp, #100	; 0x64
 8003cb2:	f000 ff1d 	bl	8004af0 <__match>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	f43f aea0 	beq.w	80039fc <_strtod_l+0xbc>
 8003cbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b28      	cmp	r3, #40	; 0x28
 8003cc2:	d10e      	bne.n	8003ce2 <_strtod_l+0x3a2>
 8003cc4:	aa1c      	add	r2, sp, #112	; 0x70
 8003cc6:	4987      	ldr	r1, [pc, #540]	; (8003ee4 <_strtod_l+0x5a4>)
 8003cc8:	a819      	add	r0, sp, #100	; 0x64
 8003cca:	f000 ff24 	bl	8004b16 <__hexnan>
 8003cce:	2805      	cmp	r0, #5
 8003cd0:	d107      	bne.n	8003ce2 <_strtod_l+0x3a2>
 8003cd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cd4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8003cd8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003cdc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003ce0:	e66e      	b.n	80039c0 <_strtod_l+0x80>
 8003ce2:	f8df b210 	ldr.w	fp, [pc, #528]	; 8003ef4 <_strtod_l+0x5b4>
 8003ce6:	e74e      	b.n	8003b86 <_strtod_l+0x246>
 8003ce8:	9b04      	ldr	r3, [sp, #16]
 8003cea:	462c      	mov	r4, r5
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf08      	it	eq
 8003cf0:	462b      	moveq	r3, r5
 8003cf2:	2d10      	cmp	r5, #16
 8003cf4:	bfa8      	it	ge
 8003cf6:	2410      	movge	r4, #16
 8003cf8:	9806      	ldr	r0, [sp, #24]
 8003cfa:	eba9 0902 	sub.w	r9, r9, r2
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	f7fc fb88 	bl	8000414 <__aeabi_ui2d>
 8003d04:	2c09      	cmp	r4, #9
 8003d06:	4682      	mov	sl, r0
 8003d08:	468b      	mov	fp, r1
 8003d0a:	dd13      	ble.n	8003d34 <_strtod_l+0x3f4>
 8003d0c:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <_strtod_l+0x5a8>)
 8003d0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003d16:	f7fc fbf3 	bl	8000500 <__aeabi_dmul>
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	9805      	ldr	r0, [sp, #20]
 8003d1e:	460f      	mov	r7, r1
 8003d20:	f7fc fb78 	bl	8000414 <__aeabi_ui2d>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4630      	mov	r0, r6
 8003d2a:	4639      	mov	r1, r7
 8003d2c:	f7fc fa36 	bl	800019c <__adddf3>
 8003d30:	4682      	mov	sl, r0
 8003d32:	468b      	mov	fp, r1
 8003d34:	2d0f      	cmp	r5, #15
 8003d36:	dc36      	bgt.n	8003da6 <_strtod_l+0x466>
 8003d38:	f1b9 0f00 	cmp.w	r9, #0
 8003d3c:	f43f ae40 	beq.w	80039c0 <_strtod_l+0x80>
 8003d40:	dd24      	ble.n	8003d8c <_strtod_l+0x44c>
 8003d42:	f1b9 0f16 	cmp.w	r9, #22
 8003d46:	dc0b      	bgt.n	8003d60 <_strtod_l+0x420>
 8003d48:	4652      	mov	r2, sl
 8003d4a:	465b      	mov	r3, fp
 8003d4c:	4d66      	ldr	r5, [pc, #408]	; (8003ee8 <_strtod_l+0x5a8>)
 8003d4e:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8003d52:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003d56:	f7fc fbd3 	bl	8000500 <__aeabi_dmul>
 8003d5a:	4682      	mov	sl, r0
 8003d5c:	468b      	mov	fp, r1
 8003d5e:	e62f      	b.n	80039c0 <_strtod_l+0x80>
 8003d60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003d64:	4599      	cmp	r9, r3
 8003d66:	dc1e      	bgt.n	8003da6 <_strtod_l+0x466>
 8003d68:	4c5f      	ldr	r4, [pc, #380]	; (8003ee8 <_strtod_l+0x5a8>)
 8003d6a:	f1c5 050f 	rsb	r5, r5, #15
 8003d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003d72:	eba9 0505 	sub.w	r5, r9, r5
 8003d76:	4652      	mov	r2, sl
 8003d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d7c:	465b      	mov	r3, fp
 8003d7e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003d82:	f7fc fbbd 	bl	8000500 <__aeabi_dmul>
 8003d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d8a:	e7e4      	b.n	8003d56 <_strtod_l+0x416>
 8003d8c:	f119 0f16 	cmn.w	r9, #22
 8003d90:	db09      	blt.n	8003da6 <_strtod_l+0x466>
 8003d92:	4d55      	ldr	r5, [pc, #340]	; (8003ee8 <_strtod_l+0x5a8>)
 8003d94:	4650      	mov	r0, sl
 8003d96:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8003d9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003d9e:	4659      	mov	r1, fp
 8003da0:	f7fc fcd8 	bl	8000754 <__aeabi_ddiv>
 8003da4:	e7d9      	b.n	8003d5a <_strtod_l+0x41a>
 8003da6:	1b2c      	subs	r4, r5, r4
 8003da8:	444c      	add	r4, r9
 8003daa:	2c00      	cmp	r4, #0
 8003dac:	dd73      	ble.n	8003e96 <_strtod_l+0x556>
 8003dae:	f014 030f 	ands.w	r3, r4, #15
 8003db2:	d00a      	beq.n	8003dca <_strtod_l+0x48a>
 8003db4:	494c      	ldr	r1, [pc, #304]	; (8003ee8 <_strtod_l+0x5a8>)
 8003db6:	4652      	mov	r2, sl
 8003db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc0:	465b      	mov	r3, fp
 8003dc2:	f7fc fb9d 	bl	8000500 <__aeabi_dmul>
 8003dc6:	4682      	mov	sl, r0
 8003dc8:	468b      	mov	fp, r1
 8003dca:	f034 040f 	bics.w	r4, r4, #15
 8003dce:	d054      	beq.n	8003e7a <_strtod_l+0x53a>
 8003dd0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8003dd4:	dd27      	ble.n	8003e26 <_strtod_l+0x4e6>
 8003dd6:	f04f 0900 	mov.w	r9, #0
 8003dda:	f8cd 9010 	str.w	r9, [sp, #16]
 8003dde:	f8cd 901c 	str.w	r9, [sp, #28]
 8003de2:	f8cd 9018 	str.w	r9, [sp, #24]
 8003de6:	2322      	movs	r3, #34	; 0x22
 8003de8:	f04f 0a00 	mov.w	sl, #0
 8003dec:	f8df b108 	ldr.w	fp, [pc, #264]	; 8003ef8 <_strtod_l+0x5b8>
 8003df0:	f8c8 3000 	str.w	r3, [r8]
 8003df4:	9b07      	ldr	r3, [sp, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f43f ade2 	beq.w	80039c0 <_strtod_l+0x80>
 8003dfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003dfe:	4640      	mov	r0, r8
 8003e00:	f000 ff75 	bl	8004cee <_Bfree>
 8003e04:	9906      	ldr	r1, [sp, #24]
 8003e06:	4640      	mov	r0, r8
 8003e08:	f000 ff71 	bl	8004cee <_Bfree>
 8003e0c:	9904      	ldr	r1, [sp, #16]
 8003e0e:	4640      	mov	r0, r8
 8003e10:	f000 ff6d 	bl	8004cee <_Bfree>
 8003e14:	9907      	ldr	r1, [sp, #28]
 8003e16:	4640      	mov	r0, r8
 8003e18:	f000 ff69 	bl	8004cee <_Bfree>
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f000 ff65 	bl	8004cee <_Bfree>
 8003e24:	e5cc      	b.n	80039c0 <_strtod_l+0x80>
 8003e26:	2300      	movs	r3, #0
 8003e28:	4650      	mov	r0, sl
 8003e2a:	4659      	mov	r1, fp
 8003e2c:	461f      	mov	r7, r3
 8003e2e:	4e2f      	ldr	r6, [pc, #188]	; (8003eec <_strtod_l+0x5ac>)
 8003e30:	1124      	asrs	r4, r4, #4
 8003e32:	2c01      	cmp	r4, #1
 8003e34:	dc24      	bgt.n	8003e80 <_strtod_l+0x540>
 8003e36:	b10b      	cbz	r3, 8003e3c <_strtod_l+0x4fc>
 8003e38:	4682      	mov	sl, r0
 8003e3a:	468b      	mov	fp, r1
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <_strtod_l+0x5ac>)
 8003e3e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003e42:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003e46:	4652      	mov	r2, sl
 8003e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e4c:	465b      	mov	r3, fp
 8003e4e:	f7fc fb57 	bl	8000500 <__aeabi_dmul>
 8003e52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e56:	468b      	mov	fp, r1
 8003e58:	460a      	mov	r2, r1
 8003e5a:	0d1b      	lsrs	r3, r3, #20
 8003e5c:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <_strtod_l+0x5b0>)
 8003e5e:	051b      	lsls	r3, r3, #20
 8003e60:	428b      	cmp	r3, r1
 8003e62:	4682      	mov	sl, r0
 8003e64:	d8b7      	bhi.n	8003dd6 <_strtod_l+0x496>
 8003e66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003e6a:	428b      	cmp	r3, r1
 8003e6c:	bf86      	itte	hi
 8003e6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8003e72:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 8003efc <_strtod_l+0x5bc>
 8003e76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9305      	str	r3, [sp, #20]
 8003e7e:	e070      	b.n	8003f62 <_strtod_l+0x622>
 8003e80:	07e2      	lsls	r2, r4, #31
 8003e82:	d504      	bpl.n	8003e8e <_strtod_l+0x54e>
 8003e84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e88:	f7fc fb3a 	bl	8000500 <__aeabi_dmul>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	3701      	adds	r7, #1
 8003e90:	1064      	asrs	r4, r4, #1
 8003e92:	3608      	adds	r6, #8
 8003e94:	e7cd      	b.n	8003e32 <_strtod_l+0x4f2>
 8003e96:	d0f0      	beq.n	8003e7a <_strtod_l+0x53a>
 8003e98:	4264      	negs	r4, r4
 8003e9a:	f014 020f 	ands.w	r2, r4, #15
 8003e9e:	d00a      	beq.n	8003eb6 <_strtod_l+0x576>
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <_strtod_l+0x5a8>)
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc fc51 	bl	8000754 <__aeabi_ddiv>
 8003eb2:	4682      	mov	sl, r0
 8003eb4:	468b      	mov	fp, r1
 8003eb6:	1124      	asrs	r4, r4, #4
 8003eb8:	d0df      	beq.n	8003e7a <_strtod_l+0x53a>
 8003eba:	2c1f      	cmp	r4, #31
 8003ebc:	dd20      	ble.n	8003f00 <_strtod_l+0x5c0>
 8003ebe:	f04f 0900 	mov.w	r9, #0
 8003ec2:	f8cd 9010 	str.w	r9, [sp, #16]
 8003ec6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003eca:	f8cd 9018 	str.w	r9, [sp, #24]
 8003ece:	2322      	movs	r3, #34	; 0x22
 8003ed0:	f04f 0a00 	mov.w	sl, #0
 8003ed4:	f04f 0b00 	mov.w	fp, #0
 8003ed8:	f8c8 3000 	str.w	r3, [r8]
 8003edc:	e78a      	b.n	8003df4 <_strtod_l+0x4b4>
 8003ede:	bf00      	nop
 8003ee0:	080055f4 	.word	0x080055f4
 8003ee4:	0800560c 	.word	0x0800560c
 8003ee8:	08005680 	.word	0x08005680
 8003eec:	08005658 	.word	0x08005658
 8003ef0:	7ca00000 	.word	0x7ca00000
 8003ef4:	fff80000 	.word	0xfff80000
 8003ef8:	7ff00000 	.word	0x7ff00000
 8003efc:	7fefffff 	.word	0x7fefffff
 8003f00:	f014 0310 	ands.w	r3, r4, #16
 8003f04:	bf18      	it	ne
 8003f06:	236a      	movne	r3, #106	; 0x6a
 8003f08:	4650      	mov	r0, sl
 8003f0a:	9305      	str	r3, [sp, #20]
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4e9f      	ldr	r6, [pc, #636]	; (8004190 <_strtod_l+0x850>)
 8003f12:	2c00      	cmp	r4, #0
 8003f14:	f300 8109 	bgt.w	800412a <_strtod_l+0x7ea>
 8003f18:	b10b      	cbz	r3, 8003f1e <_strtod_l+0x5de>
 8003f1a:	4682      	mov	sl, r0
 8003f1c:	468b      	mov	fp, r1
 8003f1e:	9b05      	ldr	r3, [sp, #20]
 8003f20:	b1bb      	cbz	r3, 8003f52 <_strtod_l+0x612>
 8003f22:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003f26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	dd10      	ble.n	8003f52 <_strtod_l+0x612>
 8003f30:	2b1f      	cmp	r3, #31
 8003f32:	f340 8104 	ble.w	800413e <_strtod_l+0x7fe>
 8003f36:	2b34      	cmp	r3, #52	; 0x34
 8003f38:	bfd8      	it	le
 8003f3a:	f04f 32ff 	movle.w	r2, #4294967295
 8003f3e:	f04f 0a00 	mov.w	sl, #0
 8003f42:	bfcf      	iteee	gt
 8003f44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003f48:	3b20      	suble	r3, #32
 8003f4a:	fa02 f303 	lslle.w	r3, r2, r3
 8003f4e:	ea03 0b01 	andle.w	fp, r3, r1
 8003f52:	2200      	movs	r2, #0
 8003f54:	2300      	movs	r3, #0
 8003f56:	4650      	mov	r0, sl
 8003f58:	4659      	mov	r1, fp
 8003f5a:	f7fc fd39 	bl	80009d0 <__aeabi_dcmpeq>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d1ad      	bne.n	8003ebe <_strtod_l+0x57e>
 8003f62:	9b06      	ldr	r3, [sp, #24]
 8003f64:	9a04      	ldr	r2, [sp, #16]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	f000 ff10 	bl	8004d92 <__s2b>
 8003f72:	9007      	str	r0, [sp, #28]
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f43f af2e 	beq.w	8003dd6 <_strtod_l+0x496>
 8003f7a:	f1b9 0f00 	cmp.w	r9, #0
 8003f7e:	f1c9 0300 	rsb	r3, r9, #0
 8003f82:	bfa8      	it	ge
 8003f84:	2300      	movge	r3, #0
 8003f86:	930e      	str	r3, [sp, #56]	; 0x38
 8003f88:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8003f8c:	f04f 0900 	mov.w	r9, #0
 8003f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f92:	f8cd 9010 	str.w	r9, [sp, #16]
 8003f96:	9b07      	ldr	r3, [sp, #28]
 8003f98:	4640      	mov	r0, r8
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	f000 fe73 	bl	8004c86 <_Balloc>
 8003fa0:	9006      	str	r0, [sp, #24]
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	f43f af1f 	beq.w	8003de6 <_strtod_l+0x4a6>
 8003fa8:	9b07      	ldr	r3, [sp, #28]
 8003faa:	300c      	adds	r0, #12
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	f103 010c 	add.w	r1, r3, #12
 8003fb2:	3202      	adds	r2, #2
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	f000 fe5b 	bl	8004c70 <memcpy>
 8003fba:	ab1c      	add	r3, sp, #112	; 0x70
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	ab1b      	add	r3, sp, #108	; 0x6c
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4652      	mov	r2, sl
 8003fc4:	465b      	mov	r3, fp
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003fcc:	f001 f990 	bl	80052f0 <__d2b>
 8003fd0:	901a      	str	r0, [sp, #104]	; 0x68
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f43f af07 	beq.w	8003de6 <_strtod_l+0x4a6>
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f000 ff65 	bl	8004eaa <__i2b>
 8003fe0:	9004      	str	r0, [sp, #16]
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	f43f aefe 	beq.w	8003de6 <_strtod_l+0x4a6>
 8003fea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003fec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	bfab      	itete	ge
 8003ff2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003ff4:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8003ff6:	195e      	addge	r6, r3, r5
 8003ff8:	1b5c      	sublt	r4, r3, r5
 8003ffa:	9b05      	ldr	r3, [sp, #20]
 8003ffc:	bfa8      	it	ge
 8003ffe:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 8004000:	eba5 0503 	sub.w	r5, r5, r3
 8004004:	4415      	add	r5, r2
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <_strtod_l+0x854>)
 8004008:	f105 35ff 	add.w	r5, r5, #4294967295
 800400c:	bfb8      	it	lt
 800400e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004010:	429d      	cmp	r5, r3
 8004012:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004016:	f280 80a4 	bge.w	8004162 <_strtod_l+0x822>
 800401a:	1b5b      	subs	r3, r3, r5
 800401c:	2b1f      	cmp	r3, #31
 800401e:	eba2 0203 	sub.w	r2, r2, r3
 8004022:	f04f 0701 	mov.w	r7, #1
 8004026:	f300 8091 	bgt.w	800414c <_strtod_l+0x80c>
 800402a:	2500      	movs	r5, #0
 800402c:	fa07 f303 	lsl.w	r3, r7, r3
 8004030:	9314      	str	r3, [sp, #80]	; 0x50
 8004032:	18b7      	adds	r7, r6, r2
 8004034:	9b05      	ldr	r3, [sp, #20]
 8004036:	42be      	cmp	r6, r7
 8004038:	4414      	add	r4, r2
 800403a:	441c      	add	r4, r3
 800403c:	4633      	mov	r3, r6
 800403e:	bfa8      	it	ge
 8004040:	463b      	movge	r3, r7
 8004042:	42a3      	cmp	r3, r4
 8004044:	bfa8      	it	ge
 8004046:	4623      	movge	r3, r4
 8004048:	2b00      	cmp	r3, #0
 800404a:	bfc2      	ittt	gt
 800404c:	1aff      	subgt	r7, r7, r3
 800404e:	1ae4      	subgt	r4, r4, r3
 8004050:	1af6      	subgt	r6, r6, r3
 8004052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004054:	b1bb      	cbz	r3, 8004086 <_strtod_l+0x746>
 8004056:	461a      	mov	r2, r3
 8004058:	9904      	ldr	r1, [sp, #16]
 800405a:	4640      	mov	r0, r8
 800405c:	f000 ffba 	bl	8004fd4 <__pow5mult>
 8004060:	9004      	str	r0, [sp, #16]
 8004062:	2800      	cmp	r0, #0
 8004064:	f43f aebf 	beq.w	8003de6 <_strtod_l+0x4a6>
 8004068:	4601      	mov	r1, r0
 800406a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800406c:	4640      	mov	r0, r8
 800406e:	f000 ff25 	bl	8004ebc <__multiply>
 8004072:	9008      	str	r0, [sp, #32]
 8004074:	2800      	cmp	r0, #0
 8004076:	f43f aeb6 	beq.w	8003de6 <_strtod_l+0x4a6>
 800407a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800407c:	4640      	mov	r0, r8
 800407e:	f000 fe36 	bl	8004cee <_Bfree>
 8004082:	9b08      	ldr	r3, [sp, #32]
 8004084:	931a      	str	r3, [sp, #104]	; 0x68
 8004086:	2f00      	cmp	r7, #0
 8004088:	dc6f      	bgt.n	800416a <_strtod_l+0x82a>
 800408a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d175      	bne.n	800417c <_strtod_l+0x83c>
 8004090:	2c00      	cmp	r4, #0
 8004092:	dd08      	ble.n	80040a6 <_strtod_l+0x766>
 8004094:	4622      	mov	r2, r4
 8004096:	9906      	ldr	r1, [sp, #24]
 8004098:	4640      	mov	r0, r8
 800409a:	f000 ffe9 	bl	8005070 <__lshift>
 800409e:	9006      	str	r0, [sp, #24]
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f43f aea0 	beq.w	8003de6 <_strtod_l+0x4a6>
 80040a6:	2e00      	cmp	r6, #0
 80040a8:	dd08      	ble.n	80040bc <_strtod_l+0x77c>
 80040aa:	4632      	mov	r2, r6
 80040ac:	9904      	ldr	r1, [sp, #16]
 80040ae:	4640      	mov	r0, r8
 80040b0:	f000 ffde 	bl	8005070 <__lshift>
 80040b4:	9004      	str	r0, [sp, #16]
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f43f ae95 	beq.w	8003de6 <_strtod_l+0x4a6>
 80040bc:	9a06      	ldr	r2, [sp, #24]
 80040be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80040c0:	4640      	mov	r0, r8
 80040c2:	f001 f840 	bl	8005146 <__mdiff>
 80040c6:	4681      	mov	r9, r0
 80040c8:	2800      	cmp	r0, #0
 80040ca:	f43f ae8c 	beq.w	8003de6 <_strtod_l+0x4a6>
 80040ce:	2400      	movs	r4, #0
 80040d0:	68c3      	ldr	r3, [r0, #12]
 80040d2:	9904      	ldr	r1, [sp, #16]
 80040d4:	60c4      	str	r4, [r0, #12]
 80040d6:	9308      	str	r3, [sp, #32]
 80040d8:	f001 f81b 	bl	8005112 <__mcmp>
 80040dc:	42a0      	cmp	r0, r4
 80040de:	da5b      	bge.n	8004198 <_strtod_l+0x858>
 80040e0:	9b08      	ldr	r3, [sp, #32]
 80040e2:	b9f3      	cbnz	r3, 8004122 <_strtod_l+0x7e2>
 80040e4:	f1ba 0f00 	cmp.w	sl, #0
 80040e8:	d11b      	bne.n	8004122 <_strtod_l+0x7e2>
 80040ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040ee:	b9c3      	cbnz	r3, 8004122 <_strtod_l+0x7e2>
 80040f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80040f4:	0d1b      	lsrs	r3, r3, #20
 80040f6:	051b      	lsls	r3, r3, #20
 80040f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80040fc:	d911      	bls.n	8004122 <_strtod_l+0x7e2>
 80040fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004102:	b91b      	cbnz	r3, 800410c <_strtod_l+0x7cc>
 8004104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004108:	2b01      	cmp	r3, #1
 800410a:	dd0a      	ble.n	8004122 <_strtod_l+0x7e2>
 800410c:	4649      	mov	r1, r9
 800410e:	2201      	movs	r2, #1
 8004110:	4640      	mov	r0, r8
 8004112:	f000 ffad 	bl	8005070 <__lshift>
 8004116:	9904      	ldr	r1, [sp, #16]
 8004118:	4681      	mov	r9, r0
 800411a:	f000 fffa 	bl	8005112 <__mcmp>
 800411e:	2800      	cmp	r0, #0
 8004120:	dc6b      	bgt.n	80041fa <_strtod_l+0x8ba>
 8004122:	9b05      	ldr	r3, [sp, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d175      	bne.n	8004214 <_strtod_l+0x8d4>
 8004128:	e668      	b.n	8003dfc <_strtod_l+0x4bc>
 800412a:	07e2      	lsls	r2, r4, #31
 800412c:	d504      	bpl.n	8004138 <_strtod_l+0x7f8>
 800412e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004132:	f7fc f9e5 	bl	8000500 <__aeabi_dmul>
 8004136:	2301      	movs	r3, #1
 8004138:	1064      	asrs	r4, r4, #1
 800413a:	3608      	adds	r6, #8
 800413c:	e6e9      	b.n	8003f12 <_strtod_l+0x5d2>
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	ea03 0a0a 	and.w	sl, r3, sl
 800414a:	e702      	b.n	8003f52 <_strtod_l+0x612>
 800414c:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004150:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004154:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004158:	35e2      	adds	r5, #226	; 0xe2
 800415a:	fa07 f505 	lsl.w	r5, r7, r5
 800415e:	9714      	str	r7, [sp, #80]	; 0x50
 8004160:	e767      	b.n	8004032 <_strtod_l+0x6f2>
 8004162:	2301      	movs	r3, #1
 8004164:	2500      	movs	r5, #0
 8004166:	9314      	str	r3, [sp, #80]	; 0x50
 8004168:	e763      	b.n	8004032 <_strtod_l+0x6f2>
 800416a:	463a      	mov	r2, r7
 800416c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800416e:	4640      	mov	r0, r8
 8004170:	f000 ff7e 	bl	8005070 <__lshift>
 8004174:	901a      	str	r0, [sp, #104]	; 0x68
 8004176:	2800      	cmp	r0, #0
 8004178:	d187      	bne.n	800408a <_strtod_l+0x74a>
 800417a:	e634      	b.n	8003de6 <_strtod_l+0x4a6>
 800417c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800417e:	9906      	ldr	r1, [sp, #24]
 8004180:	4640      	mov	r0, r8
 8004182:	f000 ff27 	bl	8004fd4 <__pow5mult>
 8004186:	9006      	str	r0, [sp, #24]
 8004188:	2800      	cmp	r0, #0
 800418a:	d181      	bne.n	8004090 <_strtod_l+0x750>
 800418c:	e62b      	b.n	8003de6 <_strtod_l+0x4a6>
 800418e:	bf00      	nop
 8004190:	08005620 	.word	0x08005620
 8004194:	fffffc02 	.word	0xfffffc02
 8004198:	f040 8086 	bne.w	80042a8 <_strtod_l+0x968>
 800419c:	9a08      	ldr	r2, [sp, #32]
 800419e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041a2:	b332      	cbz	r2, 80041f2 <_strtod_l+0x8b2>
 80041a4:	4aac      	ldr	r2, [pc, #688]	; (8004458 <_strtod_l+0xb18>)
 80041a6:	4659      	mov	r1, fp
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d152      	bne.n	8004252 <_strtod_l+0x912>
 80041ac:	9b05      	ldr	r3, [sp, #20]
 80041ae:	4650      	mov	r0, sl
 80041b0:	b1d3      	cbz	r3, 80041e8 <_strtod_l+0x8a8>
 80041b2:	4aaa      	ldr	r2, [pc, #680]	; (800445c <_strtod_l+0xb1c>)
 80041b4:	f04f 34ff 	mov.w	r4, #4294967295
 80041b8:	400a      	ands	r2, r1
 80041ba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80041be:	d816      	bhi.n	80041ee <_strtod_l+0x8ae>
 80041c0:	0d12      	lsrs	r2, r2, #20
 80041c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80041c6:	fa04 f303 	lsl.w	r3, r4, r3
 80041ca:	4283      	cmp	r3, r0
 80041cc:	d141      	bne.n	8004252 <_strtod_l+0x912>
 80041ce:	4aa4      	ldr	r2, [pc, #656]	; (8004460 <_strtod_l+0xb20>)
 80041d0:	4291      	cmp	r1, r2
 80041d2:	d102      	bne.n	80041da <_strtod_l+0x89a>
 80041d4:	3301      	adds	r3, #1
 80041d6:	f43f ae06 	beq.w	8003de6 <_strtod_l+0x4a6>
 80041da:	4ba0      	ldr	r3, [pc, #640]	; (800445c <_strtod_l+0xb1c>)
 80041dc:	f04f 0a00 	mov.w	sl, #0
 80041e0:	400b      	ands	r3, r1
 80041e2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80041e6:	e79c      	b.n	8004122 <_strtod_l+0x7e2>
 80041e8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ec:	e7ed      	b.n	80041ca <_strtod_l+0x88a>
 80041ee:	4623      	mov	r3, r4
 80041f0:	e7eb      	b.n	80041ca <_strtod_l+0x88a>
 80041f2:	bb73      	cbnz	r3, 8004252 <_strtod_l+0x912>
 80041f4:	f1ba 0f00 	cmp.w	sl, #0
 80041f8:	d12b      	bne.n	8004252 <_strtod_l+0x912>
 80041fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80041fe:	9a05      	ldr	r2, [sp, #20]
 8004200:	0d1b      	lsrs	r3, r3, #20
 8004202:	051b      	lsls	r3, r3, #20
 8004204:	b1e2      	cbz	r2, 8004240 <_strtod_l+0x900>
 8004206:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800420a:	dc19      	bgt.n	8004240 <_strtod_l+0x900>
 800420c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8004210:	f77f ae5d 	ble.w	8003ece <_strtod_l+0x58e>
 8004214:	4b93      	ldr	r3, [pc, #588]	; (8004464 <_strtod_l+0xb24>)
 8004216:	4650      	mov	r0, sl
 8004218:	930d      	str	r3, [sp, #52]	; 0x34
 800421a:	2300      	movs	r3, #0
 800421c:	930c      	str	r3, [sp, #48]	; 0x30
 800421e:	4659      	mov	r1, fp
 8004220:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004224:	f7fc f96c 	bl	8000500 <__aeabi_dmul>
 8004228:	4682      	mov	sl, r0
 800422a:	468b      	mov	fp, r1
 800422c:	2900      	cmp	r1, #0
 800422e:	f47f ade5 	bne.w	8003dfc <_strtod_l+0x4bc>
 8004232:	2800      	cmp	r0, #0
 8004234:	f47f ade2 	bne.w	8003dfc <_strtod_l+0x4bc>
 8004238:	2322      	movs	r3, #34	; 0x22
 800423a:	f8c8 3000 	str.w	r3, [r8]
 800423e:	e5dd      	b.n	8003dfc <_strtod_l+0x4bc>
 8004240:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004244:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004248:	f04f 3aff 	mov.w	sl, #4294967295
 800424c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004250:	e767      	b.n	8004122 <_strtod_l+0x7e2>
 8004252:	b19d      	cbz	r5, 800427c <_strtod_l+0x93c>
 8004254:	ea15 0f0b 	tst.w	r5, fp
 8004258:	f43f af63 	beq.w	8004122 <_strtod_l+0x7e2>
 800425c:	9b08      	ldr	r3, [sp, #32]
 800425e:	9a05      	ldr	r2, [sp, #20]
 8004260:	4650      	mov	r0, sl
 8004262:	4659      	mov	r1, fp
 8004264:	b173      	cbz	r3, 8004284 <_strtod_l+0x944>
 8004266:	f7ff fb49 	bl	80038fc <sulp>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004272:	f7fb ff93 	bl	800019c <__adddf3>
 8004276:	4682      	mov	sl, r0
 8004278:	468b      	mov	fp, r1
 800427a:	e752      	b.n	8004122 <_strtod_l+0x7e2>
 800427c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800427e:	ea13 0f0a 	tst.w	r3, sl
 8004282:	e7e9      	b.n	8004258 <_strtod_l+0x918>
 8004284:	f7ff fb3a 	bl	80038fc <sulp>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004290:	f7fb ff82 	bl	8000198 <__aeabi_dsub>
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	4682      	mov	sl, r0
 800429a:	468b      	mov	fp, r1
 800429c:	f7fc fb98 	bl	80009d0 <__aeabi_dcmpeq>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	f47f ae14 	bne.w	8003ece <_strtod_l+0x58e>
 80042a6:	e73c      	b.n	8004122 <_strtod_l+0x7e2>
 80042a8:	9904      	ldr	r1, [sp, #16]
 80042aa:	4648      	mov	r0, r9
 80042ac:	f001 f86f 	bl	800538e <__ratio>
 80042b0:	2200      	movs	r2, #0
 80042b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042b6:	4606      	mov	r6, r0
 80042b8:	460f      	mov	r7, r1
 80042ba:	f7fc fb9d 	bl	80009f8 <__aeabi_dcmple>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d070      	beq.n	80043a4 <_strtod_l+0xa64>
 80042c2:	9b08      	ldr	r3, [sp, #32]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d043      	beq.n	8004350 <_strtod_l+0xa10>
 80042c8:	2600      	movs	r6, #0
 80042ca:	4f67      	ldr	r7, [pc, #412]	; (8004468 <_strtod_l+0xb28>)
 80042cc:	4d66      	ldr	r5, [pc, #408]	; (8004468 <_strtod_l+0xb28>)
 80042ce:	4b63      	ldr	r3, [pc, #396]	; (800445c <_strtod_l+0xb1c>)
 80042d0:	ea0b 0303 	and.w	r3, fp, r3
 80042d4:	9314      	str	r3, [sp, #80]	; 0x50
 80042d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80042d8:	4b64      	ldr	r3, [pc, #400]	; (800446c <_strtod_l+0xb2c>)
 80042da:	429a      	cmp	r2, r3
 80042dc:	f040 80ce 	bne.w	800447c <_strtod_l+0xb3c>
 80042e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80042e8:	4650      	mov	r0, sl
 80042ea:	4659      	mov	r1, fp
 80042ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80042f0:	f000 ff88 	bl	8005204 <__ulp>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	f7fc f900 	bl	8000500 <__aeabi_dmul>
 8004300:	4652      	mov	r2, sl
 8004302:	465b      	mov	r3, fp
 8004304:	f7fb ff4a 	bl	800019c <__adddf3>
 8004308:	4a54      	ldr	r2, [pc, #336]	; (800445c <_strtod_l+0xb1c>)
 800430a:	4b59      	ldr	r3, [pc, #356]	; (8004470 <_strtod_l+0xb30>)
 800430c:	400a      	ands	r2, r1
 800430e:	429a      	cmp	r2, r3
 8004310:	4682      	mov	sl, r0
 8004312:	d95d      	bls.n	80043d0 <_strtod_l+0xa90>
 8004314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004316:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 800431a:	429a      	cmp	r2, r3
 800431c:	d103      	bne.n	8004326 <_strtod_l+0x9e6>
 800431e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004320:	3301      	adds	r3, #1
 8004322:	f43f ad60 	beq.w	8003de6 <_strtod_l+0x4a6>
 8004326:	f04f 3aff 	mov.w	sl, #4294967295
 800432a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8004460 <_strtod_l+0xb20>
 800432e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004330:	4640      	mov	r0, r8
 8004332:	f000 fcdc 	bl	8004cee <_Bfree>
 8004336:	9906      	ldr	r1, [sp, #24]
 8004338:	4640      	mov	r0, r8
 800433a:	f000 fcd8 	bl	8004cee <_Bfree>
 800433e:	9904      	ldr	r1, [sp, #16]
 8004340:	4640      	mov	r0, r8
 8004342:	f000 fcd4 	bl	8004cee <_Bfree>
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	f000 fcd0 	bl	8004cee <_Bfree>
 800434e:	e622      	b.n	8003f96 <_strtod_l+0x656>
 8004350:	f1ba 0f00 	cmp.w	sl, #0
 8004354:	d118      	bne.n	8004388 <_strtod_l+0xa48>
 8004356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800435a:	b9e3      	cbnz	r3, 8004396 <_strtod_l+0xa56>
 800435c:	2200      	movs	r2, #0
 800435e:	4b42      	ldr	r3, [pc, #264]	; (8004468 <_strtod_l+0xb28>)
 8004360:	4630      	mov	r0, r6
 8004362:	4639      	mov	r1, r7
 8004364:	f7fc fb3e 	bl	80009e4 <__aeabi_dcmplt>
 8004368:	b9c8      	cbnz	r0, 800439e <_strtod_l+0xa5e>
 800436a:	2200      	movs	r2, #0
 800436c:	4b41      	ldr	r3, [pc, #260]	; (8004474 <_strtod_l+0xb34>)
 800436e:	4630      	mov	r0, r6
 8004370:	4639      	mov	r1, r7
 8004372:	f7fc f8c5 	bl	8000500 <__aeabi_dmul>
 8004376:	4604      	mov	r4, r0
 8004378:	460d      	mov	r5, r1
 800437a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800437e:	9416      	str	r4, [sp, #88]	; 0x58
 8004380:	9317      	str	r3, [sp, #92]	; 0x5c
 8004382:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004386:	e7a2      	b.n	80042ce <_strtod_l+0x98e>
 8004388:	f1ba 0f01 	cmp.w	sl, #1
 800438c:	d103      	bne.n	8004396 <_strtod_l+0xa56>
 800438e:	f1bb 0f00 	cmp.w	fp, #0
 8004392:	f43f ad9c 	beq.w	8003ece <_strtod_l+0x58e>
 8004396:	2600      	movs	r6, #0
 8004398:	4f37      	ldr	r7, [pc, #220]	; (8004478 <_strtod_l+0xb38>)
 800439a:	2400      	movs	r4, #0
 800439c:	e796      	b.n	80042cc <_strtod_l+0x98c>
 800439e:	9c08      	ldr	r4, [sp, #32]
 80043a0:	4d34      	ldr	r5, [pc, #208]	; (8004474 <_strtod_l+0xb34>)
 80043a2:	e7ea      	b.n	800437a <_strtod_l+0xa3a>
 80043a4:	4b33      	ldr	r3, [pc, #204]	; (8004474 <_strtod_l+0xb34>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	4630      	mov	r0, r6
 80043aa:	4639      	mov	r1, r7
 80043ac:	f7fc f8a8 	bl	8000500 <__aeabi_dmul>
 80043b0:	9b08      	ldr	r3, [sp, #32]
 80043b2:	4604      	mov	r4, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	b933      	cbnz	r3, 80043c6 <_strtod_l+0xa86>
 80043b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043bc:	9010      	str	r0, [sp, #64]	; 0x40
 80043be:	9311      	str	r3, [sp, #68]	; 0x44
 80043c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80043c4:	e783      	b.n	80042ce <_strtod_l+0x98e>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80043ce:	e7f7      	b.n	80043c0 <_strtod_l+0xa80>
 80043d0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 80043d4:	9b05      	ldr	r3, [sp, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1a9      	bne.n	800432e <_strtod_l+0x9ee>
 80043da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80043de:	0d1b      	lsrs	r3, r3, #20
 80043e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80043e2:	051b      	lsls	r3, r3, #20
 80043e4:	429a      	cmp	r2, r3
 80043e6:	465e      	mov	r6, fp
 80043e8:	d1a1      	bne.n	800432e <_strtod_l+0x9ee>
 80043ea:	4629      	mov	r1, r5
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7fc fb21 	bl	8000a34 <__aeabi_d2iz>
 80043f2:	f7fc f81f 	bl	8000434 <__aeabi_i2d>
 80043f6:	460b      	mov	r3, r1
 80043f8:	4602      	mov	r2, r0
 80043fa:	4629      	mov	r1, r5
 80043fc:	4620      	mov	r0, r4
 80043fe:	f7fb fecb 	bl	8000198 <__aeabi_dsub>
 8004402:	9b08      	ldr	r3, [sp, #32]
 8004404:	4604      	mov	r4, r0
 8004406:	460d      	mov	r5, r1
 8004408:	b933      	cbnz	r3, 8004418 <_strtod_l+0xad8>
 800440a:	f1ba 0f00 	cmp.w	sl, #0
 800440e:	d103      	bne.n	8004418 <_strtod_l+0xad8>
 8004410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004414:	2e00      	cmp	r6, #0
 8004416:	d06c      	beq.n	80044f2 <_strtod_l+0xbb2>
 8004418:	a30b      	add	r3, pc, #44	; (adr r3, 8004448 <_strtod_l+0xb08>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fc fadf 	bl	80009e4 <__aeabi_dcmplt>
 8004426:	2800      	cmp	r0, #0
 8004428:	f47f ace8 	bne.w	8003dfc <_strtod_l+0x4bc>
 800442c:	a308      	add	r3, pc, #32	; (adr r3, 8004450 <_strtod_l+0xb10>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	4620      	mov	r0, r4
 8004434:	4629      	mov	r1, r5
 8004436:	f7fc faf3 	bl	8000a20 <__aeabi_dcmpgt>
 800443a:	2800      	cmp	r0, #0
 800443c:	f43f af77 	beq.w	800432e <_strtod_l+0x9ee>
 8004440:	e4dc      	b.n	8003dfc <_strtod_l+0x4bc>
 8004442:	bf00      	nop
 8004444:	f3af 8000 	nop.w
 8004448:	94a03595 	.word	0x94a03595
 800444c:	3fdfffff 	.word	0x3fdfffff
 8004450:	35afe535 	.word	0x35afe535
 8004454:	3fe00000 	.word	0x3fe00000
 8004458:	000fffff 	.word	0x000fffff
 800445c:	7ff00000 	.word	0x7ff00000
 8004460:	7fefffff 	.word	0x7fefffff
 8004464:	39500000 	.word	0x39500000
 8004468:	3ff00000 	.word	0x3ff00000
 800446c:	7fe00000 	.word	0x7fe00000
 8004470:	7c9fffff 	.word	0x7c9fffff
 8004474:	3fe00000 	.word	0x3fe00000
 8004478:	bff00000 	.word	0xbff00000
 800447c:	9b05      	ldr	r3, [sp, #20]
 800447e:	b313      	cbz	r3, 80044c6 <_strtod_l+0xb86>
 8004480:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004482:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004486:	d81e      	bhi.n	80044c6 <_strtod_l+0xb86>
 8004488:	a325      	add	r3, pc, #148	; (adr r3, 8004520 <_strtod_l+0xbe0>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	f7fc fab1 	bl	80009f8 <__aeabi_dcmple>
 8004496:	b190      	cbz	r0, 80044be <_strtod_l+0xb7e>
 8004498:	4629      	mov	r1, r5
 800449a:	4620      	mov	r0, r4
 800449c:	f7fc faf2 	bl	8000a84 <__aeabi_d2uiz>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	bf08      	it	eq
 80044a4:	2001      	moveq	r0, #1
 80044a6:	f7fb ffb5 	bl	8000414 <__aeabi_ui2d>
 80044aa:	9b08      	ldr	r3, [sp, #32]
 80044ac:	4604      	mov	r4, r0
 80044ae:	460d      	mov	r5, r1
 80044b0:	b9d3      	cbnz	r3, 80044e8 <_strtod_l+0xba8>
 80044b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044b6:	9012      	str	r0, [sp, #72]	; 0x48
 80044b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80044ba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80044be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80044c0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80044c4:	1a9f      	subs	r7, r3, r2
 80044c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044ca:	f000 fe9b 	bl	8005204 <__ulp>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4630      	mov	r0, r6
 80044d4:	4639      	mov	r1, r7
 80044d6:	f7fc f813 	bl	8000500 <__aeabi_dmul>
 80044da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044de:	f7fb fe5d 	bl	800019c <__adddf3>
 80044e2:	4682      	mov	sl, r0
 80044e4:	468b      	mov	fp, r1
 80044e6:	e775      	b.n	80043d4 <_strtod_l+0xa94>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80044f0:	e7e3      	b.n	80044ba <_strtod_l+0xb7a>
 80044f2:	a30d      	add	r3, pc, #52	; (adr r3, 8004528 <_strtod_l+0xbe8>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	f7fc fa74 	bl	80009e4 <__aeabi_dcmplt>
 80044fc:	e79d      	b.n	800443a <_strtod_l+0xafa>
 80044fe:	2300      	movs	r3, #0
 8004500:	9309      	str	r3, [sp, #36]	; 0x24
 8004502:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004504:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	f7ff ba5e 	b.w	80039c8 <_strtod_l+0x88>
 800450c:	2b65      	cmp	r3, #101	; 0x65
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f43f abae 	beq.w	8003c72 <_strtod_l+0x332>
 8004516:	4615      	mov	r5, r2
 8004518:	2101      	movs	r1, #1
 800451a:	f7ff bacd 	b.w	8003ab8 <_strtod_l+0x178>
 800451e:	bf00      	nop
 8004520:	ffc00000 	.word	0xffc00000
 8004524:	41dfffff 	.word	0x41dfffff
 8004528:	94a03595 	.word	0x94a03595
 800452c:	3fcfffff 	.word	0x3fcfffff

08004530 <strtod>:
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <strtod+0x1c>)
 8004532:	b410      	push	{r4}
 8004534:	681c      	ldr	r4, [r3, #0]
 8004536:	4a06      	ldr	r2, [pc, #24]	; (8004550 <strtod+0x20>)
 8004538:	6a23      	ldr	r3, [r4, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	bf08      	it	eq
 800453e:	4613      	moveq	r3, r2
 8004540:	460a      	mov	r2, r1
 8004542:	4601      	mov	r1, r0
 8004544:	4620      	mov	r0, r4
 8004546:	bc10      	pop	{r4}
 8004548:	f7ff b9fa 	b.w	8003940 <_strtod_l>
 800454c:	20000004 	.word	0x20000004
 8004550:	20000068 	.word	0x20000068

08004554 <strtok>:
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <strtok+0x50>)
 8004556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	681d      	ldr	r5, [r3, #0]
 800455c:	4606      	mov	r6, r0
 800455e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004560:	460f      	mov	r7, r1
 8004562:	b9b4      	cbnz	r4, 8004592 <strtok+0x3e>
 8004564:	2050      	movs	r0, #80	; 0x50
 8004566:	f000 fb69 	bl	8004c3c <malloc>
 800456a:	65a8      	str	r0, [r5, #88]	; 0x58
 800456c:	6004      	str	r4, [r0, #0]
 800456e:	6044      	str	r4, [r0, #4]
 8004570:	6084      	str	r4, [r0, #8]
 8004572:	60c4      	str	r4, [r0, #12]
 8004574:	6104      	str	r4, [r0, #16]
 8004576:	6144      	str	r4, [r0, #20]
 8004578:	6184      	str	r4, [r0, #24]
 800457a:	6284      	str	r4, [r0, #40]	; 0x28
 800457c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800457e:	6304      	str	r4, [r0, #48]	; 0x30
 8004580:	6344      	str	r4, [r0, #52]	; 0x34
 8004582:	6384      	str	r4, [r0, #56]	; 0x38
 8004584:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004586:	6404      	str	r4, [r0, #64]	; 0x40
 8004588:	6444      	str	r4, [r0, #68]	; 0x44
 800458a:	6484      	str	r4, [r0, #72]	; 0x48
 800458c:	64c4      	str	r4, [r0, #76]	; 0x4c
 800458e:	7704      	strb	r4, [r0, #28]
 8004590:	6244      	str	r4, [r0, #36]	; 0x24
 8004592:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004594:	4639      	mov	r1, r7
 8004596:	4630      	mov	r0, r6
 8004598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459c:	2301      	movs	r3, #1
 800459e:	f000 b803 	b.w	80045a8 <__strtok_r>
 80045a2:	bf00      	nop
 80045a4:	20000004 	.word	0x20000004

080045a8 <__strtok_r>:
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b918      	cbnz	r0, 80045b4 <__strtok_r+0xc>
 80045ac:	6810      	ldr	r0, [r2, #0]
 80045ae:	b908      	cbnz	r0, 80045b4 <__strtok_r+0xc>
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b2:	4620      	mov	r0, r4
 80045b4:	4604      	mov	r4, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80045bc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80045c0:	b91e      	cbnz	r6, 80045ca <__strtok_r+0x22>
 80045c2:	b965      	cbnz	r5, 80045de <__strtok_r+0x36>
 80045c4:	6015      	str	r5, [r2, #0]
 80045c6:	4628      	mov	r0, r5
 80045c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ca:	42b5      	cmp	r5, r6
 80045cc:	d1f6      	bne.n	80045bc <__strtok_r+0x14>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1ef      	bne.n	80045b2 <__strtok_r+0xa>
 80045d2:	6014      	str	r4, [r2, #0]
 80045d4:	7003      	strb	r3, [r0, #0]
 80045d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d8:	461c      	mov	r4, r3
 80045da:	e00c      	b.n	80045f6 <__strtok_r+0x4e>
 80045dc:	b915      	cbnz	r5, 80045e4 <__strtok_r+0x3c>
 80045de:	460e      	mov	r6, r1
 80045e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045e4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80045e8:	42ab      	cmp	r3, r5
 80045ea:	d1f7      	bne.n	80045dc <__strtok_r+0x34>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f3      	beq.n	80045d8 <__strtok_r+0x30>
 80045f0:	2300      	movs	r3, #0
 80045f2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80045f6:	6014      	str	r4, [r2, #0]
 80045f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045fa <rshift>:
 80045fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fc:	6906      	ldr	r6, [r0, #16]
 80045fe:	114b      	asrs	r3, r1, #5
 8004600:	42b3      	cmp	r3, r6
 8004602:	f100 0514 	add.w	r5, r0, #20
 8004606:	da2b      	bge.n	8004660 <rshift+0x66>
 8004608:	f011 011f 	ands.w	r1, r1, #31
 800460c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8004610:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8004614:	d108      	bne.n	8004628 <rshift+0x2e>
 8004616:	4629      	mov	r1, r5
 8004618:	42b2      	cmp	r2, r6
 800461a:	460b      	mov	r3, r1
 800461c:	d210      	bcs.n	8004640 <rshift+0x46>
 800461e:	f852 3b04 	ldr.w	r3, [r2], #4
 8004622:	f841 3b04 	str.w	r3, [r1], #4
 8004626:	e7f7      	b.n	8004618 <rshift+0x1e>
 8004628:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800462c:	462b      	mov	r3, r5
 800462e:	f1c1 0e20 	rsb	lr, r1, #32
 8004632:	3204      	adds	r2, #4
 8004634:	40cc      	lsrs	r4, r1
 8004636:	42b2      	cmp	r2, r6
 8004638:	d308      	bcc.n	800464c <rshift+0x52>
 800463a:	601c      	str	r4, [r3, #0]
 800463c:	b104      	cbz	r4, 8004640 <rshift+0x46>
 800463e:	3304      	adds	r3, #4
 8004640:	1b5b      	subs	r3, r3, r5
 8004642:	109b      	asrs	r3, r3, #2
 8004644:	6103      	str	r3, [r0, #16]
 8004646:	b903      	cbnz	r3, 800464a <rshift+0x50>
 8004648:	6143      	str	r3, [r0, #20]
 800464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464c:	6817      	ldr	r7, [r2, #0]
 800464e:	fa07 f70e 	lsl.w	r7, r7, lr
 8004652:	433c      	orrs	r4, r7
 8004654:	f843 4b04 	str.w	r4, [r3], #4
 8004658:	f852 4b04 	ldr.w	r4, [r2], #4
 800465c:	40cc      	lsrs	r4, r1
 800465e:	e7ea      	b.n	8004636 <rshift+0x3c>
 8004660:	462b      	mov	r3, r5
 8004662:	e7ed      	b.n	8004640 <rshift+0x46>

08004664 <__hexdig_fun>:
 8004664:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004668:	2b09      	cmp	r3, #9
 800466a:	d802      	bhi.n	8004672 <__hexdig_fun+0xe>
 800466c:	3820      	subs	r0, #32
 800466e:	b2c0      	uxtb	r0, r0
 8004670:	4770      	bx	lr
 8004672:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004676:	2b05      	cmp	r3, #5
 8004678:	d801      	bhi.n	800467e <__hexdig_fun+0x1a>
 800467a:	3847      	subs	r0, #71	; 0x47
 800467c:	e7f7      	b.n	800466e <__hexdig_fun+0xa>
 800467e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004682:	2b05      	cmp	r3, #5
 8004684:	d801      	bhi.n	800468a <__hexdig_fun+0x26>
 8004686:	3827      	subs	r0, #39	; 0x27
 8004688:	e7f1      	b.n	800466e <__hexdig_fun+0xa>
 800468a:	2000      	movs	r0, #0
 800468c:	4770      	bx	lr

0800468e <__gethex>:
 800468e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004692:	b08b      	sub	sp, #44	; 0x2c
 8004694:	9002      	str	r0, [sp, #8]
 8004696:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004698:	468a      	mov	sl, r1
 800469a:	4690      	mov	r8, r2
 800469c:	9306      	str	r3, [sp, #24]
 800469e:	f000 faca 	bl	8004c36 <__localeconv_l>
 80046a2:	6803      	ldr	r3, [r0, #0]
 80046a4:	f04f 0b00 	mov.w	fp, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	9303      	str	r3, [sp, #12]
 80046ac:	f7fb fd68 	bl	8000180 <strlen>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	9001      	str	r0, [sp, #4]
 80046b4:	4403      	add	r3, r0
 80046b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80046ba:	9307      	str	r3, [sp, #28]
 80046bc:	f8da 3000 	ldr.w	r3, [sl]
 80046c0:	3302      	adds	r3, #2
 80046c2:	461f      	mov	r7, r3
 80046c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80046c8:	2830      	cmp	r0, #48	; 0x30
 80046ca:	d06c      	beq.n	80047a6 <__gethex+0x118>
 80046cc:	f7ff ffca 	bl	8004664 <__hexdig_fun>
 80046d0:	4604      	mov	r4, r0
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d16a      	bne.n	80047ac <__gethex+0x11e>
 80046d6:	9a01      	ldr	r2, [sp, #4]
 80046d8:	9903      	ldr	r1, [sp, #12]
 80046da:	4638      	mov	r0, r7
 80046dc:	f000 ff36 	bl	800554c <strncmp>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d166      	bne.n	80047b2 <__gethex+0x124>
 80046e4:	9b01      	ldr	r3, [sp, #4]
 80046e6:	5cf8      	ldrb	r0, [r7, r3]
 80046e8:	18fe      	adds	r6, r7, r3
 80046ea:	f7ff ffbb 	bl	8004664 <__hexdig_fun>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d062      	beq.n	80047b8 <__gethex+0x12a>
 80046f2:	4633      	mov	r3, r6
 80046f4:	7818      	ldrb	r0, [r3, #0]
 80046f6:	461f      	mov	r7, r3
 80046f8:	2830      	cmp	r0, #48	; 0x30
 80046fa:	f103 0301 	add.w	r3, r3, #1
 80046fe:	d0f9      	beq.n	80046f4 <__gethex+0x66>
 8004700:	f7ff ffb0 	bl	8004664 <__hexdig_fun>
 8004704:	fab0 f580 	clz	r5, r0
 8004708:	4634      	mov	r4, r6
 800470a:	f04f 0b01 	mov.w	fp, #1
 800470e:	096d      	lsrs	r5, r5, #5
 8004710:	463a      	mov	r2, r7
 8004712:	4616      	mov	r6, r2
 8004714:	7830      	ldrb	r0, [r6, #0]
 8004716:	3201      	adds	r2, #1
 8004718:	f7ff ffa4 	bl	8004664 <__hexdig_fun>
 800471c:	2800      	cmp	r0, #0
 800471e:	d1f8      	bne.n	8004712 <__gethex+0x84>
 8004720:	9a01      	ldr	r2, [sp, #4]
 8004722:	9903      	ldr	r1, [sp, #12]
 8004724:	4630      	mov	r0, r6
 8004726:	f000 ff11 	bl	800554c <strncmp>
 800472a:	b950      	cbnz	r0, 8004742 <__gethex+0xb4>
 800472c:	b954      	cbnz	r4, 8004744 <__gethex+0xb6>
 800472e:	9b01      	ldr	r3, [sp, #4]
 8004730:	18f4      	adds	r4, r6, r3
 8004732:	4622      	mov	r2, r4
 8004734:	4616      	mov	r6, r2
 8004736:	7830      	ldrb	r0, [r6, #0]
 8004738:	3201      	adds	r2, #1
 800473a:	f7ff ff93 	bl	8004664 <__hexdig_fun>
 800473e:	2800      	cmp	r0, #0
 8004740:	d1f8      	bne.n	8004734 <__gethex+0xa6>
 8004742:	b10c      	cbz	r4, 8004748 <__gethex+0xba>
 8004744:	1ba4      	subs	r4, r4, r6
 8004746:	00a4      	lsls	r4, r4, #2
 8004748:	7833      	ldrb	r3, [r6, #0]
 800474a:	2b50      	cmp	r3, #80	; 0x50
 800474c:	d001      	beq.n	8004752 <__gethex+0xc4>
 800474e:	2b70      	cmp	r3, #112	; 0x70
 8004750:	d140      	bne.n	80047d4 <__gethex+0x146>
 8004752:	7873      	ldrb	r3, [r6, #1]
 8004754:	2b2b      	cmp	r3, #43	; 0x2b
 8004756:	d035      	beq.n	80047c4 <__gethex+0x136>
 8004758:	2b2d      	cmp	r3, #45	; 0x2d
 800475a:	d02f      	beq.n	80047bc <__gethex+0x12e>
 800475c:	f04f 0900 	mov.w	r9, #0
 8004760:	1c71      	adds	r1, r6, #1
 8004762:	7808      	ldrb	r0, [r1, #0]
 8004764:	f7ff ff7e 	bl	8004664 <__hexdig_fun>
 8004768:	1e43      	subs	r3, r0, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b18      	cmp	r3, #24
 800476e:	d831      	bhi.n	80047d4 <__gethex+0x146>
 8004770:	f1a0 0210 	sub.w	r2, r0, #16
 8004774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004778:	f7ff ff74 	bl	8004664 <__hexdig_fun>
 800477c:	1e43      	subs	r3, r0, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b18      	cmp	r3, #24
 8004782:	d922      	bls.n	80047ca <__gethex+0x13c>
 8004784:	f1b9 0f00 	cmp.w	r9, #0
 8004788:	d000      	beq.n	800478c <__gethex+0xfe>
 800478a:	4252      	negs	r2, r2
 800478c:	4414      	add	r4, r2
 800478e:	f8ca 1000 	str.w	r1, [sl]
 8004792:	b30d      	cbz	r5, 80047d8 <__gethex+0x14a>
 8004794:	f1bb 0f00 	cmp.w	fp, #0
 8004798:	bf14      	ite	ne
 800479a:	2700      	movne	r7, #0
 800479c:	2706      	moveq	r7, #6
 800479e:	4638      	mov	r0, r7
 80047a0:	b00b      	add	sp, #44	; 0x2c
 80047a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a6:	f10b 0b01 	add.w	fp, fp, #1
 80047aa:	e78a      	b.n	80046c2 <__gethex+0x34>
 80047ac:	2500      	movs	r5, #0
 80047ae:	462c      	mov	r4, r5
 80047b0:	e7ae      	b.n	8004710 <__gethex+0x82>
 80047b2:	463e      	mov	r6, r7
 80047b4:	2501      	movs	r5, #1
 80047b6:	e7c7      	b.n	8004748 <__gethex+0xba>
 80047b8:	4604      	mov	r4, r0
 80047ba:	e7fb      	b.n	80047b4 <__gethex+0x126>
 80047bc:	f04f 0901 	mov.w	r9, #1
 80047c0:	1cb1      	adds	r1, r6, #2
 80047c2:	e7ce      	b.n	8004762 <__gethex+0xd4>
 80047c4:	f04f 0900 	mov.w	r9, #0
 80047c8:	e7fa      	b.n	80047c0 <__gethex+0x132>
 80047ca:	230a      	movs	r3, #10
 80047cc:	fb03 0202 	mla	r2, r3, r2, r0
 80047d0:	3a10      	subs	r2, #16
 80047d2:	e7cf      	b.n	8004774 <__gethex+0xe6>
 80047d4:	4631      	mov	r1, r6
 80047d6:	e7da      	b.n	800478e <__gethex+0x100>
 80047d8:	4629      	mov	r1, r5
 80047da:	1bf3      	subs	r3, r6, r7
 80047dc:	3b01      	subs	r3, #1
 80047de:	2b07      	cmp	r3, #7
 80047e0:	dc49      	bgt.n	8004876 <__gethex+0x1e8>
 80047e2:	9802      	ldr	r0, [sp, #8]
 80047e4:	f000 fa4f 	bl	8004c86 <_Balloc>
 80047e8:	f04f 0b00 	mov.w	fp, #0
 80047ec:	4605      	mov	r5, r0
 80047ee:	46da      	mov	sl, fp
 80047f0:	9b01      	ldr	r3, [sp, #4]
 80047f2:	f100 0914 	add.w	r9, r0, #20
 80047f6:	f1c3 0301 	rsb	r3, r3, #1
 80047fa:	f8cd 9010 	str.w	r9, [sp, #16]
 80047fe:	9308      	str	r3, [sp, #32]
 8004800:	42b7      	cmp	r7, r6
 8004802:	d33b      	bcc.n	800487c <__gethex+0x1ee>
 8004804:	9804      	ldr	r0, [sp, #16]
 8004806:	f840 ab04 	str.w	sl, [r0], #4
 800480a:	eba0 0009 	sub.w	r0, r0, r9
 800480e:	1080      	asrs	r0, r0, #2
 8004810:	6128      	str	r0, [r5, #16]
 8004812:	0147      	lsls	r7, r0, #5
 8004814:	4650      	mov	r0, sl
 8004816:	f000 fafa 	bl	8004e0e <__hi0bits>
 800481a:	f8d8 6000 	ldr.w	r6, [r8]
 800481e:	1a3f      	subs	r7, r7, r0
 8004820:	42b7      	cmp	r7, r6
 8004822:	dd64      	ble.n	80048ee <__gethex+0x260>
 8004824:	1bbf      	subs	r7, r7, r6
 8004826:	4639      	mov	r1, r7
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fdf2 	bl	8005412 <__any_on>
 800482e:	4682      	mov	sl, r0
 8004830:	b178      	cbz	r0, 8004852 <__gethex+0x1c4>
 8004832:	f04f 0a01 	mov.w	sl, #1
 8004836:	1e7b      	subs	r3, r7, #1
 8004838:	1159      	asrs	r1, r3, #5
 800483a:	f003 021f 	and.w	r2, r3, #31
 800483e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004842:	fa0a f202 	lsl.w	r2, sl, r2
 8004846:	420a      	tst	r2, r1
 8004848:	d003      	beq.n	8004852 <__gethex+0x1c4>
 800484a:	4553      	cmp	r3, sl
 800484c:	dc46      	bgt.n	80048dc <__gethex+0x24e>
 800484e:	f04f 0a02 	mov.w	sl, #2
 8004852:	4639      	mov	r1, r7
 8004854:	4628      	mov	r0, r5
 8004856:	f7ff fed0 	bl	80045fa <rshift>
 800485a:	443c      	add	r4, r7
 800485c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004860:	429c      	cmp	r4, r3
 8004862:	dd52      	ble.n	800490a <__gethex+0x27c>
 8004864:	4629      	mov	r1, r5
 8004866:	9802      	ldr	r0, [sp, #8]
 8004868:	f000 fa41 	bl	8004cee <_Bfree>
 800486c:	2300      	movs	r3, #0
 800486e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004870:	27a3      	movs	r7, #163	; 0xa3
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e793      	b.n	800479e <__gethex+0x110>
 8004876:	3101      	adds	r1, #1
 8004878:	105b      	asrs	r3, r3, #1
 800487a:	e7b0      	b.n	80047de <__gethex+0x150>
 800487c:	1e73      	subs	r3, r6, #1
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	9a07      	ldr	r2, [sp, #28]
 8004882:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004886:	4293      	cmp	r3, r2
 8004888:	d018      	beq.n	80048bc <__gethex+0x22e>
 800488a:	f1bb 0f20 	cmp.w	fp, #32
 800488e:	d107      	bne.n	80048a0 <__gethex+0x212>
 8004890:	9b04      	ldr	r3, [sp, #16]
 8004892:	f8c3 a000 	str.w	sl, [r3]
 8004896:	f04f 0a00 	mov.w	sl, #0
 800489a:	46d3      	mov	fp, sl
 800489c:	3304      	adds	r3, #4
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80048a4:	f7ff fede 	bl	8004664 <__hexdig_fun>
 80048a8:	f000 000f 	and.w	r0, r0, #15
 80048ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80048b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80048b4:	f10b 0b04 	add.w	fp, fp, #4
 80048b8:	9b05      	ldr	r3, [sp, #20]
 80048ba:	e00d      	b.n	80048d8 <__gethex+0x24a>
 80048bc:	9b05      	ldr	r3, [sp, #20]
 80048be:	9a08      	ldr	r2, [sp, #32]
 80048c0:	4413      	add	r3, r2
 80048c2:	429f      	cmp	r7, r3
 80048c4:	d8e1      	bhi.n	800488a <__gethex+0x1fc>
 80048c6:	4618      	mov	r0, r3
 80048c8:	9a01      	ldr	r2, [sp, #4]
 80048ca:	9903      	ldr	r1, [sp, #12]
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	f000 fe3d 	bl	800554c <strncmp>
 80048d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1d8      	bne.n	800488a <__gethex+0x1fc>
 80048d8:	461e      	mov	r6, r3
 80048da:	e791      	b.n	8004800 <__gethex+0x172>
 80048dc:	1eb9      	subs	r1, r7, #2
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 fd97 	bl	8005412 <__any_on>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0b2      	beq.n	800484e <__gethex+0x1c0>
 80048e8:	f04f 0a03 	mov.w	sl, #3
 80048ec:	e7b1      	b.n	8004852 <__gethex+0x1c4>
 80048ee:	da09      	bge.n	8004904 <__gethex+0x276>
 80048f0:	1bf7      	subs	r7, r6, r7
 80048f2:	4629      	mov	r1, r5
 80048f4:	463a      	mov	r2, r7
 80048f6:	9802      	ldr	r0, [sp, #8]
 80048f8:	f000 fbba 	bl	8005070 <__lshift>
 80048fc:	4605      	mov	r5, r0
 80048fe:	1be4      	subs	r4, r4, r7
 8004900:	f100 0914 	add.w	r9, r0, #20
 8004904:	f04f 0a00 	mov.w	sl, #0
 8004908:	e7a8      	b.n	800485c <__gethex+0x1ce>
 800490a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800490e:	4284      	cmp	r4, r0
 8004910:	da6b      	bge.n	80049ea <__gethex+0x35c>
 8004912:	1b04      	subs	r4, r0, r4
 8004914:	42a6      	cmp	r6, r4
 8004916:	dc2e      	bgt.n	8004976 <__gethex+0x2e8>
 8004918:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d022      	beq.n	8004966 <__gethex+0x2d8>
 8004920:	2b03      	cmp	r3, #3
 8004922:	d024      	beq.n	800496e <__gethex+0x2e0>
 8004924:	2b01      	cmp	r3, #1
 8004926:	d115      	bne.n	8004954 <__gethex+0x2c6>
 8004928:	42a6      	cmp	r6, r4
 800492a:	d113      	bne.n	8004954 <__gethex+0x2c6>
 800492c:	2e01      	cmp	r6, #1
 800492e:	dc0b      	bgt.n	8004948 <__gethex+0x2ba>
 8004930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004934:	9a06      	ldr	r2, [sp, #24]
 8004936:	2762      	movs	r7, #98	; 0x62
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	2301      	movs	r3, #1
 800493c:	612b      	str	r3, [r5, #16]
 800493e:	f8c9 3000 	str.w	r3, [r9]
 8004942:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004944:	601d      	str	r5, [r3, #0]
 8004946:	e72a      	b.n	800479e <__gethex+0x110>
 8004948:	1e71      	subs	r1, r6, #1
 800494a:	4628      	mov	r0, r5
 800494c:	f000 fd61 	bl	8005412 <__any_on>
 8004950:	2800      	cmp	r0, #0
 8004952:	d1ed      	bne.n	8004930 <__gethex+0x2a2>
 8004954:	4629      	mov	r1, r5
 8004956:	9802      	ldr	r0, [sp, #8]
 8004958:	f000 f9c9 	bl	8004cee <_Bfree>
 800495c:	2300      	movs	r3, #0
 800495e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004960:	2750      	movs	r7, #80	; 0x50
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e71b      	b.n	800479e <__gethex+0x110>
 8004966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0e1      	beq.n	8004930 <__gethex+0x2a2>
 800496c:	e7f2      	b.n	8004954 <__gethex+0x2c6>
 800496e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1dd      	bne.n	8004930 <__gethex+0x2a2>
 8004974:	e7ee      	b.n	8004954 <__gethex+0x2c6>
 8004976:	1e67      	subs	r7, r4, #1
 8004978:	f1ba 0f00 	cmp.w	sl, #0
 800497c:	d132      	bne.n	80049e4 <__gethex+0x356>
 800497e:	b127      	cbz	r7, 800498a <__gethex+0x2fc>
 8004980:	4639      	mov	r1, r7
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fd45 	bl	8005412 <__any_on>
 8004988:	4682      	mov	sl, r0
 800498a:	2301      	movs	r3, #1
 800498c:	117a      	asrs	r2, r7, #5
 800498e:	f007 071f 	and.w	r7, r7, #31
 8004992:	fa03 f707 	lsl.w	r7, r3, r7
 8004996:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800499a:	4621      	mov	r1, r4
 800499c:	421f      	tst	r7, r3
 800499e:	f04f 0702 	mov.w	r7, #2
 80049a2:	4628      	mov	r0, r5
 80049a4:	bf18      	it	ne
 80049a6:	f04a 0a02 	orrne.w	sl, sl, #2
 80049aa:	1b36      	subs	r6, r6, r4
 80049ac:	f7ff fe25 	bl	80045fa <rshift>
 80049b0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80049b4:	f1ba 0f00 	cmp.w	sl, #0
 80049b8:	d045      	beq.n	8004a46 <__gethex+0x3b8>
 80049ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d015      	beq.n	80049ee <__gethex+0x360>
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d017      	beq.n	80049f6 <__gethex+0x368>
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d109      	bne.n	80049de <__gethex+0x350>
 80049ca:	f01a 0f02 	tst.w	sl, #2
 80049ce:	d006      	beq.n	80049de <__gethex+0x350>
 80049d0:	f8d9 3000 	ldr.w	r3, [r9]
 80049d4:	ea4a 0a03 	orr.w	sl, sl, r3
 80049d8:	f01a 0f01 	tst.w	sl, #1
 80049dc:	d10e      	bne.n	80049fc <__gethex+0x36e>
 80049de:	f047 0710 	orr.w	r7, r7, #16
 80049e2:	e030      	b.n	8004a46 <__gethex+0x3b8>
 80049e4:	f04f 0a01 	mov.w	sl, #1
 80049e8:	e7cf      	b.n	800498a <__gethex+0x2fc>
 80049ea:	2701      	movs	r7, #1
 80049ec:	e7e2      	b.n	80049b4 <__gethex+0x326>
 80049ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049f0:	f1c3 0301 	rsb	r3, r3, #1
 80049f4:	9315      	str	r3, [sp, #84]	; 0x54
 80049f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <__gethex+0x350>
 80049fc:	2000      	movs	r0, #0
 80049fe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8004a02:	f105 0314 	add.w	r3, r5, #20
 8004a06:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8004a0a:	eb03 010a 	add.w	r1, r3, sl
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004a14:	d01c      	beq.n	8004a50 <__gethex+0x3c2>
 8004a16:	3201      	adds	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	2f02      	cmp	r7, #2
 8004a1c:	f105 0314 	add.w	r3, r5, #20
 8004a20:	d138      	bne.n	8004a94 <__gethex+0x406>
 8004a22:	f8d8 2000 	ldr.w	r2, [r8]
 8004a26:	3a01      	subs	r2, #1
 8004a28:	4296      	cmp	r6, r2
 8004a2a:	d10a      	bne.n	8004a42 <__gethex+0x3b4>
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	1171      	asrs	r1, r6, #5
 8004a30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a34:	f006 061f 	and.w	r6, r6, #31
 8004a38:	fa02 f606 	lsl.w	r6, r2, r6
 8004a3c:	421e      	tst	r6, r3
 8004a3e:	bf18      	it	ne
 8004a40:	4617      	movne	r7, r2
 8004a42:	f047 0720 	orr.w	r7, r7, #32
 8004a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a48:	601d      	str	r5, [r3, #0]
 8004a4a:	9b06      	ldr	r3, [sp, #24]
 8004a4c:	601c      	str	r4, [r3, #0]
 8004a4e:	e6a6      	b.n	800479e <__gethex+0x110>
 8004a50:	f843 0b04 	str.w	r0, [r3], #4
 8004a54:	4299      	cmp	r1, r3
 8004a56:	d8da      	bhi.n	8004a0e <__gethex+0x380>
 8004a58:	68ab      	ldr	r3, [r5, #8]
 8004a5a:	4599      	cmp	r9, r3
 8004a5c:	db12      	blt.n	8004a84 <__gethex+0x3f6>
 8004a5e:	6869      	ldr	r1, [r5, #4]
 8004a60:	9802      	ldr	r0, [sp, #8]
 8004a62:	3101      	adds	r1, #1
 8004a64:	f000 f90f 	bl	8004c86 <_Balloc>
 8004a68:	4683      	mov	fp, r0
 8004a6a:	692a      	ldr	r2, [r5, #16]
 8004a6c:	f105 010c 	add.w	r1, r5, #12
 8004a70:	3202      	adds	r2, #2
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	300c      	adds	r0, #12
 8004a76:	f000 f8fb 	bl	8004c70 <memcpy>
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	9802      	ldr	r0, [sp, #8]
 8004a7e:	f000 f936 	bl	8004cee <_Bfree>
 8004a82:	465d      	mov	r5, fp
 8004a84:	692b      	ldr	r3, [r5, #16]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	612a      	str	r2, [r5, #16]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004a90:	615a      	str	r2, [r3, #20]
 8004a92:	e7c2      	b.n	8004a1a <__gethex+0x38c>
 8004a94:	692a      	ldr	r2, [r5, #16]
 8004a96:	4591      	cmp	r9, r2
 8004a98:	da0b      	bge.n	8004ab2 <__gethex+0x424>
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7ff fdac 	bl	80045fa <rshift>
 8004aa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004aa6:	3401      	adds	r4, #1
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	f73f aedb 	bgt.w	8004864 <__gethex+0x1d6>
 8004aae:	2701      	movs	r7, #1
 8004ab0:	e7c7      	b.n	8004a42 <__gethex+0x3b4>
 8004ab2:	f016 061f 	ands.w	r6, r6, #31
 8004ab6:	d0fa      	beq.n	8004aae <__gethex+0x420>
 8004ab8:	449a      	add	sl, r3
 8004aba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8004abe:	f000 f9a6 	bl	8004e0e <__hi0bits>
 8004ac2:	f1c6 0620 	rsb	r6, r6, #32
 8004ac6:	42b0      	cmp	r0, r6
 8004ac8:	dbe7      	blt.n	8004a9a <__gethex+0x40c>
 8004aca:	e7f0      	b.n	8004aae <__gethex+0x420>

08004acc <L_shift>:
 8004acc:	f1c2 0208 	rsb	r2, r2, #8
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	f1c2 0620 	rsb	r6, r2, #32
 8004ad8:	6843      	ldr	r3, [r0, #4]
 8004ada:	6804      	ldr	r4, [r0, #0]
 8004adc:	fa03 f506 	lsl.w	r5, r3, r6
 8004ae0:	432c      	orrs	r4, r5
 8004ae2:	40d3      	lsrs	r3, r2
 8004ae4:	6004      	str	r4, [r0, #0]
 8004ae6:	f840 3f04 	str.w	r3, [r0, #4]!
 8004aea:	4288      	cmp	r0, r1
 8004aec:	d3f4      	bcc.n	8004ad8 <L_shift+0xc>
 8004aee:	bd70      	pop	{r4, r5, r6, pc}

08004af0 <__match>:
 8004af0:	b530      	push	{r4, r5, lr}
 8004af2:	6803      	ldr	r3, [r0, #0]
 8004af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004af8:	3301      	adds	r3, #1
 8004afa:	b914      	cbnz	r4, 8004b02 <__match+0x12>
 8004afc:	6003      	str	r3, [r0, #0]
 8004afe:	2001      	movs	r0, #1
 8004b00:	bd30      	pop	{r4, r5, pc}
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004b08:	2d19      	cmp	r5, #25
 8004b0a:	bf98      	it	ls
 8004b0c:	3220      	addls	r2, #32
 8004b0e:	42a2      	cmp	r2, r4
 8004b10:	d0f0      	beq.n	8004af4 <__match+0x4>
 8004b12:	2000      	movs	r0, #0
 8004b14:	bd30      	pop	{r4, r5, pc}

08004b16 <__hexnan>:
 8004b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	680b      	ldr	r3, [r1, #0]
 8004b1e:	4682      	mov	sl, r0
 8004b20:	115f      	asrs	r7, r3, #5
 8004b22:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004b26:	f013 031f 	ands.w	r3, r3, #31
 8004b2a:	bf18      	it	ne
 8004b2c:	3704      	addne	r7, #4
 8004b2e:	1f3e      	subs	r6, r7, #4
 8004b30:	4690      	mov	r8, r2
 8004b32:	46b1      	mov	r9, r6
 8004b34:	4634      	mov	r4, r6
 8004b36:	46ab      	mov	fp, r5
 8004b38:	b087      	sub	sp, #28
 8004b3a:	6801      	ldr	r1, [r0, #0]
 8004b3c:	9302      	str	r3, [sp, #8]
 8004b3e:	f847 5c04 	str.w	r5, [r7, #-4]
 8004b42:	9501      	str	r5, [sp, #4]
 8004b44:	784a      	ldrb	r2, [r1, #1]
 8004b46:	1c4b      	adds	r3, r1, #1
 8004b48:	9303      	str	r3, [sp, #12]
 8004b4a:	b342      	cbz	r2, 8004b9e <__hexnan+0x88>
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	9105      	str	r1, [sp, #20]
 8004b50:	9204      	str	r2, [sp, #16]
 8004b52:	f7ff fd87 	bl	8004664 <__hexdig_fun>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d143      	bne.n	8004be2 <__hexnan+0xcc>
 8004b5a:	9a04      	ldr	r2, [sp, #16]
 8004b5c:	9905      	ldr	r1, [sp, #20]
 8004b5e:	2a20      	cmp	r2, #32
 8004b60:	d818      	bhi.n	8004b94 <__hexnan+0x7e>
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	459b      	cmp	fp, r3
 8004b66:	dd13      	ble.n	8004b90 <__hexnan+0x7a>
 8004b68:	454c      	cmp	r4, r9
 8004b6a:	d206      	bcs.n	8004b7a <__hexnan+0x64>
 8004b6c:	2d07      	cmp	r5, #7
 8004b6e:	dc04      	bgt.n	8004b7a <__hexnan+0x64>
 8004b70:	462a      	mov	r2, r5
 8004b72:	4649      	mov	r1, r9
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7ff ffa9 	bl	8004acc <L_shift>
 8004b7a:	4544      	cmp	r4, r8
 8004b7c:	d944      	bls.n	8004c08 <__hexnan+0xf2>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f1a4 0904 	sub.w	r9, r4, #4
 8004b84:	f844 3c04 	str.w	r3, [r4, #-4]
 8004b88:	461d      	mov	r5, r3
 8004b8a:	464c      	mov	r4, r9
 8004b8c:	f8cd b004 	str.w	fp, [sp, #4]
 8004b90:	9903      	ldr	r1, [sp, #12]
 8004b92:	e7d7      	b.n	8004b44 <__hexnan+0x2e>
 8004b94:	2a29      	cmp	r2, #41	; 0x29
 8004b96:	d14a      	bne.n	8004c2e <__hexnan+0x118>
 8004b98:	3102      	adds	r1, #2
 8004b9a:	f8ca 1000 	str.w	r1, [sl]
 8004b9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ba2:	d044      	beq.n	8004c2e <__hexnan+0x118>
 8004ba4:	454c      	cmp	r4, r9
 8004ba6:	d206      	bcs.n	8004bb6 <__hexnan+0xa0>
 8004ba8:	2d07      	cmp	r5, #7
 8004baa:	dc04      	bgt.n	8004bb6 <__hexnan+0xa0>
 8004bac:	462a      	mov	r2, r5
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff ff8b 	bl	8004acc <L_shift>
 8004bb6:	4544      	cmp	r4, r8
 8004bb8:	d928      	bls.n	8004c0c <__hexnan+0xf6>
 8004bba:	4643      	mov	r3, r8
 8004bbc:	f854 2b04 	ldr.w	r2, [r4], #4
 8004bc0:	42a6      	cmp	r6, r4
 8004bc2:	f843 2b04 	str.w	r2, [r3], #4
 8004bc6:	d2f9      	bcs.n	8004bbc <__hexnan+0xa6>
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f843 2b04 	str.w	r2, [r3], #4
 8004bce:	429e      	cmp	r6, r3
 8004bd0:	d2fb      	bcs.n	8004bca <__hexnan+0xb4>
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	b91b      	cbnz	r3, 8004bde <__hexnan+0xc8>
 8004bd6:	4546      	cmp	r6, r8
 8004bd8:	d127      	bne.n	8004c2a <__hexnan+0x114>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	6033      	str	r3, [r6, #0]
 8004bde:	2005      	movs	r0, #5
 8004be0:	e026      	b.n	8004c30 <__hexnan+0x11a>
 8004be2:	3501      	adds	r5, #1
 8004be4:	2d08      	cmp	r5, #8
 8004be6:	f10b 0b01 	add.w	fp, fp, #1
 8004bea:	dd06      	ble.n	8004bfa <__hexnan+0xe4>
 8004bec:	4544      	cmp	r4, r8
 8004bee:	d9cf      	bls.n	8004b90 <__hexnan+0x7a>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2501      	movs	r5, #1
 8004bf4:	f844 3c04 	str.w	r3, [r4, #-4]
 8004bf8:	3c04      	subs	r4, #4
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	f000 000f 	and.w	r0, r0, #15
 8004c00:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004c04:	6020      	str	r0, [r4, #0]
 8004c06:	e7c3      	b.n	8004b90 <__hexnan+0x7a>
 8004c08:	2508      	movs	r5, #8
 8004c0a:	e7c1      	b.n	8004b90 <__hexnan+0x7a>
 8004c0c:	9b02      	ldr	r3, [sp, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0df      	beq.n	8004bd2 <__hexnan+0xbc>
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295
 8004c16:	f1c3 0320 	rsb	r3, r3, #32
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8004c22:	401a      	ands	r2, r3
 8004c24:	f847 2c04 	str.w	r2, [r7, #-4]
 8004c28:	e7d3      	b.n	8004bd2 <__hexnan+0xbc>
 8004c2a:	3e04      	subs	r6, #4
 8004c2c:	e7d1      	b.n	8004bd2 <__hexnan+0xbc>
 8004c2e:	2004      	movs	r0, #4
 8004c30:	b007      	add	sp, #28
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c36 <__localeconv_l>:
 8004c36:	30f0      	adds	r0, #240	; 0xf0
 8004c38:	4770      	bx	lr
	...

08004c3c <malloc>:
 8004c3c:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <malloc+0xc>)
 8004c3e:	4601      	mov	r1, r0
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	f000 bc15 	b.w	8005470 <_malloc_r>
 8004c46:	bf00      	nop
 8004c48:	20000004 	.word	0x20000004

08004c4c <__ascii_mbtowc>:
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	b901      	cbnz	r1, 8004c52 <__ascii_mbtowc+0x6>
 8004c50:	a901      	add	r1, sp, #4
 8004c52:	b142      	cbz	r2, 8004c66 <__ascii_mbtowc+0x1a>
 8004c54:	b14b      	cbz	r3, 8004c6a <__ascii_mbtowc+0x1e>
 8004c56:	7813      	ldrb	r3, [r2, #0]
 8004c58:	600b      	str	r3, [r1, #0]
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	1c10      	adds	r0, r2, #0
 8004c5e:	bf18      	it	ne
 8004c60:	2001      	movne	r0, #1
 8004c62:	b002      	add	sp, #8
 8004c64:	4770      	bx	lr
 8004c66:	4610      	mov	r0, r2
 8004c68:	e7fb      	b.n	8004c62 <__ascii_mbtowc+0x16>
 8004c6a:	f06f 0001 	mvn.w	r0, #1
 8004c6e:	e7f8      	b.n	8004c62 <__ascii_mbtowc+0x16>

08004c70 <memcpy>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	1e43      	subs	r3, r0, #1
 8004c74:	440a      	add	r2, r1
 8004c76:	4291      	cmp	r1, r2
 8004c78:	d100      	bne.n	8004c7c <memcpy+0xc>
 8004c7a:	bd10      	pop	{r4, pc}
 8004c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c84:	e7f7      	b.n	8004c76 <memcpy+0x6>

08004c86 <_Balloc>:
 8004c86:	b570      	push	{r4, r5, r6, lr}
 8004c88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	b93d      	cbnz	r5, 8004ca0 <_Balloc+0x1a>
 8004c90:	2010      	movs	r0, #16
 8004c92:	f7ff ffd3 	bl	8004c3c <malloc>
 8004c96:	6260      	str	r0, [r4, #36]	; 0x24
 8004c98:	6045      	str	r5, [r0, #4]
 8004c9a:	6085      	str	r5, [r0, #8]
 8004c9c:	6005      	str	r5, [r0, #0]
 8004c9e:	60c5      	str	r5, [r0, #12]
 8004ca0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ca2:	68eb      	ldr	r3, [r5, #12]
 8004ca4:	b183      	cbz	r3, 8004cc8 <_Balloc+0x42>
 8004ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004cae:	b9b8      	cbnz	r0, 8004ce0 <_Balloc+0x5a>
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f506 	lsl.w	r5, r1, r6
 8004cb6:	1d6a      	adds	r2, r5, #5
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 fbca 	bl	8005454 <_calloc_r>
 8004cc0:	b160      	cbz	r0, 8004cdc <_Balloc+0x56>
 8004cc2:	6046      	str	r6, [r0, #4]
 8004cc4:	6085      	str	r5, [r0, #8]
 8004cc6:	e00e      	b.n	8004ce6 <_Balloc+0x60>
 8004cc8:	2221      	movs	r2, #33	; 0x21
 8004cca:	2104      	movs	r1, #4
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f000 fbc1 	bl	8005454 <_calloc_r>
 8004cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd4:	60e8      	str	r0, [r5, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e4      	bne.n	8004ca6 <_Balloc+0x20>
 8004cdc:	2000      	movs	r0, #0
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	6802      	ldr	r2, [r0, #0]
 8004ce2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6103      	str	r3, [r0, #16]
 8004cea:	60c3      	str	r3, [r0, #12]
 8004cec:	bd70      	pop	{r4, r5, r6, pc}

08004cee <_Bfree>:
 8004cee:	b570      	push	{r4, r5, r6, lr}
 8004cf0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	b93c      	cbnz	r4, 8004d08 <_Bfree+0x1a>
 8004cf8:	2010      	movs	r0, #16
 8004cfa:	f7ff ff9f 	bl	8004c3c <malloc>
 8004cfe:	6270      	str	r0, [r6, #36]	; 0x24
 8004d00:	6044      	str	r4, [r0, #4]
 8004d02:	6084      	str	r4, [r0, #8]
 8004d04:	6004      	str	r4, [r0, #0]
 8004d06:	60c4      	str	r4, [r0, #12]
 8004d08:	b13d      	cbz	r5, 8004d1a <_Bfree+0x2c>
 8004d0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004d0c:	686a      	ldr	r2, [r5, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d14:	6029      	str	r1, [r5, #0]
 8004d16:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}

08004d1c <__multadd>:
 8004d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	461f      	mov	r7, r3
 8004d22:	4606      	mov	r6, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	2300      	movs	r3, #0
 8004d28:	690d      	ldr	r5, [r1, #16]
 8004d2a:	f101 0e14 	add.w	lr, r1, #20
 8004d2e:	f8de 0000 	ldr.w	r0, [lr]
 8004d32:	3301      	adds	r3, #1
 8004d34:	b281      	uxth	r1, r0
 8004d36:	fb02 7101 	mla	r1, r2, r1, r7
 8004d3a:	0c00      	lsrs	r0, r0, #16
 8004d3c:	0c0f      	lsrs	r7, r1, #16
 8004d3e:	fb02 7000 	mla	r0, r2, r0, r7
 8004d42:	b289      	uxth	r1, r1
 8004d44:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004d48:	429d      	cmp	r5, r3
 8004d4a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004d4e:	f84e 1b04 	str.w	r1, [lr], #4
 8004d52:	dcec      	bgt.n	8004d2e <__multadd+0x12>
 8004d54:	b1d7      	cbz	r7, 8004d8c <__multadd+0x70>
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	429d      	cmp	r5, r3
 8004d5a:	db12      	blt.n	8004d82 <__multadd+0x66>
 8004d5c:	6861      	ldr	r1, [r4, #4]
 8004d5e:	4630      	mov	r0, r6
 8004d60:	3101      	adds	r1, #1
 8004d62:	f7ff ff90 	bl	8004c86 <_Balloc>
 8004d66:	4680      	mov	r8, r0
 8004d68:	6922      	ldr	r2, [r4, #16]
 8004d6a:	f104 010c 	add.w	r1, r4, #12
 8004d6e:	3202      	adds	r2, #2
 8004d70:	0092      	lsls	r2, r2, #2
 8004d72:	300c      	adds	r0, #12
 8004d74:	f7ff ff7c 	bl	8004c70 <memcpy>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff ffb7 	bl	8004cee <_Bfree>
 8004d80:	4644      	mov	r4, r8
 8004d82:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d86:	3501      	adds	r5, #1
 8004d88:	615f      	str	r7, [r3, #20]
 8004d8a:	6125      	str	r5, [r4, #16]
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d92 <__s2b>:
 8004d92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d96:	4615      	mov	r5, r2
 8004d98:	2209      	movs	r2, #9
 8004d9a:	461f      	mov	r7, r3
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	460c      	mov	r4, r1
 8004da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004da4:	4606      	mov	r6, r0
 8004da6:	2201      	movs	r2, #1
 8004da8:	2100      	movs	r1, #0
 8004daa:	429a      	cmp	r2, r3
 8004dac:	db20      	blt.n	8004df0 <__s2b+0x5e>
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7ff ff69 	bl	8004c86 <_Balloc>
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	2d09      	cmp	r5, #9
 8004db8:	6143      	str	r3, [r0, #20]
 8004dba:	f04f 0301 	mov.w	r3, #1
 8004dbe:	6103      	str	r3, [r0, #16]
 8004dc0:	dd19      	ble.n	8004df6 <__s2b+0x64>
 8004dc2:	f104 0909 	add.w	r9, r4, #9
 8004dc6:	46c8      	mov	r8, r9
 8004dc8:	442c      	add	r4, r5
 8004dca:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004dce:	4601      	mov	r1, r0
 8004dd0:	3b30      	subs	r3, #48	; 0x30
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7ff ffa1 	bl	8004d1c <__multadd>
 8004dda:	45a0      	cmp	r8, r4
 8004ddc:	d1f5      	bne.n	8004dca <__s2b+0x38>
 8004dde:	f1a5 0408 	sub.w	r4, r5, #8
 8004de2:	444c      	add	r4, r9
 8004de4:	1b2d      	subs	r5, r5, r4
 8004de6:	1963      	adds	r3, r4, r5
 8004de8:	42bb      	cmp	r3, r7
 8004dea:	db07      	blt.n	8004dfc <__s2b+0x6a>
 8004dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df0:	0052      	lsls	r2, r2, #1
 8004df2:	3101      	adds	r1, #1
 8004df4:	e7d9      	b.n	8004daa <__s2b+0x18>
 8004df6:	340a      	adds	r4, #10
 8004df8:	2509      	movs	r5, #9
 8004dfa:	e7f3      	b.n	8004de4 <__s2b+0x52>
 8004dfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e00:	4601      	mov	r1, r0
 8004e02:	3b30      	subs	r3, #48	; 0x30
 8004e04:	220a      	movs	r2, #10
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7ff ff88 	bl	8004d1c <__multadd>
 8004e0c:	e7eb      	b.n	8004de6 <__s2b+0x54>

08004e0e <__hi0bits>:
 8004e0e:	0c02      	lsrs	r2, r0, #16
 8004e10:	0412      	lsls	r2, r2, #16
 8004e12:	4603      	mov	r3, r0
 8004e14:	b9b2      	cbnz	r2, 8004e44 <__hi0bits+0x36>
 8004e16:	0403      	lsls	r3, r0, #16
 8004e18:	2010      	movs	r0, #16
 8004e1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004e1e:	bf04      	itt	eq
 8004e20:	021b      	lsleq	r3, r3, #8
 8004e22:	3008      	addeq	r0, #8
 8004e24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004e28:	bf04      	itt	eq
 8004e2a:	011b      	lsleq	r3, r3, #4
 8004e2c:	3004      	addeq	r0, #4
 8004e2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004e32:	bf04      	itt	eq
 8004e34:	009b      	lsleq	r3, r3, #2
 8004e36:	3002      	addeq	r0, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db06      	blt.n	8004e4a <__hi0bits+0x3c>
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	d503      	bpl.n	8004e48 <__hi0bits+0x3a>
 8004e40:	3001      	adds	r0, #1
 8004e42:	4770      	bx	lr
 8004e44:	2000      	movs	r0, #0
 8004e46:	e7e8      	b.n	8004e1a <__hi0bits+0xc>
 8004e48:	2020      	movs	r0, #32
 8004e4a:	4770      	bx	lr

08004e4c <__lo0bits>:
 8004e4c:	6803      	ldr	r3, [r0, #0]
 8004e4e:	4601      	mov	r1, r0
 8004e50:	f013 0207 	ands.w	r2, r3, #7
 8004e54:	d00b      	beq.n	8004e6e <__lo0bits+0x22>
 8004e56:	07da      	lsls	r2, r3, #31
 8004e58:	d423      	bmi.n	8004ea2 <__lo0bits+0x56>
 8004e5a:	0798      	lsls	r0, r3, #30
 8004e5c:	bf49      	itett	mi
 8004e5e:	085b      	lsrmi	r3, r3, #1
 8004e60:	089b      	lsrpl	r3, r3, #2
 8004e62:	2001      	movmi	r0, #1
 8004e64:	600b      	strmi	r3, [r1, #0]
 8004e66:	bf5c      	itt	pl
 8004e68:	600b      	strpl	r3, [r1, #0]
 8004e6a:	2002      	movpl	r0, #2
 8004e6c:	4770      	bx	lr
 8004e6e:	b298      	uxth	r0, r3
 8004e70:	b9a8      	cbnz	r0, 8004e9e <__lo0bits+0x52>
 8004e72:	2010      	movs	r0, #16
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004e7a:	bf04      	itt	eq
 8004e7c:	0a1b      	lsreq	r3, r3, #8
 8004e7e:	3008      	addeq	r0, #8
 8004e80:	071a      	lsls	r2, r3, #28
 8004e82:	bf04      	itt	eq
 8004e84:	091b      	lsreq	r3, r3, #4
 8004e86:	3004      	addeq	r0, #4
 8004e88:	079a      	lsls	r2, r3, #30
 8004e8a:	bf04      	itt	eq
 8004e8c:	089b      	lsreq	r3, r3, #2
 8004e8e:	3002      	addeq	r0, #2
 8004e90:	07da      	lsls	r2, r3, #31
 8004e92:	d402      	bmi.n	8004e9a <__lo0bits+0x4e>
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	d006      	beq.n	8004ea6 <__lo0bits+0x5a>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	600b      	str	r3, [r1, #0]
 8004e9c:	4770      	bx	lr
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	e7e9      	b.n	8004e76 <__lo0bits+0x2a>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	4770      	bx	lr
 8004ea6:	2020      	movs	r0, #32
 8004ea8:	4770      	bx	lr

08004eaa <__i2b>:
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	460c      	mov	r4, r1
 8004eae:	2101      	movs	r1, #1
 8004eb0:	f7ff fee9 	bl	8004c86 <_Balloc>
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	6144      	str	r4, [r0, #20]
 8004eb8:	6102      	str	r2, [r0, #16]
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <__multiply>:
 8004ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	690a      	ldr	r2, [r1, #16]
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	4689      	mov	r9, r1
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	bfbe      	ittt	lt
 8004ecc:	460b      	movlt	r3, r1
 8004ece:	46a1      	movlt	r9, r4
 8004ed0:	461c      	movlt	r4, r3
 8004ed2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ed6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004eda:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004ede:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ee2:	eb07 060a 	add.w	r6, r7, sl
 8004ee6:	429e      	cmp	r6, r3
 8004ee8:	bfc8      	it	gt
 8004eea:	3101      	addgt	r1, #1
 8004eec:	f7ff fecb 	bl	8004c86 <_Balloc>
 8004ef0:	f100 0514 	add.w	r5, r0, #20
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004efc:	4543      	cmp	r3, r8
 8004efe:	d316      	bcc.n	8004f2e <__multiply+0x72>
 8004f00:	f104 0214 	add.w	r2, r4, #20
 8004f04:	f109 0114 	add.w	r1, r9, #20
 8004f08:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004f0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	9c01      	ldr	r4, [sp, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	4294      	cmp	r4, r2
 8004f18:	d80c      	bhi.n	8004f34 <__multiply+0x78>
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	dd03      	ble.n	8004f26 <__multiply+0x6a>
 8004f1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d054      	beq.n	8004fd0 <__multiply+0x114>
 8004f26:	6106      	str	r6, [r0, #16]
 8004f28:	b003      	add	sp, #12
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	f843 2b04 	str.w	r2, [r3], #4
 8004f32:	e7e3      	b.n	8004efc <__multiply+0x40>
 8004f34:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f38:	3204      	adds	r2, #4
 8004f3a:	f1ba 0f00 	cmp.w	sl, #0
 8004f3e:	d020      	beq.n	8004f82 <__multiply+0xc6>
 8004f40:	46ae      	mov	lr, r5
 8004f42:	4689      	mov	r9, r1
 8004f44:	f04f 0c00 	mov.w	ip, #0
 8004f48:	f859 4b04 	ldr.w	r4, [r9], #4
 8004f4c:	f8be b000 	ldrh.w	fp, [lr]
 8004f50:	b2a3      	uxth	r3, r4
 8004f52:	fb0a b303 	mla	r3, sl, r3, fp
 8004f56:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004f5a:	f8de 4000 	ldr.w	r4, [lr]
 8004f5e:	4463      	add	r3, ip
 8004f60:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004f64:	fb0a c40b 	mla	r4, sl, fp, ip
 8004f68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004f72:	454f      	cmp	r7, r9
 8004f74:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004f78:	f84e 3b04 	str.w	r3, [lr], #4
 8004f7c:	d8e4      	bhi.n	8004f48 <__multiply+0x8c>
 8004f7e:	f8ce c000 	str.w	ip, [lr]
 8004f82:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004f86:	f1b9 0f00 	cmp.w	r9, #0
 8004f8a:	d01f      	beq.n	8004fcc <__multiply+0x110>
 8004f8c:	46ae      	mov	lr, r5
 8004f8e:	468c      	mov	ip, r1
 8004f90:	f04f 0a00 	mov.w	sl, #0
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	f8bc 4000 	ldrh.w	r4, [ip]
 8004f9a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	fb09 b404 	mla	r4, r9, r4, fp
 8004fa4:	44a2      	add	sl, r4
 8004fa6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004faa:	f84e 3b04 	str.w	r3, [lr], #4
 8004fae:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fb2:	f8be 4000 	ldrh.w	r4, [lr]
 8004fb6:	0c1b      	lsrs	r3, r3, #16
 8004fb8:	fb09 4303 	mla	r3, r9, r3, r4
 8004fbc:	4567      	cmp	r7, ip
 8004fbe:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004fc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fc6:	d8e6      	bhi.n	8004f96 <__multiply+0xda>
 8004fc8:	f8ce 3000 	str.w	r3, [lr]
 8004fcc:	3504      	adds	r5, #4
 8004fce:	e7a0      	b.n	8004f12 <__multiply+0x56>
 8004fd0:	3e01      	subs	r6, #1
 8004fd2:	e7a2      	b.n	8004f1a <__multiply+0x5e>

08004fd4 <__pow5mult>:
 8004fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	4615      	mov	r5, r2
 8004fda:	f012 0203 	ands.w	r2, r2, #3
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460f      	mov	r7, r1
 8004fe2:	d007      	beq.n	8004ff4 <__pow5mult+0x20>
 8004fe4:	4c21      	ldr	r4, [pc, #132]	; (800506c <__pow5mult+0x98>)
 8004fe6:	3a01      	subs	r2, #1
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fee:	f7ff fe95 	bl	8004d1c <__multadd>
 8004ff2:	4607      	mov	r7, r0
 8004ff4:	10ad      	asrs	r5, r5, #2
 8004ff6:	d035      	beq.n	8005064 <__pow5mult+0x90>
 8004ff8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ffa:	b93c      	cbnz	r4, 800500c <__pow5mult+0x38>
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	f7ff fe1d 	bl	8004c3c <malloc>
 8005002:	6270      	str	r0, [r6, #36]	; 0x24
 8005004:	6044      	str	r4, [r0, #4]
 8005006:	6084      	str	r4, [r0, #8]
 8005008:	6004      	str	r4, [r0, #0]
 800500a:	60c4      	str	r4, [r0, #12]
 800500c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005014:	b94c      	cbnz	r4, 800502a <__pow5mult+0x56>
 8005016:	f240 2171 	movw	r1, #625	; 0x271
 800501a:	4630      	mov	r0, r6
 800501c:	f7ff ff45 	bl	8004eaa <__i2b>
 8005020:	2300      	movs	r3, #0
 8005022:	4604      	mov	r4, r0
 8005024:	f8c8 0008 	str.w	r0, [r8, #8]
 8005028:	6003      	str	r3, [r0, #0]
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	07eb      	lsls	r3, r5, #31
 8005030:	d50a      	bpl.n	8005048 <__pow5mult+0x74>
 8005032:	4639      	mov	r1, r7
 8005034:	4622      	mov	r2, r4
 8005036:	4630      	mov	r0, r6
 8005038:	f7ff ff40 	bl	8004ebc <__multiply>
 800503c:	4681      	mov	r9, r0
 800503e:	4639      	mov	r1, r7
 8005040:	4630      	mov	r0, r6
 8005042:	f7ff fe54 	bl	8004cee <_Bfree>
 8005046:	464f      	mov	r7, r9
 8005048:	106d      	asrs	r5, r5, #1
 800504a:	d00b      	beq.n	8005064 <__pow5mult+0x90>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	b938      	cbnz	r0, 8005060 <__pow5mult+0x8c>
 8005050:	4622      	mov	r2, r4
 8005052:	4621      	mov	r1, r4
 8005054:	4630      	mov	r0, r6
 8005056:	f7ff ff31 	bl	8004ebc <__multiply>
 800505a:	6020      	str	r0, [r4, #0]
 800505c:	f8c0 8000 	str.w	r8, [r0]
 8005060:	4604      	mov	r4, r0
 8005062:	e7e4      	b.n	800502e <__pow5mult+0x5a>
 8005064:	4638      	mov	r0, r7
 8005066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506a:	bf00      	nop
 800506c:	08005748 	.word	0x08005748

08005070 <__lshift>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	460c      	mov	r4, r1
 8005076:	4607      	mov	r7, r0
 8005078:	4616      	mov	r6, r2
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005080:	eb0a 0903 	add.w	r9, sl, r3
 8005084:	6849      	ldr	r1, [r1, #4]
 8005086:	68a3      	ldr	r3, [r4, #8]
 8005088:	f109 0501 	add.w	r5, r9, #1
 800508c:	42ab      	cmp	r3, r5
 800508e:	db31      	blt.n	80050f4 <__lshift+0x84>
 8005090:	4638      	mov	r0, r7
 8005092:	f7ff fdf8 	bl	8004c86 <_Balloc>
 8005096:	2200      	movs	r2, #0
 8005098:	4680      	mov	r8, r0
 800509a:	4611      	mov	r1, r2
 800509c:	f100 0314 	add.w	r3, r0, #20
 80050a0:	4552      	cmp	r2, sl
 80050a2:	db2a      	blt.n	80050fa <__lshift+0x8a>
 80050a4:	6920      	ldr	r0, [r4, #16]
 80050a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050aa:	f104 0114 	add.w	r1, r4, #20
 80050ae:	f016 021f 	ands.w	r2, r6, #31
 80050b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80050b6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80050ba:	d022      	beq.n	8005102 <__lshift+0x92>
 80050bc:	2000      	movs	r0, #0
 80050be:	f1c2 0c20 	rsb	ip, r2, #32
 80050c2:	680e      	ldr	r6, [r1, #0]
 80050c4:	4096      	lsls	r6, r2
 80050c6:	4330      	orrs	r0, r6
 80050c8:	f843 0b04 	str.w	r0, [r3], #4
 80050cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80050d0:	458e      	cmp	lr, r1
 80050d2:	fa20 f00c 	lsr.w	r0, r0, ip
 80050d6:	d8f4      	bhi.n	80050c2 <__lshift+0x52>
 80050d8:	6018      	str	r0, [r3, #0]
 80050da:	b108      	cbz	r0, 80050e0 <__lshift+0x70>
 80050dc:	f109 0502 	add.w	r5, r9, #2
 80050e0:	3d01      	subs	r5, #1
 80050e2:	4638      	mov	r0, r7
 80050e4:	f8c8 5010 	str.w	r5, [r8, #16]
 80050e8:	4621      	mov	r1, r4
 80050ea:	f7ff fe00 	bl	8004cee <_Bfree>
 80050ee:	4640      	mov	r0, r8
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	3101      	adds	r1, #1
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	e7c8      	b.n	800508c <__lshift+0x1c>
 80050fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80050fe:	3201      	adds	r2, #1
 8005100:	e7ce      	b.n	80050a0 <__lshift+0x30>
 8005102:	3b04      	subs	r3, #4
 8005104:	f851 2b04 	ldr.w	r2, [r1], #4
 8005108:	458e      	cmp	lr, r1
 800510a:	f843 2f04 	str.w	r2, [r3, #4]!
 800510e:	d8f9      	bhi.n	8005104 <__lshift+0x94>
 8005110:	e7e6      	b.n	80050e0 <__lshift+0x70>

08005112 <__mcmp>:
 8005112:	6903      	ldr	r3, [r0, #16]
 8005114:	690a      	ldr	r2, [r1, #16]
 8005116:	b530      	push	{r4, r5, lr}
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	d10c      	bne.n	8005136 <__mcmp+0x24>
 800511c:	0092      	lsls	r2, r2, #2
 800511e:	3014      	adds	r0, #20
 8005120:	3114      	adds	r1, #20
 8005122:	1884      	adds	r4, r0, r2
 8005124:	4411      	add	r1, r2
 8005126:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800512a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800512e:	4295      	cmp	r5, r2
 8005130:	d003      	beq.n	800513a <__mcmp+0x28>
 8005132:	d305      	bcc.n	8005140 <__mcmp+0x2e>
 8005134:	2301      	movs	r3, #1
 8005136:	4618      	mov	r0, r3
 8005138:	bd30      	pop	{r4, r5, pc}
 800513a:	42a0      	cmp	r0, r4
 800513c:	d3f3      	bcc.n	8005126 <__mcmp+0x14>
 800513e:	e7fa      	b.n	8005136 <__mcmp+0x24>
 8005140:	f04f 33ff 	mov.w	r3, #4294967295
 8005144:	e7f7      	b.n	8005136 <__mcmp+0x24>

08005146 <__mdiff>:
 8005146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514a:	460d      	mov	r5, r1
 800514c:	4607      	mov	r7, r0
 800514e:	4611      	mov	r1, r2
 8005150:	4628      	mov	r0, r5
 8005152:	4614      	mov	r4, r2
 8005154:	f7ff ffdd 	bl	8005112 <__mcmp>
 8005158:	1e06      	subs	r6, r0, #0
 800515a:	d108      	bne.n	800516e <__mdiff+0x28>
 800515c:	4631      	mov	r1, r6
 800515e:	4638      	mov	r0, r7
 8005160:	f7ff fd91 	bl	8004c86 <_Balloc>
 8005164:	2301      	movs	r3, #1
 8005166:	6146      	str	r6, [r0, #20]
 8005168:	6103      	str	r3, [r0, #16]
 800516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516e:	bfa4      	itt	ge
 8005170:	4623      	movge	r3, r4
 8005172:	462c      	movge	r4, r5
 8005174:	4638      	mov	r0, r7
 8005176:	6861      	ldr	r1, [r4, #4]
 8005178:	bfa6      	itte	ge
 800517a:	461d      	movge	r5, r3
 800517c:	2600      	movge	r6, #0
 800517e:	2601      	movlt	r6, #1
 8005180:	f7ff fd81 	bl	8004c86 <_Balloc>
 8005184:	f04f 0c00 	mov.w	ip, #0
 8005188:	60c6      	str	r6, [r0, #12]
 800518a:	692b      	ldr	r3, [r5, #16]
 800518c:	6926      	ldr	r6, [r4, #16]
 800518e:	f104 0214 	add.w	r2, r4, #20
 8005192:	f105 0914 	add.w	r9, r5, #20
 8005196:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800519a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800519e:	f100 0114 	add.w	r1, r0, #20
 80051a2:	f852 ab04 	ldr.w	sl, [r2], #4
 80051a6:	f859 5b04 	ldr.w	r5, [r9], #4
 80051aa:	fa1f f38a 	uxth.w	r3, sl
 80051ae:	4463      	add	r3, ip
 80051b0:	b2ac      	uxth	r4, r5
 80051b2:	1b1b      	subs	r3, r3, r4
 80051b4:	0c2c      	lsrs	r4, r5, #16
 80051b6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80051ba:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80051be:	b29b      	uxth	r3, r3
 80051c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80051c4:	45c8      	cmp	r8, r9
 80051c6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80051ca:	4696      	mov	lr, r2
 80051cc:	f841 4b04 	str.w	r4, [r1], #4
 80051d0:	d8e7      	bhi.n	80051a2 <__mdiff+0x5c>
 80051d2:	45be      	cmp	lr, r7
 80051d4:	d305      	bcc.n	80051e2 <__mdiff+0x9c>
 80051d6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80051da:	b18b      	cbz	r3, 8005200 <__mdiff+0xba>
 80051dc:	6106      	str	r6, [r0, #16]
 80051de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80051e6:	b2a2      	uxth	r2, r4
 80051e8:	4462      	add	r2, ip
 80051ea:	1413      	asrs	r3, r2, #16
 80051ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80051f0:	b292      	uxth	r2, r2
 80051f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80051f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80051fa:	f841 2b04 	str.w	r2, [r1], #4
 80051fe:	e7e8      	b.n	80051d2 <__mdiff+0x8c>
 8005200:	3e01      	subs	r6, #1
 8005202:	e7e8      	b.n	80051d6 <__mdiff+0x90>

08005204 <__ulp>:
 8005204:	4b10      	ldr	r3, [pc, #64]	; (8005248 <__ulp+0x44>)
 8005206:	400b      	ands	r3, r1
 8005208:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800520c:	2b00      	cmp	r3, #0
 800520e:	dd02      	ble.n	8005216 <__ulp+0x12>
 8005210:	2000      	movs	r0, #0
 8005212:	4619      	mov	r1, r3
 8005214:	4770      	bx	lr
 8005216:	425b      	negs	r3, r3
 8005218:	151b      	asrs	r3, r3, #20
 800521a:	2b13      	cmp	r3, #19
 800521c:	f04f 0000 	mov.w	r0, #0
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	dc04      	bgt.n	8005230 <__ulp+0x2c>
 8005226:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800522a:	fa42 f103 	asr.w	r1, r2, r3
 800522e:	4770      	bx	lr
 8005230:	2201      	movs	r2, #1
 8005232:	3b14      	subs	r3, #20
 8005234:	2b1e      	cmp	r3, #30
 8005236:	bfce      	itee	gt
 8005238:	4613      	movgt	r3, r2
 800523a:	f1c3 031f 	rsble	r3, r3, #31
 800523e:	fa02 f303 	lslle.w	r3, r2, r3
 8005242:	4618      	mov	r0, r3
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	7ff00000 	.word	0x7ff00000

0800524c <__b2d>:
 800524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005250:	6907      	ldr	r7, [r0, #16]
 8005252:	f100 0914 	add.w	r9, r0, #20
 8005256:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800525a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800525e:	f1a7 0804 	sub.w	r8, r7, #4
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff fdd3 	bl	8004e0e <__hi0bits>
 8005268:	f1c0 0320 	rsb	r3, r0, #32
 800526c:	280a      	cmp	r0, #10
 800526e:	600b      	str	r3, [r1, #0]
 8005270:	491e      	ldr	r1, [pc, #120]	; (80052ec <__b2d+0xa0>)
 8005272:	dc17      	bgt.n	80052a4 <__b2d+0x58>
 8005274:	45c1      	cmp	r9, r8
 8005276:	bf28      	it	cs
 8005278:	2200      	movcs	r2, #0
 800527a:	f1c0 0e0b 	rsb	lr, r0, #11
 800527e:	fa26 f30e 	lsr.w	r3, r6, lr
 8005282:	bf38      	it	cc
 8005284:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005288:	ea43 0501 	orr.w	r5, r3, r1
 800528c:	f100 0315 	add.w	r3, r0, #21
 8005290:	fa06 f303 	lsl.w	r3, r6, r3
 8005294:	fa22 f20e 	lsr.w	r2, r2, lr
 8005298:	ea43 0402 	orr.w	r4, r3, r2
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a4:	45c1      	cmp	r9, r8
 80052a6:	bf3a      	itte	cc
 80052a8:	f1a7 0808 	subcc.w	r8, r7, #8
 80052ac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80052b0:	2200      	movcs	r2, #0
 80052b2:	f1b0 030b 	subs.w	r3, r0, #11
 80052b6:	d015      	beq.n	80052e4 <__b2d+0x98>
 80052b8:	409e      	lsls	r6, r3
 80052ba:	f1c3 0720 	rsb	r7, r3, #32
 80052be:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80052c2:	fa22 f107 	lsr.w	r1, r2, r7
 80052c6:	45c8      	cmp	r8, r9
 80052c8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80052cc:	ea46 0501 	orr.w	r5, r6, r1
 80052d0:	bf94      	ite	ls
 80052d2:	2100      	movls	r1, #0
 80052d4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80052d8:	fa02 f003 	lsl.w	r0, r2, r3
 80052dc:	40f9      	lsrs	r1, r7
 80052de:	ea40 0401 	orr.w	r4, r0, r1
 80052e2:	e7db      	b.n	800529c <__b2d+0x50>
 80052e4:	ea46 0501 	orr.w	r5, r6, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	e7d7      	b.n	800529c <__b2d+0x50>
 80052ec:	3ff00000 	.word	0x3ff00000

080052f0 <__d2b>:
 80052f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052f4:	461c      	mov	r4, r3
 80052f6:	2101      	movs	r1, #1
 80052f8:	4690      	mov	r8, r2
 80052fa:	9e08      	ldr	r6, [sp, #32]
 80052fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052fe:	f7ff fcc2 	bl	8004c86 <_Balloc>
 8005302:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005306:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800530a:	4607      	mov	r7, r0
 800530c:	bb34      	cbnz	r4, 800535c <__d2b+0x6c>
 800530e:	9201      	str	r2, [sp, #4]
 8005310:	f1b8 0f00 	cmp.w	r8, #0
 8005314:	d027      	beq.n	8005366 <__d2b+0x76>
 8005316:	a802      	add	r0, sp, #8
 8005318:	f840 8d08 	str.w	r8, [r0, #-8]!
 800531c:	f7ff fd96 	bl	8004e4c <__lo0bits>
 8005320:	9900      	ldr	r1, [sp, #0]
 8005322:	b1f0      	cbz	r0, 8005362 <__d2b+0x72>
 8005324:	9a01      	ldr	r2, [sp, #4]
 8005326:	f1c0 0320 	rsb	r3, r0, #32
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	430b      	orrs	r3, r1
 8005330:	40c2      	lsrs	r2, r0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	9201      	str	r2, [sp, #4]
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf14      	ite	ne
 800533c:	2102      	movne	r1, #2
 800533e:	2101      	moveq	r1, #1
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	6139      	str	r1, [r7, #16]
 8005344:	b1c4      	cbz	r4, 8005378 <__d2b+0x88>
 8005346:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800534a:	4404      	add	r4, r0
 800534c:	6034      	str	r4, [r6, #0]
 800534e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	4638      	mov	r0, r7
 8005356:	b002      	add	sp, #8
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005360:	e7d5      	b.n	800530e <__d2b+0x1e>
 8005362:	6179      	str	r1, [r7, #20]
 8005364:	e7e7      	b.n	8005336 <__d2b+0x46>
 8005366:	a801      	add	r0, sp, #4
 8005368:	f7ff fd70 	bl	8004e4c <__lo0bits>
 800536c:	2101      	movs	r1, #1
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	6139      	str	r1, [r7, #16]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	3020      	adds	r0, #32
 8005376:	e7e5      	b.n	8005344 <__d2b+0x54>
 8005378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800537c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005380:	6030      	str	r0, [r6, #0]
 8005382:	6918      	ldr	r0, [r3, #16]
 8005384:	f7ff fd43 	bl	8004e0e <__hi0bits>
 8005388:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800538c:	e7e1      	b.n	8005352 <__d2b+0x62>

0800538e <__ratio>:
 800538e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005392:	4688      	mov	r8, r1
 8005394:	4669      	mov	r1, sp
 8005396:	4681      	mov	r9, r0
 8005398:	f7ff ff58 	bl	800524c <__b2d>
 800539c:	460d      	mov	r5, r1
 800539e:	4604      	mov	r4, r0
 80053a0:	a901      	add	r1, sp, #4
 80053a2:	4640      	mov	r0, r8
 80053a4:	f7ff ff52 	bl	800524c <__b2d>
 80053a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80053ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80053b0:	9e00      	ldr	r6, [sp, #0]
 80053b2:	1a9a      	subs	r2, r3, r2
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	1af3      	subs	r3, r6, r3
 80053b8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bfd6      	itet	le
 80053c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80053c4:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80053c8:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fb f9be 	bl	8000754 <__aeabi_ddiv>
 80053d8:	b002      	add	sp, #8
 80053da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080053de <__copybits>:
 80053de:	3901      	subs	r1, #1
 80053e0:	b510      	push	{r4, lr}
 80053e2:	1149      	asrs	r1, r1, #5
 80053e4:	6914      	ldr	r4, [r2, #16]
 80053e6:	3101      	adds	r1, #1
 80053e8:	f102 0314 	add.w	r3, r2, #20
 80053ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80053f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	4602      	mov	r2, r0
 80053f8:	d303      	bcc.n	8005402 <__copybits+0x24>
 80053fa:	2300      	movs	r3, #0
 80053fc:	428a      	cmp	r2, r1
 80053fe:	d305      	bcc.n	800540c <__copybits+0x2e>
 8005400:	bd10      	pop	{r4, pc}
 8005402:	f853 2b04 	ldr.w	r2, [r3], #4
 8005406:	f840 2b04 	str.w	r2, [r0], #4
 800540a:	e7f3      	b.n	80053f4 <__copybits+0x16>
 800540c:	f842 3b04 	str.w	r3, [r2], #4
 8005410:	e7f4      	b.n	80053fc <__copybits+0x1e>

08005412 <__any_on>:
 8005412:	f100 0214 	add.w	r2, r0, #20
 8005416:	6900      	ldr	r0, [r0, #16]
 8005418:	114b      	asrs	r3, r1, #5
 800541a:	4298      	cmp	r0, r3
 800541c:	b510      	push	{r4, lr}
 800541e:	db11      	blt.n	8005444 <__any_on+0x32>
 8005420:	dd0a      	ble.n	8005438 <__any_on+0x26>
 8005422:	f011 011f 	ands.w	r1, r1, #31
 8005426:	d007      	beq.n	8005438 <__any_on+0x26>
 8005428:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800542c:	fa24 f001 	lsr.w	r0, r4, r1
 8005430:	fa00 f101 	lsl.w	r1, r0, r1
 8005434:	428c      	cmp	r4, r1
 8005436:	d10b      	bne.n	8005450 <__any_on+0x3e>
 8005438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800543c:	4293      	cmp	r3, r2
 800543e:	d803      	bhi.n	8005448 <__any_on+0x36>
 8005440:	2000      	movs	r0, #0
 8005442:	bd10      	pop	{r4, pc}
 8005444:	4603      	mov	r3, r0
 8005446:	e7f7      	b.n	8005438 <__any_on+0x26>
 8005448:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800544c:	2900      	cmp	r1, #0
 800544e:	d0f5      	beq.n	800543c <__any_on+0x2a>
 8005450:	2001      	movs	r0, #1
 8005452:	bd10      	pop	{r4, pc}

08005454 <_calloc_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	fb02 f401 	mul.w	r4, r2, r1
 800545a:	4621      	mov	r1, r4
 800545c:	f000 f808 	bl	8005470 <_malloc_r>
 8005460:	4605      	mov	r5, r0
 8005462:	b118      	cbz	r0, 800546c <_calloc_r+0x18>
 8005464:	4622      	mov	r2, r4
 8005466:	2100      	movs	r1, #0
 8005468:	f7fe fa38 	bl	80038dc <memset>
 800546c:	4628      	mov	r0, r5
 800546e:	bd38      	pop	{r3, r4, r5, pc}

08005470 <_malloc_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	1ccd      	adds	r5, r1, #3
 8005474:	f025 0503 	bic.w	r5, r5, #3
 8005478:	3508      	adds	r5, #8
 800547a:	2d0c      	cmp	r5, #12
 800547c:	bf38      	it	cc
 800547e:	250c      	movcc	r5, #12
 8005480:	2d00      	cmp	r5, #0
 8005482:	4606      	mov	r6, r0
 8005484:	db01      	blt.n	800548a <_malloc_r+0x1a>
 8005486:	42a9      	cmp	r1, r5
 8005488:	d903      	bls.n	8005492 <_malloc_r+0x22>
 800548a:	230c      	movs	r3, #12
 800548c:	6033      	str	r3, [r6, #0]
 800548e:	2000      	movs	r0, #0
 8005490:	bd70      	pop	{r4, r5, r6, pc}
 8005492:	f000 f87a 	bl	800558a <__malloc_lock>
 8005496:	4a23      	ldr	r2, [pc, #140]	; (8005524 <_malloc_r+0xb4>)
 8005498:	6814      	ldr	r4, [r2, #0]
 800549a:	4621      	mov	r1, r4
 800549c:	b991      	cbnz	r1, 80054c4 <_malloc_r+0x54>
 800549e:	4c22      	ldr	r4, [pc, #136]	; (8005528 <_malloc_r+0xb8>)
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	b91b      	cbnz	r3, 80054ac <_malloc_r+0x3c>
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 f841 	bl	800552c <_sbrk_r>
 80054aa:	6020      	str	r0, [r4, #0]
 80054ac:	4629      	mov	r1, r5
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f83c 	bl	800552c <_sbrk_r>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d126      	bne.n	8005506 <_malloc_r+0x96>
 80054b8:	230c      	movs	r3, #12
 80054ba:	4630      	mov	r0, r6
 80054bc:	6033      	str	r3, [r6, #0]
 80054be:	f000 f865 	bl	800558c <__malloc_unlock>
 80054c2:	e7e4      	b.n	800548e <_malloc_r+0x1e>
 80054c4:	680b      	ldr	r3, [r1, #0]
 80054c6:	1b5b      	subs	r3, r3, r5
 80054c8:	d41a      	bmi.n	8005500 <_malloc_r+0x90>
 80054ca:	2b0b      	cmp	r3, #11
 80054cc:	d90f      	bls.n	80054ee <_malloc_r+0x7e>
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	18cc      	adds	r4, r1, r3
 80054d2:	50cd      	str	r5, [r1, r3]
 80054d4:	4630      	mov	r0, r6
 80054d6:	f000 f859 	bl	800558c <__malloc_unlock>
 80054da:	f104 000b 	add.w	r0, r4, #11
 80054de:	1d23      	adds	r3, r4, #4
 80054e0:	f020 0007 	bic.w	r0, r0, #7
 80054e4:	1ac3      	subs	r3, r0, r3
 80054e6:	d01b      	beq.n	8005520 <_malloc_r+0xb0>
 80054e8:	425a      	negs	r2, r3
 80054ea:	50e2      	str	r2, [r4, r3]
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
 80054ee:	428c      	cmp	r4, r1
 80054f0:	bf0b      	itete	eq
 80054f2:	6863      	ldreq	r3, [r4, #4]
 80054f4:	684b      	ldrne	r3, [r1, #4]
 80054f6:	6013      	streq	r3, [r2, #0]
 80054f8:	6063      	strne	r3, [r4, #4]
 80054fa:	bf18      	it	ne
 80054fc:	460c      	movne	r4, r1
 80054fe:	e7e9      	b.n	80054d4 <_malloc_r+0x64>
 8005500:	460c      	mov	r4, r1
 8005502:	6849      	ldr	r1, [r1, #4]
 8005504:	e7ca      	b.n	800549c <_malloc_r+0x2c>
 8005506:	1cc4      	adds	r4, r0, #3
 8005508:	f024 0403 	bic.w	r4, r4, #3
 800550c:	42a0      	cmp	r0, r4
 800550e:	d005      	beq.n	800551c <_malloc_r+0xac>
 8005510:	1a21      	subs	r1, r4, r0
 8005512:	4630      	mov	r0, r6
 8005514:	f000 f80a 	bl	800552c <_sbrk_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d0cd      	beq.n	80054b8 <_malloc_r+0x48>
 800551c:	6025      	str	r5, [r4, #0]
 800551e:	e7d9      	b.n	80054d4 <_malloc_r+0x64>
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	bf00      	nop
 8005524:	200001f4 	.word	0x200001f4
 8005528:	200001f8 	.word	0x200001f8

0800552c <_sbrk_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	2300      	movs	r3, #0
 8005530:	4c05      	ldr	r4, [pc, #20]	; (8005548 <_sbrk_r+0x1c>)
 8005532:	4605      	mov	r5, r0
 8005534:	4608      	mov	r0, r1
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	f000 f82a 	bl	8005590 <_sbrk>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d102      	bne.n	8005546 <_sbrk_r+0x1a>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	b103      	cbz	r3, 8005546 <_sbrk_r+0x1a>
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	bd38      	pop	{r3, r4, r5, pc}
 8005548:	20000478 	.word	0x20000478

0800554c <strncmp>:
 800554c:	b510      	push	{r4, lr}
 800554e:	b16a      	cbz	r2, 800556c <strncmp+0x20>
 8005550:	3901      	subs	r1, #1
 8005552:	1884      	adds	r4, r0, r2
 8005554:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005558:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <strncmp+0x1c>
 8005560:	42a0      	cmp	r0, r4
 8005562:	d001      	beq.n	8005568 <strncmp+0x1c>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f5      	bne.n	8005554 <strncmp+0x8>
 8005568:	1a98      	subs	r0, r3, r2
 800556a:	bd10      	pop	{r4, pc}
 800556c:	4610      	mov	r0, r2
 800556e:	bd10      	pop	{r4, pc}

08005570 <__ascii_wctomb>:
 8005570:	b149      	cbz	r1, 8005586 <__ascii_wctomb+0x16>
 8005572:	2aff      	cmp	r2, #255	; 0xff
 8005574:	bf8b      	itete	hi
 8005576:	238a      	movhi	r3, #138	; 0x8a
 8005578:	700a      	strbls	r2, [r1, #0]
 800557a:	6003      	strhi	r3, [r0, #0]
 800557c:	2001      	movls	r0, #1
 800557e:	bf88      	it	hi
 8005580:	f04f 30ff 	movhi.w	r0, #4294967295
 8005584:	4770      	bx	lr
 8005586:	4608      	mov	r0, r1
 8005588:	4770      	bx	lr

0800558a <__malloc_lock>:
 800558a:	4770      	bx	lr

0800558c <__malloc_unlock>:
 800558c:	4770      	bx	lr
	...

08005590 <_sbrk>:
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <_sbrk+0x14>)
 8005592:	4602      	mov	r2, r0
 8005594:	6819      	ldr	r1, [r3, #0]
 8005596:	b909      	cbnz	r1, 800559c <_sbrk+0xc>
 8005598:	4903      	ldr	r1, [pc, #12]	; (80055a8 <_sbrk+0x18>)
 800559a:	6019      	str	r1, [r3, #0]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	4402      	add	r2, r0
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	4770      	bx	lr
 80055a4:	200001fc 	.word	0x200001fc
 80055a8:	2000047c 	.word	0x2000047c

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
